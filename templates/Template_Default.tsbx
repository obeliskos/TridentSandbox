<!DOCTYPE html>
<!--html-->
<html> 
<head>
<title>Trident Sandbox v1.74</title>
<!-- 
<meta name="application-name" content="Trident Sandbox v1.6"/>
<meta name="msapplication-TileColor" content="#1F96CF"/>
<meta name="msapplication-square70x70logo" content="/images_ide/live_tile/Poseidon-Small70.png"/>
<meta name="msapplication-square150x150logo" content="/images_ide/live_tile/Poseidon-Normal150.png"/>
<meta name="msapplication-wide310x150logo" content="/images_ide/live_tile/Poseidon-Wide310.png"/>
<meta name="msapplication-square310x310logo" content="/images_ide/live_tile/Poseidon-Square310.jpg"/>
-->

<!--	TRIDENT SANDBOX : A 'jsfiddle-like' sandbox for Internet Explorer 10/11

		Developed by user nazoraios on XDA Developers

		This original intent of this is for use on Windows RT tablets, but it can be used on any
		computer running Internet Explorer 10/11.
		
		It makes use of the FILE API which still seems to be somewhat browser specific, so to work 
		on other browsers you might need to change the I/O interface functions to work.  
		
-->

<!-- 
SCRIPT and STYLESHEET includes section
If you want to integrate other third party (or your own) javascript libraries to be
available for use by the sandbox app, add them here.  
-->

<link rel="stylesheet" type="text/css" href="libraries/jquery-ui/jquery-ui-1.10.3.redmond/jquery-ui-1.10.3.custom/css/redmond/jquery-ui-1.10.3.custom.css" />
<script src="libraries/jquery-ui/jquery-ui-1.10.3.redmond/jquery-ui-1.10.3.custom/js/jquery-1.9.1.js"></script>
<script src="libraries/jquery-ui/jquery-ui-1.10.3.redmond/jquery-ui-1.10.3.custom/js/jquery-ui-1.10.3.custom.min.js"></script>
<script src="libraries/alertify.js-0.3.11/lib/alertify.js"></script>
<script src="libraries/cryptojs/components/core.js"></script>
<script src="libraries/cryptojs/rollups/sha1.js"></script>
<script src="libraries/cryptojs/rollups/aes.js"></script>
<script src="libraries/cryptojs/rollups/md5.js"></script>
<script src="libraries/cryptojs/components/enc-base64-min.js"></script>
<script src="libraries/cryptojs/components/enc-utf16-min.js"></script>
<script src="libraries/highcharttable/highcharts.js"></script>
<script src="libraries/highcharttable/jquery.highchartTable.js"></script>
<script src="libraries/localStorageDB/localstoragedb.min.js"></script>
<script src="libraries/jqGrid-4.5.4/js/jquery.jqGrid.min.js"></script>
<script src="libraries/jqGrid-4.5.4/js/i18n/grid.locale-en.js"></script>
<script src="libraries/three.min.js"></script>
<script src="libraries/dynatree/jquery.dynatree.min.js"></script>
<script src="libraries/fullcalendar-1.6.4/fullcalendar/fullcalendar.min.js"></script>
<script src="libraries/jqplot/jquery.jqplot.min.js"></script>
<script src="libraries/jqplot/plugins/jqplot.barRenderer.min.js"></script>
<script src="libraries/jqplot/plugins/jqplot.categoryAxisRenderer.min.js"></script>
<script src="libraries/jqplot/plugins/jqplot.pointLabels.min.js"></script>
<script src="libraries/jqplot/plugins/jqplot.pieRenderer.min.js"></script>
<script src="libraries/jqplot/plugins/jqplot.donutRenderer.min.js"></script>
<script src="libraries/jqplot/plugins/jqplot.canvasTextRenderer.min.js"></script>
<script src="libraries/jqplot/plugins/jqplot.canvasAxisLabelRenderer.min.js"></script>
<script src="libraries/jqplot/plugins/jqplot.dateAxisRenderer.min.js"></script>
<script src="libraries/jqplot/plugins/jqplot.json2.min.js"></script>
<script src="libraries/jqplot/plugins/jqplot.meterGaugeRenderer.min.js"></script>
<script src="libraries/loki-js/lokijs.js"></script>
<script src="libraries/codemirror-4.0/lib/codemirror.js"></script>
<script src="libraries/codemirror-4.0/mode/xml/xml.js"></script>
<script src="libraries/codemirror-4.0/mode/javascript/javascript.js"></script>
<script src="libraries/codemirror-4.0/mode/htmlmixed/htmlmixed.js"></script>
<script src="libraries/codemirror-4.0/addon/display/fullscreen.js"></script>
<script src="libraries/nicEdit/nicEdit.js"></script>
<script src="libraries/prettyprint/prettyprint.js"></script>
<script src="libraries/shortcut.js"></script>
<script src="libraries/MetroJs.Full.0.9.74/MetroJs.js"></script>
<script src="libraries/math.min.js"></script>
<script src="libraries/parsley.js"></script>
<script src="libraries/easeljs/easeljs-0.7.1.min.js"></script>
<script src="libraries/pixi.js/pixi.js"></script>
<script src="libraries/springy/springy.js"></script>
<script src="libraries/springy/springyui.js"></script>
<link rel="stylesheet" href="libraries/MetroJs.Full.0.9.74/MetroJs.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/lib/codemirror.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/addon/display/fullscreen.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/night.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/3024-day.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/3024-night.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/ambiance.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/ambiance-mobile.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/base16-dark.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/base16-light.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/blackboard.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/cobalt.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/eclipse.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/elegant.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/erlang-dark.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/lesser-dark.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/mbo.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/midnight.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/monokai.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/neat.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/night.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/paraiso-dark.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/paraiso-light.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/pastel-on-dark.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/rubyblue.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/solarized.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/the-matrix.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/tomorrow-night-eighties.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/twilight.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/vibrant-ink.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/xq-dark.css">
<link rel="stylesheet" href="libraries/codemirror-4.0/theme/xq-light.css">
<link rel="stylesheet" type="text/css" href="libraries/jqplot/jquery.jqplot.css" />
<link rel="stylesheet" type="text/css" href="libraries/dynatree/skin/ui.dynatree.css" />
<link rel="stylesheet" type="text/css" href="libraries/fullcalendar-1.6.4/fullcalendar/fullcalendar.css" />
<link rel="stylesheet" type="text/css" href="libraries/jqGrid-4.5.4/css/ui.jqgrid.css" />
<link rel="stylesheet" type="text/css" href="libraries/alertify.js-0.3.11/themes/alertify.core.css" />
<link rel="stylesheet" type="text/css" href="libraries/alertify.js-0.3.11/themes/alertify.bootstrap.css" />
<link rel="stylesheet" type="text/css" href="libraries/font-awesome/css/font-awesome.css"/>

<style>
@font-face{
	font-family: "heorot";
	src: url('fonts/heorot.ttf'),
	url('fonts/heorot.ttf');
}
a.TridentLink:link
{
    color: #FFFF99;
    text-decoration: none;
	font-size: 20pt;
}

a.TridentLink:hover
{
    text-decoration: underline;
    color: #fea14b;
	font-size: 20pt;
}

a.TridentLink:visited
{
    color: #FFFF99;
    text-decoration: none;
	font-size: 20pt;
}

img.TridentImageButton:hover
{
	style.opacity:0.6;
}

#sddm
{	margin: 0;
	padding: 0;
	z-index: 30}

#sddm li
{	margin: 0;
	padding: 0;
	list-style: none;
	float: left;
	font: bold 11px arial}

#sddm li a
{	display: block;
	margin: 0 1px 0 0;
	padding: 4px 10px;
	width: 60px;
	background: #5970B2;
	color: #FFF;
	text-align: center;
	text-decoration: none}

#sddm li a:hover
{	background: #49A3FF}

#sddm div
{	position: absolute;
	visibility: hidden;
	margin: 0;
	padding: 0;
	background: #EAEBD8;
	border: 1px solid #5970B2}

	#sddm div a
	{	position: relative;
		display: block;
		margin: 0;
		padding: 5px 10px;
		width: auto;
		white-space: nowrap;
		text-align: left;
		text-decoration: none;
		background: #EAEBD8;
		color: #2875DE;
		font: 11px arial}

	#sddm div a:hover
	{	background: #49A3FF;
		color: #FFF}
		
      input.parsley-success, textarea.parsley-success {
        color: #468847 !important;
        background-color: #DFF0D8 !important;
        border: 1px solid #D6E9C6 !important;
      }
      input.parsley-error, textarea.parsley-error {
        color: #B94A48 !important;
        background-color: #F2DEDE !important;
        border: 1px solid #EED3D7 !important;
      }
      ul.parsley-error-list {
          font-size: 11px;
          margin: 2px;
          list-style-type:none;
      }
      ul.parsley-error-list li {
          line-height: 11px;
      }
</style>

<script>
	var showMarkup = true;
	var showScript = true;
	
	var sb_flashtabtext = false;
	var sb_lastconsolecmd = "";
	
	// Set up pseudo enum to indicate the editor mode
	var EditorModeEnum = Object.freeze({"Markup":1, "Split":2, "Script":3 });
	var editorMode = EditorModeEnum.Split;
	
	// retain global references to codemirror objects set later
	var editorMarkup, editorScript;

//	API VARIABLES 
	var VAR_UserFileValue = "";
	var VAR_TRIDENT_VERSION = 1.71;
	var VAR_TRIDENT_HOSTED = false;
	var VAR_TRIDENT_APPCACHED = false;
	var VAR_TRIDENT_ONLINE = function() { return navigator.onLine; }
	var VAR_TRIDENT_ENV_TYPE = 'STANDALONE'; // Gen S/A Templates should set to STANDALONE
	var VAR_TRIDENT_DB = null;

	$(document).ready(function() {
		alertify.set({ buttonReverse: true });
		$("#UI_TabsOutput").tabs();
		
		shortcut.add("Alt+I", function() { sb_inspect(); } );
		
		// While waiting for user to click the allow scripts button, we hid some ugly UI elements,
		// so now scripts are enabled un-hide the code elements and clear our warning/notice log message.
		$("#divCode").css("display", "block");
		API_ClearLog();
		
		sb_fit_log();
		$(window).resize(function() {
			sb_fit_log();
		});
		
	});
	
// Simple Drop Down Menu support for programs to use
// Copyright 2006-2007 javascript-array.com

	var sb_menu_timeout	= 500;
	var sb_menu_closetimer	= 0;
	var sb_menu_ddmenuitem	= 0;

	// open hidden layer
	function sb_mopen(id) {	
		// cancel close timer
		sb_mcancelclosetime();

		// close old layer
		if(sb_menu_ddmenuitem) sb_menu_ddmenuitem.style.visibility = 'hidden';

		// get new layer and show it
		sb_menu_ddmenuitem = document.getElementById(id);
		sb_menu_ddmenuitem.style.visibility = 'visible';

	}
	// close showed layer
	function sb_mclose() {
		if(sb_menu_ddmenuitem) sb_menu_ddmenuitem.style.visibility = 'hidden';
	}

	// go close timer
	function sb_mclosetime() {
		sb_menu_closetimer = window.setTimeout(sb_mclose, sb_menu_timeout);
	}

	// cancel close timer
	function sb_mcancelclosetime() {
		if(sb_menu_closetimer)
		{
			window.clearTimeout(sb_menu_closetimer);
			sb_menu_closetimer = null;
		}
	}

	// close layer when click-out
	document.onclick = sb_mclose; 

// SANDBOX I/O ROUTINES  
	function sb_loaded(evt) {
		var filestring = evt.target.result;
		
		var sandboxObject = JSON.parse(filestring);
		
		$("#sb_txt_ProgramName").val(sandboxObject.progName);

		editorMarkup.setValue(sandboxObject.htmlText);
		editorScript.setValue(sandboxObject.scriptText);

		// IE's HTML 5 file control seems to place a lock on the last loaded file which
		// was interfering with the saving and overwriting of that same file.
		// So i will reset it by destroying and recreating, allowing the GC to release
		// any old file locks.
		var control = $("#sb_file");
		control.replaceWith( control = control.clone( true ) );
		
	}
	
	function errorHandler(evt) {
		alertify.error('load error');
	}
	
	function sb_load() {
		// use most thorough method for cleaning sandbox
		sb_clean_sandbox();
		
		var file = document.getElementById('sb_file').files[0];
		if(file) {
			var reader = new FileReader();

			reader.readAsText(file, "UTF-8");

			// Handle progress, success, and errors
			//reader.onprogress = updateProgress;
			reader.onload = sb_loaded;
			reader.onerror = errorHandler;
		}
	}
	
	function sb_save() {
		// The File Loaders seem to place a lock on the file so, in the event they are saving to the same filename,
		// lets clear out the old file control so that (if they save to the same filename as they last loaded) it will work.
		// The actual save still waits on user input to handle the save, so no need to setTimeout
		var control = $("#sb_file");
		control.replaceWith( control = control.clone( true ) );
		
		var progNameString = $("#sb_txt_ProgramName").val();
		var htmlTextString = editorMarkup.getValue();
		var scriptTextString = editorScript.getValue();
		
		var sandboxObject = { progName: progNameString, htmlText: htmlTextString, scriptText: scriptTextString };
		
		var json_text = JSON.stringify(sandboxObject, null, 2);
		
		if (typeof Blob == "undefined") {
			alert('no blobs available (incompatible browser?)');
		}
		else {
			var blob1 = new Blob([json_text]);
			window.navigator.msSaveBlob(blob1, progNameString + ".prg");
		}
	}

	function sb_user_hide_load() {
		$("#sb_div_userfile").hide();
	}
	
	// event handler
	function sb_user_file_loaded(evt) {
		var filename = $("#sb_user_file").val().replace(/^.*[\\\/]/, '');

		var filestring = evt.target.result;
	
		// store in global API var in case they haven't set up async callback
		VAR_UserFileValue = filestring;
		
		// IE's HTML 5 file control seems to place a lock on the last loaded file which
		// was interfering with the saving and overwriting of that same file.
		// So I will reset it by destroying and recreating, allowing the GC to release
		// any old file locks.
		var control = $("#sb_user_file");
		control.replaceWith( control = control.clone( true ) );
		
		API_HideUserLoader();
		
		// If user has registered a callback function (for when load is completed), call it
		if (typeof(EVT_UserLoadCallback) == typeof(Function)) {
			// Give time for the file control replace (done above) to complete
			// before giving the user a chance to interfere with that process
			setTimeout(function() {
				EVT_UserLoadCallback(filestring, filename);
			}, 250);
		}
	}
	
	function sb_user_datafile_loaded(evt) {
		var filename = $("#sb_user_datafile").val().replace(/^.*[\\\/]/, '');

		// IE's HTML 5 file control seems to place a lock on the last loaded file which
		// was interfering with the saving and overwriting of that same file.
		// So I will reset it by destroying and recreating, allowing the GC to release
		// any old file locks.
		
		var control = $("#sb_user_datafile");
		control.replaceWith( control = control.clone( true ) );
		
		API_HideUserDataLoader();
		
		// If user has registered a callback function (for when load is completed), call it
		if (typeof(EVT_UserDataLoadCallback) == typeof(Function)) {
			// Give time for the file control replace (done above) to complete
			// before giving the user a chance to interfere with that process
			setTimeout(function() {
				EVT_UserDataLoadCallback(evt.target.result, filename);
			}, 250);
		}
	}
	
	// event handler
	function sb_user_load()	{
		var file = document.getElementById('sb_user_file').files[0];
		if(file) {
			var reader = new FileReader();

			reader.readAsText(file, "UTF-8");

			// Handle progress, success, and errors
			//reader.onprogress = updateProgress;
			reader.onload = sb_user_file_loaded;
			reader.onerror = errorHandler;
		}
	}
	
	function sb_user_dataload() {
		var file = document.getElementById('sb_user_datafile').files[0];
		if(file) {
			var reader = new FileReader();

			reader.readAsDataURL(file, "UTF-8");

			// Handle progress, success, and errors
			//reader.onprogress = updateProgress;
			reader.onload = sb_user_datafile_loaded;
			reader.onerror = errorHandler;
		}
	}
	
	// Clear Environment  
	// Ideally this would clear out the sandbox entirely
	function sb_clean_sandbox()	{
		// clear source code
		editorMarkup.setValue("");
		editorScript.setValue("");
		
		$("#sb_txt_ProgramName").val('New Program');

		// clear out the MainOutput and Log divs and let client do any cleanup if they registered callback
		API_ClearOutput();
	}
	
	function toggleVisibility(id) {
       var e = document.getElementById(id);
       if(e.style.display == 'block')
          e.style.display = 'none';
       else
          e.style.display = 'block';
	}
	
	var hookScripts = function(url, src) {
		var s = document.createElement("script");
		s.type = "text/javascript";
		//s.id = 'scriptDynamic';
		s.src = url || null;
		s.innerHTML = src || null;
		document.getElementsByTagName("head")[0].appendChild(s);
	};
	
	function sb_fit_log() {
		var used = 140;

		$("#UI_TxtLogText").height($(window).height() - used);
	}
	
	function sb_console_eval() {
		sb_lastconsolecmd = $("#UI_TxtLogConsole").val();
		API_LogMessage("=> " + sb_lastconsolecmd);
		try {
			var res = eval(sb_lastconsolecmd);
			
			if (res != null) API_LogMessage("result: " + res);
		}
		catch (err) {
			API_LogMessage("Error : " + err.message);
		}
		
		$("#UI_TxtLogConsole").val("");
	}
	

// API/HELPER ROUTINES 
	// Helper method to support hosted or appcache url params
	function API_GetURLParameter(sParam)
	{
		var sPageURL = window.location.hash.substring(1);
		var sURLVariables = sPageURL.split('&');
		for (var i = 0; i < sURLVariables.length; i++)
		{
			var sParameterName = sURLVariables[i].split('=');
			if (sParameterName[0] == sParam)
			{
				return sParameterName[1];
			}
		}
	}
	
	function API_ClearOutput()
	{
		// allow user to do any cleanup they might want to do
		if (typeof(EVT_CleanSandbox) == typeof(Function)) {
			try {
				EVT_CleanSandbox();
			}
			catch (err) {
			}
		}
	
		// Clear out old file names from file loader
		var control = $("#sb_user_file");
		control.replaceWith( control = control.clone( true ) );
		
		API_SetBackgroundColor("#fff");
		API_HideUserLoader();
		API_ClearLog();
		API_ClearHtmlLog();

		// main includes div with script so hopefully EVT_CleanSandbox has completed
		setTimeout(function() {
			API_ClearMain();
		}, 100);
		
		API_SetActiveTab(0);
	}
	
	function API_LogMain(msg)
	{
		$("#UI_MainPlaceholder").append(msg + "<br/>");
	}
	
	function API_ClearMain()
	{
		$("#UI_MainPlaceholder").empty();
	}
	
	function API_LogHtml(msg)
	{
		$("#UI_HtmlLogPlaceholder").append(msg + "<br/>");
	}
	
	function API_ClearHtmlLog()
	{
		$("#UI_HtmlLogPlaceholder").empty();
	}
	
	function API_LogMessage(msg)
	{
		$("#UI_TxtLogText").val($("#UI_TxtLogText").val() + msg + "\r\n");
		
		// Using flag variable to prevent multiple consecutive logmessage calls from overloading the flash effect
		// Will only flash once every 4 seconds
		if (!sb_flashtabtext) {
			sb_flashtabtext = true;

			// not sure if there is a more elegant jquery selector but this will flash the text log tab header to indicate activity on that tab
			$($($("#UI_TabsOutput").find("ul")[0]).find("li")[2]).find("a").effect("pulsate", {}, 1000);
			
			setTimeout(function() { sb_flashtabtext = false; }, 4000);
		}
	}
	
	function API_LogObject(objToLog, objName)
	{
		if (objName != null && (typeof(objName) == "string"))
			API_LogMessage(objName + " = ");
		
		API_LogMessage(JSON.stringify(objToLog, null, '\t'));
	}
	
	function API_ClearLog()
	{
		$("#UI_TxtLogText").val("");
	}
	
	function API_SetActiveTab(tabId)
	{
		$( "#UI_TabsOutput" ).tabs( "option", "active", tabId );	
	}
	
	// Make Developer area fullscreen (Editors, output, and run bar)
	function API_MetalFullscreen()
	{
		sb_div_metalFullscreen.msRequestFullscreen();
	}
	
	function API_UserFullscreen()
	{
		UI_TabsOutput.msRequestFullscreen();
	}
	
	function API_UserFullscreenExit()
	{
		document.msExitFullscreen();
	}
	
	function API_UserFullToggle()
	{
		var inFullScreenMode = document.fullscreenElement || 
		document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;

		if (inFullScreenMode) {
			if (document.exitFullscreen) { document.exitFullscreen(); } 
			else if (document.msExitFullscreen) { document.msExitFullscreen(); } 
			else if (document.mozCancelFullScreen) { document.mozCancelFullScreen(); } 
			else if (document.webkitExitFullscreen) { document.webkitExitFullscreen(); }
		} 
		else {
			var docElm = document.documentElement;
			if (docElm.requestFullscreen) {
				docElm.requestFullscreen();
			} else if (docElm.msRequestFullscreen) {
				docElm.msRequestFullscreen();
			} else if (docElm.mozRequestFullScreen) {
				docElm.mozRequestFullScreen();
			} 
		}    
	}
	
	function API_PlaySound(soundFilename) {
		var aud = new Audio();
		aud.src = 'sounds/' + soundFilename;
		aud.play();
	}
	
	function API_PlaySoundURI(soundURI) {
		var aud = new Audio();
		aud.src = soundURI;
		aud.play();
	}
	
	// Display the User Area file loader
	function API_ShowLoad() {
		$("#sb_div_userfile").show();
	}
	
	function API_ShowDataLoad() {
		$("#sb_div_userdatafile").show();
	}
	
	function API_HideUserLoader()
	{
		$('#sb_div_userfile').hide();   // hide user file picker if visible
	}
	
	function API_HideUserDataLoader()
	{
		$("#sb_div_userdatafile").hide();
	}
	
	// Handling Blobs is very browser specific 
	// As such this seems to work on IE 11
	function API_DataUrlToBlob(dataURL) {
		// convert base64 to raw binary data held in a string
		var byteString = atob(dataURL.split(',')[1]);
 
		// separate out the mime component
		var mimeString = dataURL.split(',')[0].split(':')[1].split(';')[0];
 
		// write the bytes of the string to an ArrayBuffer
		var arrayBuffer = new ArrayBuffer(byteString.length);
		//var _ia = new Uint8Array(arrayBuffer);
		var _ia = new Int8Array(arrayBuffer);
		for (var i = 0; i < byteString.length; i++) {
			_ia[i] = byteString.charCodeAt(i) & 0xff;
		}

		//var dataView = new DataView(arrayBuffer);
		//var blobResult = new Blob([dataView], { type: mimeString });
		var blobResult = new Blob([_ia], { type: mimeString });
		return blobResult;
	}

	// Pass in a filename and some text to save and this will 'serve' up that text as a download
	function API_SaveTextFile(fileName, saveString)
	{
		// The File Loaders seem to place a lock on the file so, in the event they are saving to the same filename,
		// lets clear out the old file control so that (if they save to the same filename as they last loaded) it will work.
		var control = $("#sb_user_file");
		control.replaceWith( control = control.clone( true ) );
		
		if (typeof Blob == "undefined") {
			alert('no blobs available (incompatible browser?)');
		}
		else {
			var blob1 = new Blob([saveString]);
			window.navigator.msSaveBlob(blob1, fileName);
		}
	}
	
	// API_SaveDataURL will take a dataURL string (representing a binary object), 
	// and save it as a binary file
	function API_SaveDataURL(fileName, dataURL) {
		var fileBlob = API_DataUrlToBlob(dataURL);
		window.navigator.msSaveBlob(fileBlob, fileName);
	}
	
	// Pass in a filename and some text to save and this will 'serve' up that text as a download
	function API_SaveOrOpenTextFile(fileName, saveString)
	{
		// The File Loaders seem to place a lock on the file so, in the event they are saving to the same filename,
		// lets clear out the old file control so that (if they save to the same filename as they last loaded) it will work.
		var control = $("#sb_user_file");
		control.replaceWith( control = control.clone( true ) );
		
		if (typeof Blob == "undefined") {
			alert('no blobs available (incompatible browser?)');
		}
		else {
			var blob1 = new Blob([saveString]);
			window.navigator.msSaveOrOpenBlob(blob1, fileName);
		}
	}
	
	function API_RestoreLayout() {
		API_UserFullscreenExit();
		API_SetToolbarMode(true, true, true);
		API_SetWindowMode(2);
	}
	
	function API_SetBackgroundColor(colorCode)
	{
		$("#UI_Tab_Main").css("background-color", colorCode);
		$("#UI_MainPlaceholder").css("background-color", colorCode);
	}
	
	function API_Inspect(objVar)
	{
		var tbl = prettyPrint( objVar, { /* options such as maxDepth, etc. */ });
		$(tbl).dialog({ title: 'Trident Object/Variable Inspector', width: 'auto', maxHeight: ($(window).height() - 50) });
	}
	
	function sb_inspect()
	{
		var strSelection;
		var scriptSelection = editorScript.getSelection();
		var markupSelection = editorMarkup.getSelection();
		
		if (scriptSelection != "" && markupSelection != "") alertify.error("Ambiguous selection; Highlighted code exists in both editors; using Script selection", "", 0);
		
		if (scriptSelection == "" && markupSelection == "") {
				alertify.alert("This feature requires you to select a variable or object in the script editor before clicking 'Inspect'.");
				return;
		}
		
		if (scriptSelection != "") strSelection = scriptSelection;
		else strSelection = markupSelection;
		
		var objResult;
		try {
			objResult = eval(strSelection);
		}
		catch (exc) {
			alertify.error("malformed inspection selection");
			return;
		}

		var tbl = prettyPrint( objResult, { /* options such as maxDepth, etc. */ });
		$(tbl).dialog({ title: 'Trident Object/Variable Inspector', width: 'auto', maxHeight: ($(window).height() - 50) });
	}
// END API/HELPER ROUTINES

</script>
</head>
<body bgcolor="#1F96CF">

<table style="width: 100%; table-layout:fixed">
<tr>
<td id="tdOutput" valign='top' style="padding: 2px">
	<div id="UI_TabsOutput">
		<ul>
			<li><a href="#UI_Tab_Main">Main Output</a></li>
			<li><a href="#UI_Tab_Html">Log (HTML)</a></li>
			<li><a href="#UI_Tab_Text">Log (Text)</a></li>
		</ul>
		<div id="UI_Tab_Main">
			<div id='sb_div_userfile' style="display:none">
				<input style='height:30px;width:400px;' id='sb_user_file' type="file" name="userfileloader" onchange="sb_user_load()" />
				<button id="sb_btn_user_file_cancel" onclick="$('#sb_div_userfile').hide()">Cancel</button>&nbsp;&nbsp;[Text]
			</div>
			<div id='sb_div_userdatafile' style="display:none; background-color:#cdc">
				<input style='height:30px;width:400px;' id='sb_user_datafile' type="file" name="userdatafileloader" onchange="sb_user_dataload()" />
				<button id="sb_btn_user_datafile_cancel" onclick="$('#sb_div_userdatafile').hide()">Cancel</button>&nbsp;&nbsp;[Binary]
			</div>
			<div id='UI_MainPlaceholder' style='background-color:white'>
				@TRIDENT_HTML@
				<SCRIPT>
				@TRIDENT_SCRIPT@
				</SCRIPT>
			</div>
		</div>
		<div id="UI_Tab_Html">
			<div id='UI_HtmlLogPlaceholder' style='background-color:white'><br/><br/></div>
		</div>
		<div id="UI_Tab_Text" style="background-color:#555">
			<div id='sb_div_LogPlaceholder' style='background-color:#555;'>
				<textarea id="UI_TxtLogText" rows='30' style="font-family: Lucida Console; height:100; width:100%; background-color:#333; color:#ccc">You need to allow blocked content for Trident Sandbox to initialize.</textarea><br/>
				<input type='text' id='UI_TxtLogConsole' style="width:100%;height:30px; background-color:#333; color:#ccc" onKeyDown="{ if (event.keyCode==38) $('#UI_TxtLogConsole').val(sb_lastconsolecmd) }" onKeyPress="{ if (event.keyCode==13) sb_console_eval() }"/>
			</div>
		</div>
	</div>
</td>
</tr>
</table>
</div>
</body>
</html>


