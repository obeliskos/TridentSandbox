<!DOCTYPE html>
<html>
<head>
<title>Markup and Script Units</title>
<link rel="stylesheet" type="text/css" href="docs.css" />
</head>
<body>
    Topics : [ <a href="Welcome.htm">Welcome</a> ] [ <a href="ApiReference.htm">API Reference</a> ] [ <a href="DesignGuide.htm">Design Guide</a> ] [ <a href="GenerateStandalone.htm">Generating Standalone Page</a> ] [ <a href="HostingAndAppCache.htm">Hosting and AppCache</a> ] [ Markup and Script Units ]
    <h2>Markup and Script Units</h2>

    <h3>Overview</h3>
    <p>
        When running in a hosted or appcached environment you are limited as to how to modularize your code.&nbsp;&nbsp;Running off of the local filesystem, you can edit the TridentSandbox main page to add new
        script references and you can edit the filesystem to add your own .js files to the library.&nbsp;&nbsp;When running in appcache mode, you cannot do this... you cannot alter the underlying webpages or file structure.&nbsp;&nbsp;
        In an effort to add back some level of modularization and expandibility, TridentSandbox now supports saving Markup or Script as a named 'Unit' to the Trident Database which can be called up / loaded dynamically
        within your programs.&nbsp;&nbsp;You can use this new unit library interface to import a
        simple third party javascript library, your own javascript library functions, or re-usable HTML fragments you might use within other applications or to
        easily swap in and out of the HTML Log Tab dynamically.
    </p>

    <h3>Capability and Portability</h3>
    <p>
        This entire Unit library mechanism are intended to maximize the capability of a Trident Sandbox scripting environment.&nbsp;&nbsp;
        The use of Unit libraries add requirements to the programs you write which use them.  If you attempt to run your program on a different Trident Sandbox
        installation, you need to make sure those units are carried over as well.  For now, you might use the Backup and Restore functionality in the Storage Dashboard
        to create backup 'packages' to import on another machine.  Otherwise you can manually create the dependent script unit with the Library Unit Management utility.
    </p>

    <h3>Library Unit Management Utility</h3>
    <p>
        For now, I decided not wish to clutter up the user interface with this added complexity, and i placed this in Samples/Utilities/Library Unit Management.&nbsp; From here you can create all of your script and html units.&nbsp;
        After importing your script and/or markup units, you can use the <b>sandbox.units.importScriptUnit("script name")</b> to import them in your program startup.
        You can also create a script unit with the name <b>autorun</b> and it will execute immediately upon Trident Sandbox page load (unless a <b>SkipAutorun</b> hash param is added.&nbsp; From an autorun script
        you can initialize the environment by loading other script units via the sandbox.units.importScriptUnit("script name") method, or perhaps add your own api functions or change the main page layout, etc.&nbsp;
        SandboxLoader.htm will also run your autorun script unit (unless you add the SkipAutorun hash param).&nbsp; If you rely on autorun script to load your script dependencies, you may want to delay your program initialization to allow 
        the script time to register when run in a sandbox loader page.  Depending on script unit size, you might delay 500ms or even 1000 or 2000 for large scripts.
    </p>

    <h3>Trident Files</h3>
    <p>
        When dealing with third party libraries, you might prefer to just import the whole file as a complete file which you pick from your hard drive.  Many libraries which 
        are just a single javascript file would work well with this approach.  Using this approach, you can utilize the sample utility 'Trident Files Database' to pick a file from 
        your hard drive to import into the Trident Database as a data uri.  Within your program startup, you can then utilize the sandbox.units.importScriptFile(tridentFilename) method to 
        register the script source to that datauri, forcing the browser to load it.  You can use the Trident Files Database sample to manage or update it in the future or you can use 
        the Storage Summary dashboard to delete, backup, or restore it since it is just another key in the trident database.
    </p>

    <h3>Console Command Interface</h3>
    <p>
        There are a series of lower level API commands added to support library unit management, that may be more useful if you use this feature alot.&nbsp; Primarily they allow using loading into (and saving from) the syntax
        highlighting editors.&nbsp;
    </p>

    <p>
        Example : You press 'New' to create a blank program, write some Markup into the Markup edit control, and then go to the Text Log console and type
        sandbox.units.saveMarkupUnit('MyFirstMarkupUnit') and hit enter and Trident Sandbox will save your markup 'unit' to the TridentDB.&nbsp;&nbsp;Other functions exist to recall that unit as a string which you
        might then insert into a div as sort of a user control.&nbsp;&nbsp;Similar functionality exists for scripts except scripts can also be 'imported' which will append it to a new hidden div specifically designed
        to hold script 'units'.&nbsp;&nbsp;If you use this import function then your scripts will be put into this place that trident sandbox knows how to clean out later.
    </p>

    <p>These are the functions added to support Unit library management :</p>
    <ul>
        <li>(Console) sandbox.units.logMarkupUnits()</li>
        <li>(Console) sandbox.units.saveMarkupUnit(unitName)</li>
        <li>(Console) sandbox.units.loadMarkupUnit(unitName)</li>
        <li>(Program) sandbox.units.getMarkupUnit(unitName, callback)</li>
        <li>(Console) sandbox.units.logScriptUnits()</li>
        <li>(Console) sandbox.units.saveScriptUnit(unitName)</li>
        <li>(Console) sandbox.units.loadScriptUnit(unitName)</li>
        <li>(Program) sandbox.units.importScriptUnit(unitName)</li>
        <li>(Program) sandbox.units.importScriptFile(tridentFilename)</li>
    </ul>

    <h3>Backing up and Restoring the Trident Database</h3>
    <p>
        While not limited to just the Markup and Script Unit libraries, new Console API functions (and now dashboard tabs) have been added to let you back up and restore the entire Trident Database.  This indexed db app/key/value
        database is used to store Trident Save slots, Markup and Script Unit libraries described above, as well as any app/key/values you may have stored for your own apps.
    </p>
    <p>
        At the console, you can type sandbox.files.exportDatabaseKeys("TDB-040514.backup") or just omit the filename for a default filename and a download prompt will appear for you to save this file to
        your hard disk.  At a later point in time (perhaps an upgrade or to duplicate onto another machine), you can go import that backup in the storage summary dashboard's db restore tab.  Upon selecting the file, it will display all the entries into your backup
        and you can pick the keys (or all of them) to import.  As with any Trident DB insert, if a object already exists with that app/key combination, it will overwrite it.  Users with no indexed db or service adapter configured (maybe when running page off a filesystem) will default to an
        in-memory database adapter and can use this to set up complicated database 'states' which can be persisted as a single entity.
    </p>
    <p></p>
</body>
</html>