{
  "progName": "Antikythera-WJS",
  "htmlText": "<style>\nselect.unitlist  {\n\twidth:100%;\n    font-size:20px;\n}\n\nfieldset { \n\tpadding: 1em;\n    font:80%/1 sans-serif;\n\tborder:1px solid white; \n}\nlabel.lb4 {\n\tfloat:left;\n    width:25%;\n    margin-right:0.5em;\n    padding-top:0.2em;\n    text-align:right;\n    font-weight:bold;\n}\n\nlegend {\n    padding: 0.2em 0.5em;\n    border:1px solid white;\n    color:white;\n    font-size:90%;\n    text-align:right;\n}\n\n</style>\n<style>\n.fullScreen {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n\n/*width of each section*/\n.section1.win-hub-section {\n    width: 700px;\n    overflow: hidden;\n}\n\n.section2.win-hub-section {\n    width: 600px; \n}\n\n.section3.win-hub-section {\n    width: 1200px;\n}\n\n.section4.win-hub-section {\n    width: 630px;\n}\n\n/*Images in a FlexBox*/\n.imagesFlexBox {\n    display: flex;\n    flex-flow: row wrap;\n    flex-direction: column;\n    width: calc(100% + 10px);\n    height: 100%;\n    overflow: hidden;\n    margin-left: -5px;\n    margin-right: -5px;\n}\n\n    .imagesFlexBox .imageItem {\n        margin: 5px;\n    }\n\n#insertListView {\n    height: 100%;\n}\n\n.horizontallistview {\n    height: 100%;\n}\n\n/*ListView style inside section container*/\n#listView.win-listview {\n    height: calc(100% - 150px);\n    width: 100%;\n}\n\n\n#listView.win-listview .win-container {\n    width: 242px;\n    height: 60px;\n}\n\n/* Template for the items in the ListViews in this sample */\n.smallListIconTextItem {\n    width: 242px;\n    height: 60px;\n    background-color: lightgray;\n}\n\n    .smallListIconTextItem img.smallListIconTextItem-Image {\n        float:left;\n        width: 80px;\n        height: 60px;\n        margin-right:10px;\n    }\n\n    .smallListIconTextItem .smallListIconTextItem-Detail {\n        margin: 5px;\n        text-overflow: ellipsis;\n        overflow: hidden;\n        color:black;\n    }\n\n/*styles for video in section 3*/\n.promoVideo {\n    height: 330px;\n    width: 400px;\n}\n\n/*Two column container for section4*/\n.twoColumnFormContainer {\n    display: -ms-grid;\n    -ms-grid-columns: 50% 50%;\n    min-width: 640px;\n    max-width: 740px;\n}\n\n    .twoColumnFormContainer .inputText {\n        -ms-grid-row: 1;\n        -ms-grid-column: 1;\n    }\n\n    .twoColumnFormContainer .inputPass {\n        -ms-grid-row: 1;\n        -ms-grid-column: 2;\n    }\n\n    .twoColumnFormContainer .inputEmail {\n        -ms-grid-row: 2;\n        -ms-grid-column: 1;\n    }\n\n    .twoColumnFormContainer .inputPhone {\n        -ms-grid-row: 2;\n        -ms-grid-column: 2;\n    }\n\n    .twoColumnFormContainer .inputCity {\n        -ms-grid-row: 3;\n        -ms-grid-column: 1;\n    }\n\n    .twoColumnFormContainer .inputState {\n        -ms-grid-row: 3;\n        -ms-grid-column: 2;\n    }\n\n/*App Header Styles*/\n#appHeader {\n    position: absolute;\n    z-index: 1;\n    top: 10px;\n    left: 40px;\n}\n\n    #appHeader .win-navigation-backbutton {\n        margin-right: 20px;\n    }\n\n    #appHeader h1 {\n        display: inline;\n    }\n\n/*styles when app is in the portrait mode*/\n@media all and (min-height: 1280px) {\n    .section2.win-hub-section {\n        width: 292px;\n        overflow: hidden;\n    }\n\n    /*change the width of the form control to cover only one input box*/\n    .section4.win-hub-section {\n        width: 300px;\n    }\n\n    /*layout form controls vertically*/\n    /*Two column container for section3*/\n    .twoColumnFormContainer {\n        display: -ms-grid;\n        -ms-grid-columns: 50% 50%;\n        min-width: 290px;\n        max-width: 300px;\n    }\n\n        .twoColumnFormContainer .inputText {\n            -ms-grid-row: 1;\n            -ms-grid-column: 1;\n        }\n\n        .twoColumnFormContainer .inputPass {\n            -ms-grid-row: 2;\n            -ms-grid-column: 1;\n        }\n\n        .twoColumnFormContainer .inputEmail {\n            -ms-grid-row: 3;\n            -ms-grid-column: 1;\n        }\n\n        .twoColumnFormContainer .inputPhone {\n            -ms-grid-row: 4;\n            -ms-grid-column: 1;\n        }\n\n        .twoColumnFormContainer .inputCity {\n            -ms-grid-row: 5;\n            -ms-grid-column: 1;\n        }\n\n        .twoColumnFormContainer .inputState {\n            -ms-grid-row: 6;\n            -ms-grid-column: 1;\n        }\n}\n\n/*styles for larger screens*/\n@media (min-width: 1920px) {\n    .section2.win-hub-section {\n        width: 292px;\n        overflow: hidden;\n    }\n\n    /*change the width of the form control to cover only one input box*/\n    .section4.win-hub-section {\n        width: 300px;\n    }\n\n    /*layout form controls vertically*/\n    /*Two column container for section3*/\n    .twoColumnFormContainer {\n        display: -ms-grid;\n        -ms-grid-columns: 50% 50%;\n        min-width: 290px;\n        max-width: 300px;\n    }\n\n        .twoColumnFormContainer .inputText {\n            -ms-grid-row: 1;\n            -ms-grid-column: 1;\n        }\n\n        .twoColumnFormContainer .inputPass {\n            -ms-grid-row: 2;\n            -ms-grid-column: 1;\n        }\n\n        .twoColumnFormContainer .inputEmail {\n            -ms-grid-row: 3;\n            -ms-grid-column: 1;\n        }\n\n        .twoColumnFormContainer .inputPhone {\n            -ms-grid-row: 4;\n            -ms-grid-column: 1;\n        }\n\n        .twoColumnFormContainer .inputCity {\n            -ms-grid-row: 5;\n            -ms-grid-column: 1;\n        }\n\n        .twoColumnFormContainer .inputState {\n            -ms-grid-row: 6;\n            -ms-grid-column: 1;\n        }\n}\n\n</style>\n\n\n<div id=\"divMainFS\" class=\"fullScreen\" style=\"display:none\">\n\n    <!-- app header and backbutton-->\n    <div id=\"appHeader\">\n        <button data-win-control=\"WinJS.UI.BackButton\"></button>\n        <h2>Antikythera</h2>\n    </div>\n\n    <div class=\"box\">\n\n        <div id=\"dialogElement\" data-win-control=\"WinJS.UI.ContentDialog\" data-win-options=\"{\n                 title: 'Configure Date',\n                 primaryCommandText: 'Update',\n             \tsecondaryCommandText: 'Cancel'\n            }\">\n            <div id=\"divTaskEdit\">\n                <input id=\"hfTaskId\" type=\"hidden\" />\n                <table>\n                  <tr>\n                    <td><label>Task Complete : </label></td>\n                    <td><input id=\"chkTaskDone\" type=\"checkbox\"/></td>\n                  </tr>\n                  <tr>\n                    <td><label>Task Date :</label></td>\n                    <td><input type=\"text\" id=\"txtTaskDate\" style=\"background-color:#444; color:white; width:240px\"/></td>\n                  </tr>\n                  <tr>\n                    <td><label>Task Name : </label></td>\n                    <td><input type=\"text\" id=\"txtTaskName\" style=\"background-color:#444; color:white; width:240px\"/></td>\n                  </tr>\n                  <tr>\n                    <td><label>Task Description : </label></td>\n                    <td><textarea id=\"txtTaskDescription\" spellcheck='false' rows=\"5\" cols=\"25\" style=\"background-color:#444; color:white;\"></textarea></td>\n                  </tr>\n                  <tr>\n                    <td><label>Repeat Every :</label></td>\n                    <td>\n                      <input type=\"text\" id=\"txtRecurInterval\" style=\"background-color:#444; color:white; width:50px\"/>\n                      <select id=\"selRecurPattern\" style=\"background-color:#444; color:white\">\n                        <option value=\"0\">None</option>\n                        <option value=\"1\">Days</option>\n                        <option value=\"2\">Weeks</option>\n                        <option value=\"3\">Months</option>\n                        <option value=\"4\">Years</option>\n                      </select>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td><label>Until :</label></td>\n                    <td>\n                      <input type=\"text\" id=\"txtRecurUntil\" style=\"background-color:#444; color:white; width:100px\"/>\n                      <label>&nbsp; (or leave blank)</label>\n                    </td>\n                  </tr>\n                </table>\n            </div>\n        </div>\n    </div>\n\n    <!-- Hub Control -->\n    <div data-win-control=\"WinJS.UI.Hub\">\n        <div class=\"section1\" data-win-control=\"WinJS.UI.HubSection\" data-win-options=\"{header: 'Days Until / Days Since', isHeaderStatic: true}\">\n                <div id=\"divTiles\"></div>\n        </div>\n        <div class=\"section1\" data-win-control=\"WinJS.UI.HubSection\" data-win-options=\"{header: 'TaskList Summary', isHeaderStatic: true}\">\n                <input class=\"vpatel\" type=\"radio\" id=\"radio1\" name=\"radios\" value=\"all\" onclick=\"refreshTasks('Two Month')\" checked='checked'>\n                <label for=\"radio1\">Two Month &plusmn;</label>\n                <input class=\"vpatel\" type=\"radio\" id=\"radio3\" name=\"radios\" value=\"true\" onclick=\"refreshTasks('Upcoming')\">\n                <label for=\"radio3\">Upcoming</label>\n                <input class=\"vpatel\" type=\"radio\" id=\"radio4\" name=\"radios\" value=\"true\" onclick=\"refreshTasks('Previous')\">\n                <label for=\"radio4\">Previous</label>\n\n                <ul id=\"taskListView\" class=\"tlist\" style=\"height:400px\"></ul><br/>\n\n                <button class=\"minimal\" onclick=\"refreshTasks()\">Refresh</button>\n        </div>\n        <div class=\"section1\" data-win-control=\"WinJS.UI.HubSection\" data-win-options=\"{header: 'Configure Dates', isHeaderStatic: true}\">\n            <ul id=\"editListView\" class=\"tlist\" style=\"height:400px\"></ul><br/>\n            <button class=\"minimal\" onclick=\"addTask()\"><i class=\"fa fa-plus\"></i> Add</button>&nbsp;\n            <button class=\"minimal\" onclick=\"editTask()\"><i class=\"fa fa-pencil-square-o\"></i> Edit</button>&nbsp;\n            <button class=\"minimal\" onclick=\"deleteTask()\"><i class=\"fa fa-trash-o\"></i> Delete</button>&nbsp;\n            <br/><br/>\n        </div>\n        <div class=\"section1\" data-win-control=\"WinJS.UI.HubSection\" data-win-options=\"{header: 'About', isHeaderStatic: true}\">\n            <h3>About Antikythera</h3>\n\n            <p>Antikythera is a 'Days Since / Days Until' program which allows you to enter tasks to be reminded of.&nbsp; The program \n            will synchronize them and report on how long ago or soon they will occur in the future.\n            </p>\n            <p>\n            The Summary Page consists of a Metro.JS Live Tile view as well as a Trident list for viewing raw data on projections.\n            The live tiles show future tasks up to a year and past tasks up to a month.  For any given \n            recurring task, only the next (future) occurence is shown.  Tasks designated as 'done' do not appear.\n            </p>\n        </div>\n        \n\t</div>\n</div>",
  "scriptText": "var sbv = {\n    db: new loki('Tasks'),\n    taskList: null,\n\n    taskLV: null,\n    editLV: null,\n\n    RecurModeEnum:  Object.freeze({\"None\":0, \"Days\":1, \"Weeks\":2, \"Months\":3, \"Years\":4 })\n\n};\n\nsandbox.events.clean = function() {\n    $(\".live-tile, .flip-list\").not(\".exclude\").liveTile('stop');\n    delete sbv.taskList;\n    delete sbv.db;\n    delete sbv.taskLV;\n    delete sbv.RecurModeEnum;\n};\n\nsandbox.events.windowResize = function() {\n\n    switch (sandbox.volatile.env) {\n        case \"IDE\" : alertify.error(\"This sample needs winjs version\"); break;\n        case \"IDE WJS\" : $(\"#UI_MainPlaceholder\").css(\"height\", $(window).height() - 280); break;\n        default : break;\n    }\n};\n\nsandbox.events.windowResize();\n\nfunction showDiv(divIndex) {\n    $(\"#divSummary\").hide();\n    $(\"#divConfig\").hide();\n    $(\"#divAbout\").hide();\n\n    switch(divIndex) {\n        case 1: $(\"#divSummary\").show(); break;\n        case 2: $(\"#divConfig\").show(); break;\n        case 3: $(\"#divAbout\").show(); break;\n    }\n}\n\nfunction dbInit() {\n\n    sbv.taskLV = new TridentList(\"taskListView\", taskSelected);\n    sbv.editLV = new TridentList(\"editListView\", taskSelected);\n    sbv.editLV.makeBright();\n\n    sbv.taskList = sbv.db.addCollection('tasks');\n\n    if (sandbox.db) {\n\n        sandbox.db.getAppKey('Antikythera', 'TaskList', function(result) {\n            if (result == null || result.id === 0) return;\n\n            sbv.db.loadJSON(result.val);\n\n            // we rehydrated loki db object and collections but old collection references still\n            // point to old db object. \n            sbv.taskList = sbv.db.getCollection(\"tasks\");\n\n            refreshTasks('Two Month');\n        });\n    }\n    else {\n        alertify.log(\"Trident Database is not available.\");\n    }\n\n\n}\n\nfunction dbSave() {\n    if(sandbox.db) {\n\n        sandbox.db.setAppKey('Antikythera', 'TaskList', JSON.stringify(sbv.db), function(result) {\n            if (result) alertify.log('Antikythera database saved to Trident Database');\n            else alertify.error('Unable to save record');\n        });\n    }\n    else {\n        alertify.log(\"Trident Database is not available.\");\n    }\n}\n\nfunction taskSelected(sender, key) {\n    $('#divTaskEdit').hide();    \n}\n\nfunction getTasks() {\n    var arrCopy = sbv.taskList.data.slice(0);\n\n    var sorted = arrCopy.sort(function (x, y) { \n        if (moment(x.taskDate) < moment(y.taskDate)) return 1;\n        if (moment(x.taskDate) > moment(y.taskDate)) return -1;\n        return 0;\n    });\n\n    return sorted;\n}\n\nfunction sortTasks(mode) {\n    // clone array so sorting occurs in copy\n    var arrCopy = sbv.taskList.data.slice(0);\n\n    if (mode == 'Upcoming') {\n        //arrCopy = arrCopy.filter(function(x) { return (moment(x.taskDate) >= moment().startOf('day')) });\n        arrCopy = projectTasks(moment().startOf('day'), moment().add('years', 1));\n\n        var sorted = arrCopy.sort(function (x, y) { \n            if (moment(x.taskDate) > moment(y.taskDate)) return 1;\n            if (moment(x.taskDate) < moment(y.taskDate)) return -1;\n            return 0;\n        });\n\n        return sorted;\n    }\n\n    if (mode == 'Two Month') {\n        arrCopy = projectTasks(null, null);\n\n        var sorted = arrCopy.sort(function (x, y) { \n            if (moment(x.taskDate) < moment(y.taskDate)) return 1;\n            if (moment(x.taskDate) > moment(y.taskDate)) return -1;\n            return 0;\n        });\n\n        return sorted;\n    }\n\n    if (mode == 'Tiles') {\n        var start = moment().startOf('day').subtract('month', 1);\n        var end = moment().startOf('day').add('years', 1);\n        arrCopy = projectTasks(start, end, true);\n\n        var sorted = arrCopy.sort(function (x, y) { \n            if (moment(x.taskDate) < moment(y.taskDate)) return 1;\n            if (moment(x.taskDate) > moment(y.taskDate)) return -1;\n            return 0;\n        });\n\n        return sorted;\n    }\n\n    if (mode == 'All') {\n        var sorted = arrCopy.sort(function (x, y) { \n            if (moment(x.taskDate) < moment(y.taskDate)) return 1;\n            if (moment(x.taskDate) > moment(y.taskDate)) return -1;\n            return 0;\n        });\n\n        return sorted;\n    }\n\n    if (mode == 'Previous') {\n        arrCopy = arrCopy.filter(function(x) { return (moment(x.taskDate) < moment());});\n\n        var sorted = arrCopy.sort(function (x, y) { \n            if (moment(x.taskDate) < moment(y.taskDate)) return 1;\n            if (moment(x.taskDate) > moment(y.taskDate)) return -1;\n            return 0;\n        });\n\n        return sorted;\n    }\n\n}\n\nfunction copyTask(task) {\n    var copy = { \n        taskName: task.taskName, \n        taskDesc: task.taskDesc, \n        taskDate: Date.parse(taskDate),\n        taskDone: taskDone,\n        recurPattern: recurPattern, \n        recurInterval: recurInterval,\n        recurUntil: recurUntil,\n        category: null,\n        color: null,\n        priority: null\n    };\n}\n\nfunction projectTasks(startDate, endDate, firstOccurrenceOnly) \n{\n    var arrCopy = sbv.taskList.data.slice(0);\n    arrCopy = arrCopy.filter(function(x) { return (!x.taskDone); });\n\n    var result = [];\n\n    firstOccurrenceOnly = (typeof firstOccurrenceOnly == 'undefined' ? false : firstOccurrenceOnly);\n\n    if (startDate == null) startDate = moment().startOf('day').subtract('months', 2);\n    if (endDate == null) endDate = moment().startOf('day').add('months', 2);\n\n    // for each recurring task, project\n    for(idx=0; idx < arrCopy.length; idx++) {\n        var task = arrCopy[idx];\n\n        if (task.recurPattern === 0) {\n            if (moment(task.taskDate) >= startDate && moment(task.taskDate) <= endDate) result.push(task);\n        }\n        else {\n            var arrDates = [ ];\n            var fif = false;  // first occurrence found flag\n\n            var runDate = moment(task.taskDate);\n            while (runDate <= endDate && !fif) {\n                if (runDate > startDate) {\n                    var newTask = jQuery.extend({}, task); // Shallow copy\n                    newTask.taskDate = runDate;\n                    newTask.nonPersistent = (runDate > moment(task.taskDate));\t// 'projected' designation\n\n                    if (firstOccurrenceOnly && (runDate > moment())) fif = true; \n\n                    result.push(newTask);\n                }\n\n                // Progress date\n                switch (task.recurPattern) {\n                    case 0 : runDate = endDate; break; // bad task has no interval so terminate\n                    case 1 : runDate = moment(runDate).add('days', task.recurInterval).toDate(); break; // days\n                    case 2 : runDate = moment(runDate).add('weeks', task.recurInterval).toDate(); break; // weeks\n                    case 3 : runDate = moment(runDate).add('months', task.recurInterval).toDate(); break; // months\n                    case 4 : runDate = moment(runDate).add('years', task.recurInterval).toDate(); break; // years\n                }\n            }\n        }\n    }\n\n    return result;\n}\n\nfunction generateTiles(tasks) {\n    $(\".live-tile, .flip-list\").not(\".exclude\").liveTile('stop');\n    $(\"#divTiles\").empty();\n\n    for(idx=0; idx < tasks.length; idx++) {\n        var delay = Math.floor(Math.random() * 800) + 5200;\n        var delta = moment(tasks[idx].taskDate).diff(moment().startOf('day'), 'days');\n        var color = \"red\";\n\n        if (delta < 15 && delta > -15) {\n            color = \"red\";\n        }\n        else {\n            if (delta < 30 && delta > -30) {\n                color = \"mango\";\n            }\n            else {\n                if (delta < 60 && delta > -60) {\n                    color = \"green\";\n                }\n                else {\n                    color = \"blue\";\n                }\n            }\n        }\n\n        var listitemDiv = document.createElement(\"div\");\n        listitemDiv.className = color + \" live-tile\";\n        $(listitemDiv).attr(\"data-mode\", \"carousel\"); // flip, carousel, flip-list\n        $(listitemDiv).attr(\"data-delay\", delay.toString());\n\n        var t1 = document.createElement(\"div\");\n\n        var numberDiv = document.createElement(\"div\");\n        $(numberDiv).css(\"height\", \"110px\");\n        $(numberDiv).css(\"line-height\", \"110px\");\n        $(numberDiv).css(\"text-align\", \"center\");\n        $(numberDiv).css(\"font-size\", \"64px\");\n        $(numberDiv).text(delta);\n        var pos = (parseInt(delta) >= 0);\n\n        var descSpan = document.createElement(\"span\");\n        descSpan.className = \"tile-title\";\n        var desc = (pos?\"Days Until\":\"Days Since\") + \"<br/><br/><b>\" + tasks[idx].taskName + \"</b>\";\n        $(descSpan).html(desc);\n\n        t1.appendChild(numberDiv);\n        t1.appendChild(descSpan);\n        listitemDiv.appendChild(t1);\n\n        var t2 = document.createElement(\"div\");\n\n        var numberDiv2 = document.createElement(\"div\");\n        $(numberDiv2).css(\"height\", \"100px\");\n        $(numberDiv2).css(\"line-height\", \"100px\");\n        $(numberDiv2).css(\"text-align\", \"center\");\n        $(numberDiv2).css(\"font-size\", \"52px\");\n        $(numberDiv2).text(delta);\n\n        var descSpan2 = document.createElement(\"span\");\n        descSpan2.className = \"tile-title\";\n        var desc2 = (pos?\"Days Until\":\"Days Since\") + \"<br/><br/>\" + tasks[idx].taskDesc;\n        $(descSpan2).html(desc2);\n\n        t2.appendChild(numberDiv2);\n        t2.appendChild(descSpan2);\n        listitemDiv.appendChild(t2);\n\n        $(\"#divTiles\").append(listitemDiv);\n    }\n\n    $(\".live-tile, .flip-list\").not(\".exclude\").liveTile();\n}\n\nfunction refreshTasks(mode) {\n    sbv.taskLV.clearList();\n    sbv.editLV.clearList();\n\n    if (mode == null) {\n        var radio = $(\".vpatel:checked\").attr(\"id\");\n\n        switch(radio) {\n            case \"radio1\" : mode = \"Two Month\"; break;\n            case \"radio3\" : mode = \"Upcoming\"; break;\n            case \"radio4\" : mode = \"Previous\"; break;\n        }\n    }\n\n    var sortedTasks = sortTasks(mode);\n    var tileTasks = sortTasks(\"Tiles\");\n    var allTasks = getTasks();\n\n    generateTiles(tileTasks);\n\n    for (idx = 0; idx < sortedTasks.length; idx++) {\n        var obj = sortedTasks[idx];\n        var recStatus = \"\";\n        if (obj.recurPattern !== 0) {\n            recStatus = (obj.nonPersistent?\"Recurring | \":\"Recurring Start |\");\n        }\n\n        sbv.taskLV.addListItem(obj.$loki, obj.taskName, \"<span style='color:#464'>\" + moment(obj.taskDate).format('L') + \"</span> (\" + moment(obj.taskDate).diff(moment(), 'days') + \" days) \" + recStatus + obj.taskDesc, true);\n    }\n\n    for (idx = 0; idx < allTasks.length; idx++) {\n        var obj = allTasks[idx];\n\n        sbv.editLV.addListItem(obj.$loki, obj.taskName, \"<span style='color:#464'>\" + moment(obj.taskDate).format('L') + \"</span> (\" + moment(obj.taskDate).diff(moment(), 'days') + \" days) \" + recStatus + obj.taskDesc, true);\n    }\n}\n\nfunction addTask() {\n    $(\"#txtTaskText\").text(\"\");\n    $(\"#hfTaskId\").val(\"\");\n    $(\"#divTaskEdit\").show();\n\n    $(\"#txtTaskDate\").val(\"\");\n    $(\"#txtTaskName\").val(\"\");\n    $(\"#txtTaskDescription\").text(\"\");\n    $(\"#chkTaskDone\").prop('checked', false);\n    $(\"#txtRecurInterval\").val(\"\");\n    $(\"#selRecurPattern\").val(0);\n\n    var contentDialog = document.querySelector(\"#dialogElement\").winControl;\n    contentDialog.show().then(function (info) {\n        if (info.result == \"primary\") saveTask();\n    });\n\n}\n\nfunction editTask() {\n    var taskId = sbv.editLV.listSettings.selectedId;\n    var task = sbv.taskList.get(parseInt(taskId));\n\n    $(\"#hfTaskId\").val(taskId);\n    $(\"#txtTaskDate\").val(moment(task.taskDate).format('L'));\n    \n    $(\"#txtTaskName\").val(task.taskName);\n    $(\"#txtTaskDescription\").val(task.taskDesc);\n\n    $(\"#chkTaskDone\").prop('checked', task.taskDone);\n    $(\"#txtRecurInterval\").val(task.recurInterval);\n    $(\"#selRecurPattern\").val(task.recurPattern);\n\n    if (task.recurUntil != null) {\n        $(\"#txtRecurUntil\").val(moment(task.recurUntil).format('L'));\n    }\n    else  {\n        $(\"#txtRecurUntil\").val(\"\");\n    }\n\n    $(\"#divTaskEdit\").show();\n\n    var contentDialog = document.querySelector(\"#dialogElement\").winControl; //document.querySelector(\".win-contentdialog\").winControl;\n    contentDialog.show().then(function (info) {\n        if (info.result == \"primary\") saveTask();\n    });\n}\n\nfunction deleteTask() {\n    var key = sbv.editLV.listSettings.selectedId;\n\n    alertify.confirm(\"Are you sure you want to delete this task?\", function (e) {\n        if (e) {\n            sbv.taskList.remove(sbv.taskList.get(key));\n            refreshTasks();\n            dbSave();\n        } \n    });\n}\n\nfunction saveTask() {\n    var key = $(\"#hfTaskId\").val();\n\n    var taskDate = $(\"#txtTaskDate\").val();\n    var taskName = $(\"#txtTaskName\").val();\n    var taskDesc = $(\"#txtTaskDescription\").text();\n    var taskDone = $(\"#chkTaskDone\").is(':checked');\n\n    var recurIntervalText = $(\"#txtRecurInterval\").val();\n    var recurInterval = 0;\n    if (recurIntervalText !== \"\") recurInterval = parseInt(recurIntervalText);\n\n    var recurPatternVal = $(\"#selRecurPattern\").val();\n    var recurPattern = parseInt(recurPatternVal.toString());\n\n    var recurUntilText = $(\"#txtRecurUntil\").val();\n    var recurUntil = null;\n    if (recurUntilText !== \"\") recurUntil = moment(recurUntilText).format('L');\n\n    if (taskDate === \"\") {\n        alertify.error(\"Task Date is required\");\n        return;\n    }\n\n    if (taskName === \"\") {\n        alertify.error(\"Task Name is required\");\n        return;\n    }\n\n    if (key === \"\") {\n        // Unused/Unset properties allocated for future use\n        sbv.taskList.insert({ \n            taskName: taskName, \n            taskDesc: taskDesc, \n            taskDate: moment(taskDate).format('L'),\n            taskDone: taskDone,\n            recurPattern: recurPattern, \n            recurInterval: recurInterval,\n            recurUntil: recurUntil,\n            nonPersistent : false,\n            category: null,\n            color: null,\n            priority: null\n        });\n    }\n    else {\n        var task = sbv.taskList.get(parseInt(key));\n\n        task.taskDate = moment(taskDate).format('L');\n        task.taskName = taskName;\n        task.taskDesc = taskDesc;\n        task.taskDone = taskDone;\n        task.recurPattern = recurPattern;\n        task.recurInterval = recurInterval;\n        task.recurUntil = recurUntil;\n        task.category = null;\n        task.color = null;\n        task.priority = null;\n    }\n\n    refreshTasks();\n\n    $(\"#divTaskEdit\").hide();\n\n    dbSave();\n}\n\n$(\"#txtRecurUntil\").datepicker({ appendTo: \"#UI_MainPlaceholder\", changeMonth: true, changeYear: true });\n$(\"#txtTaskDate\").datepicker({ changeMonth: true, changeYear: true });\n\nWinJS.UI.Pages.define(location.href, {\n    ready: function (element, options) {\n        dbInit();\n\n        $(\"#divMainFS\").show();\n    },\n\n    unload: function () {\n        // TODO: Respond to navigations away from this page.\n    }\n});\n\nWinJS.UI.processAll().then(function () {\n    if (sandbox.volatile.env == \"IDE WJS\") {\n        $(\"#UI_Main_Output\").height();\n    }\n});   \n\n"
}