{
  "progName": "PixiJS Morph Demo",
  "htmlText": "<a href=\"http://www.photonstorm.com\" target=\"_blank\"><img src=\"libraries/pixi.js/photonstorm.png\" width=\"121\" height=\"18\" id=\"photonstorm\" title=\"Photon Storm\" /></a>\n<a href=\"http://www.pixijs.com/\" target=\"_blank\"><img src=\"libraries/pixi.js/pixi.png\" width=\"56\" height=\"22\" id=\"pixi\" title=\"pixi.js\" /></a>\n<br/>\n",
  "scriptText": "var w = 1024,\n    h = 768,\n    n = 2000,\n    d = 1,\n    current = 1,\n    objs = 17,\n    vx = 0,\n    vy = 0,\n    vz = 0;\n\nvar sbv = {\n    stopAnim : false,\n    points1 : [],\n    points2 : [],\n    points3 : [],\n    tpoint1 : [],\n    tpoint2 : [],\n    tpoint3 : [],\n    balls : []\n};\n\nsandbox.events.cleanSandbox = function() {\n    sbv.stopAnim = true;\n\n    setTimeout(function() {\n        delete sbv.points1;\n        delete sbv.points2;\n        delete sbv.points3;\n        delete sbv.tpoint1;\n        delete sbv.tpoint2;\n        delete sbv.tpoint3;\n        delete sbv.balls;\n        sbv = null;\n    }, 300);\n};\n\n\nsandbox.ui.setBackgroundColor(\"#333\");\nstart();\n\nfunction start() {\n    var ballTexture = new PIXI.Texture.fromImage(\"libraries/pixi.js/pixel.png\");\n\n    renderer = PIXI.autoDetectRenderer(w, h);\n    stage = new PIXI.Stage();\n\n    document.getElementById(\"UI_MainPlaceholder\").appendChild(renderer.view);\n\n    makeObject(0);\n\n    for (var i = 0; i < n; i++)\t{\n        sbv.tpoint1[i] = sbv.points1[i];\n        sbv.tpoint2[i] = sbv.points2[i];\n        sbv.tpoint3[i] = sbv.points3[i];\n\n        var tempBall = new PIXI.Sprite(ballTexture);\n        tempBall.anchor.x = 0.5;\n        tempBall.anchor.y = 0.5;\n        tempBall.alpha = 0.5;\n        sbv.balls[i] = tempBall;\n        stage.addChild(tempBall);\n    }\n\n    resize();\n\n    setTimeout(nextObject, 5000);\n    requestAnimFrame(update);\n\n}\n\nfunction nextObject () {\n    if (!sbv || !sbv.hasOwnProperty(\"stopAnim\") || sbv.stopAnim) return;\n\n    current++;\n\n    if (current > objs)\t{\n        current = 0;\n    }\n\n    makeObject(current);\n\n    setTimeout(nextObject, 8000);\n}\n\nfunction makeObject ( t ) {\n\n    var xd;\n\n    switch (t)\n    {\n        case 0:\n\n            for (var i = 0; i < n; i++)\n            {\n                sbv.points1[i] = -50 + Math.round(Math.random() * 100);\n                sbv.points2[i] = 0;\n                sbv.points3[i] = 0;\n            }\n            break;\n\n        case 1:\n\n            for (var i = 0; i < n; i++)\n            {\n                xd = -90 + Math.round(Math.random() * 180);\n                sbv.points1[i] = (Math.cos(xd) * 10) * (Math.cos(t * 360 / n) * 10);\n                sbv.points2[i] = (Math.cos(xd) * 10) * (Math.sin(t * 360 / n) * 10);\n                sbv.points3[i] = Math.sin(xd) * 100;\n            }\n            break;\n\n        case 2:\n\n            for (var i = 0; i < n; i++)\n            {\n                xd = -90 + Math.round(Math.random() * 180);\n                sbv.points1[i] = (Math.cos(xd) * 10) * (Math.cos(t * 360 / n) * 10);\n                sbv.points2[i] = (Math.cos(xd) * 10) * (Math.sin(t * 360 / n) * 10);\n                sbv.points3[i] = Math.sin(i * 360 / n) * 100;\n            }\n            break;\n\n        case 3:\n\n            for (var i = 0; i < n; i++)\n            {\n                xd = -90 + Math.round(Math.random() * 180);\n                sbv.points1[i] = (Math.cos(xd) * 10) * (Math.cos(xd) * 10);\n                sbv.points2[i] = (Math.cos(xd) * 10) * (Math.sin(xd) * 10);\n                sbv.points3[i] = Math.sin(xd) * 100;\n            }\n            break;\n\n        case 4:\n\n            for (var i = 0; i < n; i++)\n            {\n                xd = -90 + Math.round(Math.random() * 180);\n                sbv.points1[i] = (Math.cos(xd) * 10) * (Math.cos(xd) * 10);\n                sbv.points2[i] = (Math.cos(xd) * 10) * (Math.sin(xd) * 10);\n                sbv.points3[i] = Math.sin(i * 360 / n) * 100;\n            }\n            break;\n\n        case 5:\n\n            for (var i = 0; i < n; i++)\n            {\n                xd = -90 + Math.round(Math.random() * 180);\n                sbv.points1[i] = (Math.cos(xd) * 10) * (Math.cos(xd) * 10);\n                sbv.points2[i] = (Math.cos(i * 360 / n) * 10) * (Math.sin(xd) * 10);\n                sbv.points3[i] = Math.sin(i * 360 / n) * 100;\n            }\n            break;\n\n        case 6:\n\n            for (var i = 0; i < n; i++)\n            {\n                xd = -90 + Math.round(Math.random() * 180);\n                sbv.points1[i] = (Math.cos(i * 360 / n) * 10) * (Math.cos(i * 360 / n) * 10);\n                sbv.points2[i] = (Math.cos(i * 360 / n) * 10) * (Math.sin(xd) * 10);\n                sbv.points3[i] = Math.sin(i * 360 / n) * 100;\n            }\n            break;\n\n        case 7:\n\n            for (var i = 0; i < n; i++)\n            {\n                xd = -90 + Math.round(Math.random() * 180);\n                sbv.points1[i] = (Math.cos(i * 360 / n) * 10) * (Math.cos(i * 360 / n) * 10);\n                sbv.points2[i] = (Math.cos(i * 360 / n) * 10) * (Math.sin(i * 360 / n) * 10);\n                sbv.points3[i] = Math.sin(i * 360 / n) * 100;\n            }\n            break;\n\n        case 8:\n\n            for (var i = 0; i < n; i++)\n            {\n                xd = -90 + Math.round(Math.random() * 180);\n                sbv.points1[i] = (Math.cos(xd) * 10) * (Math.cos(i * 360 / n) * 10);\n                sbv.points2[i] = (Math.cos(i * 360 / n) * 10) * (Math.sin(i * 360 / n) * 10);\n                sbv.points3[i] = Math.sin(xd) * 100;\n            }\n            break;\n\n        case 9:\n\n            for (var i = 0; i < n; i++)\n            {\n                xd = -90 + Math.round(Math.random() * 180);\n                sbv.points1[i] = (Math.cos(xd) * 10) * (Math.cos(i * 360 / n) * 10);\n                sbv.points2[i] = (Math.cos(i * 360 / n) * 10) * (Math.sin(xd) * 10);\n                sbv.points3[i] = Math.sin(xd) * 100;\n            }\n            break;\n\n        case 10:\n\n            for (var i = 0; i < n; i++)\n            {\n                xd = -90 + Math.round(Math.random() * 180);\n                sbv.points1[i] = (Math.cos(i * 360 / n) * 10) * (Math.cos(i * 360 / n) * 10);\n                sbv.points2[i] = (Math.cos(xd) * 10) * (Math.sin(xd) * 10);\n                sbv.points3[i] = Math.sin(i * 360 / n) * 100;\n            }\n            break;\n\n        case 11:\n\n            for (var i = 0; i < n; i++)\n            {\n                xd = -90 + Math.round(Math.random() * 180);\n                sbv.points1[i] = (Math.cos(xd) * 10) * (Math.cos(i * 360 / n) * 10);\n                sbv.points2[i] = (Math.sin(xd) * 10) * (Math.sin(i * 360 / n) * 10);\n                sbv.points3[i] = Math.sin(xd) * 100;\n            }\n            break;\n\n        case 12:\n\n            for (var i = 0; i < n; i++)\n            {\n                xd = -90 + Math.round(Math.random() * 180);\n                sbv.points1[i] = (Math.cos(xd) * 10) * (Math.cos(xd) * 10);\n                sbv.points2[i] = (Math.sin(xd) * 10) * (Math.sin(xd) * 10);\n                sbv.points3[i] = Math.sin(i * 360 / n) * 100;\n            }\n            break;\n\n        case 13:\n\n            for (var i = 0; i < n; i++)\n            {\n                xd = -90 + Math.round(Math.random() * 180);\n                sbv.points1[i] = (Math.cos(xd) * 10) * (Math.cos(i * 360 / n) * 10);\n                sbv.points2[i] = (Math.sin(i * 360 / n) * 10) * (Math.sin(xd) * 10);\n                sbv.points3[i] = Math.sin(i * 360 / n) * 100;\n            }\n            break;\n\n        case 14:\n\n            for (var i = 0; i < n; i++)\n            {\n                xd = -90 + Math.round(Math.random() * 180);\n                sbv.points1[i] = (Math.sin(xd) * 10) * (Math.cos(xd) * 10);\n                sbv.points2[i] = (Math.sin(xd) * 10) * (Math.sin(i * 360 / n) * 10);\n                sbv.points3[i] = Math.sin(i * 360 / n) * 100;\n            }\n            break;\n\n        case 15:\n\n            for (var i = 0; i < n; i++)\n            {\n                xd = -90 + Math.round(Math.random() * 180);\n                sbv.points1[i] = (Math.cos(i * 360 / n) * 10) * (Math.cos(i * 360 / n) * 10);\n                sbv.points2[i] = (Math.sin(i * 360 / n) * 10) * (Math.sin(xd) * 10);\n                sbv.points3[i] = Math.sin(i * 360 / n) * 100;\n            }\n            break;\n\n        case 16:\n\n            for (var i = 0; i < n; i++)\n            {\n                xd = -90 + Math.round(Math.random() * 180);\n                sbv.points1[i] = (Math.cos(xd) * 10) * (Math.cos(i * 360 / n) * 10);\n                sbv.points2[i] = (Math.sin(i * 360 / n) * 10) * (Math.sin(xd) * 10);\n                sbv.points3[i] = Math.sin(xd) * 100;\n            }\n            break;\n\n        case 17:\n\n            for (var i = 0; i < n; i++)\n            {\n                xd = -90 + Math.round(Math.random() * 180);\n                sbv.points1[i] = (Math.cos(xd) * 10) * (Math.cos(xd) * 10);\n                sbv.points2[i] = (Math.cos(i * 360 / n) * 10) * (Math.sin(i * 360 / n) * 10);\n                sbv.points3[i] = Math.sin(i * 360 / n) * 100;\n            }\n            break;\n    }\n\n}\n\nfunction resize()\n{\n    w = 600; //$(window).width() - 16;\n    h = 400; //$(window).height() - 16;\n\n    renderer.resize(w, h);\n}\n\nfunction update()\n{\n    if (!sbv || !sbv.hasOwnProperty(\"stopAnim\") || sbv.stopAnim) return;\n\n    var x3d, y3d, z3d, tx, ty, tz, ox;\n\n    if (d < 250)\n    {\n        d++;\n    }\n\n    vx += 0.0075;\n    vy += 0.0075;\n    vz += 0.0075;\n\n    for (var i = 0; i < n; i++)\n    {\n        if (sbv.points1[i] > sbv.tpoint1[i]) { sbv.tpoint1[i] = sbv.tpoint1[i] + 1; }\n        if (sbv.points1[i] < sbv.tpoint1[i]) { sbv.tpoint1[i] = sbv.tpoint1[i] - 1; }\n        if (sbv.points2[i] > sbv.tpoint2[i]) { sbv.tpoint2[i] = sbv.tpoint2[i] + 1; }\n        if (sbv.points2[i] < sbv.tpoint2[i]) { sbv.tpoint2[i] = sbv.tpoint2[i] - 1; }\n        if (sbv.points3[i] > sbv.tpoint3[i]) { sbv.tpoint3[i] = sbv.tpoint3[i] + 1; }\n        if (sbv.points3[i] < sbv.tpoint3[i]) { sbv.tpoint3[i] = sbv.tpoint3[i] - 1; }\n\n        x3d = sbv.tpoint1[i];\n        y3d = sbv.tpoint2[i];\n        z3d = sbv.tpoint3[i];\n\n        ty = (y3d * Math.cos(vx)) - (z3d * Math.sin(vx));\n        tz = (y3d * Math.sin(vx)) + (z3d * Math.cos(vx));\n        tx = (x3d * Math.cos(vy)) - (tz * Math.sin(vy));\n        tz = (x3d * Math.sin(vy)) + (tz * Math.cos(vy));\n        ox = tx;\n        tx = (tx * Math.cos(vz)) - (ty * Math.sin(vz));\n        ty = (ox * Math.sin(vz)) + (ty * Math.cos(vz));\n\n        sbv.balls[i].position.x = (512 * tx) / (d - tz) + w / 2;\n        sbv.balls[i].position.y = (h/2) - (512 * ty) / (d - tz);\n\n    }\n\n    renderer.render(stage);\n\n    requestAnimFrame(update);\n}\n"
}