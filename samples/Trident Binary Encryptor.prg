{
  "progName": "Trident Binary Encryptor",
  "htmlText": "<h3>Trident Binary Encryptor</h3>\n<p>This demo utilizes the old file loader for reading encrypted files (saved as encrypted text), and a new binary dataURL file loader for encrypting binary files.</P>\n<p>It is probably best to use this for smaller files.  My larger sample file of about 7 megs took about 10 seconds on a core i5.  Encrypted file may also be up to twice as big as unencrypted/decrypted.</p>\n<p>This sample might also prove useful for storing/caching binary files in TridentDB (with or without encryption) and later retrieving and using them as a dataURL.  You could import images, sounds, etc to use when running hosted or appcached (where you can't get to the images or sounds folder)</p>\n<button onclick=\"encrypt()\">Encrypt</button> <button onclick=\"decrypt()\">Decrypt</button>\n\n<div id='divPassword' style='display:none'>\n<i class=\"fa fa-key\"></i> Enter Password : \n<input id='txtDialogPassword'  onKeyDown=\"if (event.keyCode==13) sbv.dlgOkButton.focus()\" type='password'></input>\n</div>\n\n",
  "scriptText": "var sbv = {\n\tdlgOkButton : null\n}\n\nfunction EVT_CleanSandbox() {\n\tdelete sbv.dlgOkButton;\n}\n\nfunction encrypt() {\n\tAPI_ShowDataLoad();\n    API_HideUserLoader();\n}\n\nfunction decrypt() {\n\tAPI_ShowLoad();\n    API_HideUserDataLoader();\n}\n\n// This is fired when the user picks a binary file to encode\n// it receives the binary file as a dataURL instead of a blob\n// The dataURL is a common format normally used for embedding images within html\n// It actually supports many mime types and is a base64 string with mime type and \n// encoded binary stored in it.\nfunction EVT_UserDataLoadCallback(dataURL, filename) {\n\t$(\"#divPassword\").dialog({ \n    \ttitle: 'Password',\n    \topen: function() {\n      \t\tvar buttonPane = $(this).next();\n      \t\tbuttonPane.find('button:first').addClass('ui-state-default');\n\t\t\tsbv.dlgOkButton = buttonPane.find('button:first');\n    \t},\n        buttons : {\n        \tOk : function() { \n    \t\t\tvar pass = $(this).find(\"input\").val();\n                //$(\"#hfPassword\").val(pass);\n\n\t\t\t\tif (pass.length < 6) {\n    \t\t\t\talertify.alert(\"Password must be at least six characters\");\n        \t\t\treturn;\n    \t\t\t}\n\n\t\t\t\tvar encrypted = CryptoJS.AES.encrypt(dataURL, pass).toString();\n\t\t\t\tAPI_SaveTextFile(filename + \".encx\", encrypted);\n\n\t\t\t\t$(this).dialog( \"destroy\" );\n            },\n            \"Close\" : function() {\n            \t$(this).dialog( \"destroy\" );\n            }\n        }\n\n\t});\n}\n\n// This is callback for when user picks an encrypted file\n// Encrypted file is text so this is old callback\nfunction EVT_UserLoadCallback(filestring, filename) {\n\t$(\"#divPassword\").dialog({ \n    \ttitle: 'Password',\n    \topen: function() {\n      \t\tvar buttonPane = $(this).next();\n      \t\tbuttonPane.find('button:first').addClass('ui-state-default');\n\t\t\tsbv.dlgOkButton = buttonPane.find('button:first');\n    \t},\n        buttons : {\n        \tOk : function() { \n    \t\t\tvar pass = $(this).find(\"input\").val();\n                //$(\"#hfPassword\").val(pass);\n\n\t\t\t\tif (pass.length < 6) {\n    \t\t\t\talertify.alert(\"Password must be at least six characters\");\n        \t\t\treturn;\n    \t\t\t}\n\n               \tvar decrypted = CryptoJS.AES.decrypt(filestring, pass).toString(CryptoJS.enc.Utf8);\n\t\t\t\tAPI_SaveDataURL(filename.replace(\".encx\", \"\"), decrypted);\n\n\t\t\t\t$(this).dialog( \"destroy\" );\n            },\n            \"Close\" : function() {\n            \t$(this).dialog( \"destroy\" );\n            }\n        }\n\n\t});\n}\n"
}