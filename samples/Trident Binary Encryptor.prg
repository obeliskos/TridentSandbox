{
  "progName": "Trident Binary Encryptor",
  "htmlText": "<h3>Trident Binary Encryptor</h3>\n<p>This demo utilizes the old file loader for reading encrypted files (saved as encrypted text), and a new binary dataURL file loader for encrypting binary files.</P>\n<p>It is probably best to use this for smaller files.  My larger sample file of about 7 megs took about 10 seconds on a core i5.  Encrypted file may also be up to twice as big as unencrypted/decrypted.</p>\n<p>This sample might also prove useful for storing/caching binary files in TridentDB (with or without encryption) and later retrieving and using them as a dataURL.  You could import images, sounds, etc to use when running hosted or appcached (where you can't get to the images or sounds folder)</p>\n<button onclick=\"encrypt()\">Encrypt</button> <button onclick=\"decrypt()\">Decrypt</button>\n\n<div id='divPassword' style='display:none'>\n    <i class=\"fa fa-key\"></i> Enter Password : \n    <input id='txtDialogPassword'  onKeyDown=\"if (event.keyCode==13) sbv.dlgOkButton.focus()\" type='password'></input>\n</div>\n\n",
  "scriptText": "var sbv = {\n    dlgOkButton : null\n};\n\nsandbox.events.clean = function() {\n    delete sbv.dlgOkButton;\n};\n\nfunction encrypt() {\n    sandbox.files.userdataShow();\n    sandbox.files.userfileHide();\n    //API_ShowDataLoad();\n    //API_HideUserLoader();\n}\n\nfunction decrypt() {\n    sandbox.files.userfileShow();\n    sandbox.files.userdataHide();\n    //API_ShowLoad();\n    //API_HideUserDataLoader();\n}\n\n// This is fired when the user picks a binary file to encode\n// it receives the binary file as a dataURL instead of a blob\n// The dataURL is a common format normally used for embedding images within html\n// It actually supports many mime types and is a base64 string with mime type and \n// encoded binary stored in it.\nsandbox.events.userdataLoadCallback = function(dataURL, filename) {\n    sandbox.ui.showPasswordDialog(function(val) {\n        var pass = val;\n\n        if (pass.length < 6) {\n            alertify.alert(\"Password must be at least six characters\");\n            return;\n        }\n\n        var encrypted = CryptoJS.AES.encrypt(dataURL, pass).toString();\n        sandbox.files.saveTextFile(filename + \".encx\", encrypted);\n    });\n};\n\n// This is callback for when user picks an encrypted file\n// Encrypted file is text so this is old callback\nsandbox.events.userLoadCallback = function(filestring, filename) {\n    sandbox.ui.showPasswordDialog(function(val) {\n        var pass = val;\n\n        if (pass.length < 6) {\n            alertify.alert(\"Password must be at least six characters\");\n            return;\n        }\n\n        var decrypted = CryptoJS.AES.decrypt(filestring, pass).toString(CryptoJS.enc.Utf8);\n        sandbox.files.saveDataURL(filename.replace(\".encx\", \"\"), decrypted);\n    });\n};\n"
}