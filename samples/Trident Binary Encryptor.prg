{
  "progName": "Trident Binary Encryptor",
  "htmlText": "<style> /* Simple styles for the file drop target */\n    #droptargetEncrypt { border: solid black 2px; width: 200px; height: 200px; }\n    #droptargetEncrypt.active { border: solid red 4px; }\n    #droptargetDecrypt { border: solid black 2px; width: 200px; height: 200px; }\n    #droptargetDecrypt.active { border: solid red 4px; }\n</style>\n\n<h3>Trident Binary Encryptor</h3>\n<p>This demo encrypts a binary file by converting to datauri, encrypting text and saving as encrypted text.</P>\n<p>Use only for smaller files (files under 50 megs or so).  Encrypted file may also be up to twice as big as unencrypted/decrypted.</p>\n<br/>\n<label>Enter Password (do this first) :</label>\n<input type=\"password\" id='txtPassword'>\n<br/><br/>\n<button class=\"minimal\" onclick=\"encrypt()\" style=\"width:200px\">Browse to Encrypt</button> \n<button class=\"minimal\" onclick=\"decrypt()\" style=\"width:200px\">Browse to Decrypt</button>\n<br/><br/>\n\n<div id=\"droptargetEncrypt\" style=\"display:inline-block\">-or-<br/> <br/> Drop single file Here to encrypt it (after entering password)</div>\n\n<div id=\"droptargetDecrypt\" style=\"display:inline-block\">-or- <br/><br/> Drop single file here to decrypt it (after entering password)</div>\n\n\n<div id='divPassword' style='display:none'>\n    <i class=\"fa fa-key\"></i> Enter Password : \n</div>\n\n",
  "scriptText": "var sbv = {\n    dlgOkButton : null\n};\n\nsandbox.events.clean = function() {\n    delete sbv.dlgOkButton;\n};\n\nfunction encrypt() {\n    sandbox.files.userdataShow();\n    sandbox.files.userfileHide();\n}\n\nfunction decrypt() {\n    sandbox.files.userfileShow();\n    sandbox.files.userdataHide();\n}\n\n// This is fired when the user picks a binary file to encode\n// it receives the binary file as a dataURL instead of a blob\n// The dataURL is a common format normally used for embedding images within html\n// It actually supports many mime types and is a base64 string with mime type and \n// encoded binary stored in it.\nsandbox.events.userdataLoadCallback = function(dataURL, filename) {\n    var pass = $(\"#txtPassword\").val();\n\n    if (pass.length < 6) {\n        alertify.error(\"Please enter a password of at least 6 characters\");\n        return;\n    }\n\n    var encrypted = CryptoJS.AES.encrypt(dataURL, pass).toString();\n    sandbox.files.saveTextFile(filename + \".encx\", encrypted);\n};\n\n// This is callback for when user picks an encrypted file\n// Encrypted file is text so this is old callback\nsandbox.events.userLoadCallback = function(filestring, filename) {\n    var pass = $(\"#txtPassword\").val();\n\n    if (pass.length < 6) {\n        alertify.error(\"Please enter a password of at least 6 characters\");\n        return;\n    }\n\n    var decrypted = CryptoJS.AES.decrypt(filestring, pass).toString(CryptoJS.enc.Utf8);\n    sandbox.files.saveDataURL(filename.replace(\".encx\", \"\"), decrypted);\n};\n\nfunction initDropTargets() {\n    // Find the element we want to add handlers to.\n    var droptargetE = document.getElementById(\"droptargetEncrypt\");\n    var droptargetD = document.getElementById(\"droptargetDecrypt\");\n\n    // When the user starts dragging files over the droptarget, highlight it.\n    droptargetE.ondragenter = function(e) {\n        // If the drag is something other than files, ignore it.\n        // The HTML5 dropzone attribute will simplify this when implemented.\n        var types = e.dataTransfer.types;\n        if (!types ||\n            (types.contains && types.contains(\"Files\")) ||\n            (types.indexOf && types.indexOf(\"Files\") != -1)) {\n            droptargetE.classList.add(\"active\"); // Highlight droptarget\n            return false;                       // We're interested in the drag\n        }\n    };\n    // Unhighlight the drop zone if the user moves out of it\n    droptargetE.ondragleave = function() {\n        droptargetE.classList.remove(\"active\");\n    };\n\n    // This handler just tells the browser to keep sending notifications\n    droptargetE.ondragover = function(e) { return false; };\n\n    // When the user drops files on us, get their URLs and display thumbnails.\n    droptargetE.ondrop = function(e) {\n        var pass = $(\"#txtPassword\").val();\n        \n        if (pass.length < 6) {\n            alertify.error(\"Please enter a password of at least 6 characters\");\n            return;\n        }\n        \n        var files = e.dataTransfer.files;            // The dropped files\n        for(var i = 0; i < files.length; i++) {      // Loop through them all\n            var f = files[i];\n            var reader = new FileReader();\n            reader.onload = (function(thefile) {\n                return function(e) {\n                    var encrypted = CryptoJS.AES.encrypt(e.target.result, pass).toString();\n                    sandbox.files.saveTextFile(thefile.name + \".encx\", encrypted);\n                    \n                    //sandbox.db.setAppKey(\"TridentFiles\", thefile.name, e.target.result);\n\n                    //setTimeout(function () { retrieveAllHostedFiles(); }, 500);\n                };\n            })(f);\n            reader.readAsDataURL(f);\n        }\n\n        droptargetE.classList.remove(\"active\");       // Unhighlight droptarget\n        return false;                                // We've handled the drop\n    };\n    \n    // When the user starts dragging files over the droptarget, highlight it.\n    droptargetD.ondragenter = function(e) {\n        // If the drag is something other than files, ignore it.\n        // The HTML5 dropzone attribute will simplify this when implemented.\n        var types = e.dataTransfer.types;\n        if (!types ||\n            (types.contains && types.contains(\"Files\")) ||\n            (types.indexOf && types.indexOf(\"Files\") != -1)) {\n            droptargetD.classList.add(\"active\"); // Highlight droptarget\n            return false;                       // We're interested in the drag\n        }\n    };\n    // Unhighlight the drop zone if the user moves out of it\n    droptargetD.ondragleave = function() {\n        droptargetD.classList.remove(\"active\");\n    };\n\n    // This handler just tells the browser to keep sending notifications\n    droptargetD.ondragover = function(e) { return false; };\n\n    // When the user drops files on us, get their URLs and display thumbnails.\n    droptargetD.ondrop = function(e) {\n        var pass = $(\"#txtPassword\").val();\n        \n        if (pass.length < 6) {\n            alertify.error(\"Please enter a password of at least 6 characters\");\n            return;\n        }\n        \n        var files = e.dataTransfer.files;            // The dropped files\n        for(var i = 0; i < files.length; i++) {      // Loop through them all\n            var f = files[i];\n            var reader = new FileReader();\n            reader.onload = (function(thefile) {\n                return function(e) {\n                    var decrypted = CryptoJS.AES.decrypt(e.target.result, pass).toString(CryptoJS.enc.Utf8);\n                    sandbox.files.saveDataURL(thefile.name.replace(\".encx\", \"\"), decrypted);\n                };\n            })(f);\n            reader.readAsText(f);\n        }\n\n        droptargetD.classList.remove(\"active\");       // Unhighlight droptarget\n        return false;                                // We've handled the drop\n    };\n    \n}\n\ninitDropTargets();\n"
}