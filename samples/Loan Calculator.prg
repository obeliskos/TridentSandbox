{
  "progName": "Loan Calculator",
  "htmlText": "<style> /* This is a CSS style sheet: it adds style to the program output */\n    .output { font-weight: bold; }           /* Calculated values in bold */\n    #payment { text-decoration: underline; } /* For element with id=\"payment\" */\n    #graph { border: solid black 1px; }      /* Chart has a simple border */\n    th, td { vertical-align: top; }          /* Dont center table cells */\n</style>\n\n<table>\n    <tr><th>Enter Loan Data:</th>\n        <td></td>\n        <th>Loan Balance, Cumulative Equity, and Interest Payments</th></tr>\n    <tr><td>Amount of the loan ($):</td>\n        <td><input id=\"amount\" onchange=\"calculate();\"></td>\n        <td rowspan=8>\n            <canvas id=\"graph\" width=\"400\" height=\"250\"></canvas></td></tr>\n    <tr><td>Annual interest (%):</td>\n        <td><input id=\"apr\" onchange=\"calculate();\"></td></tr>\n    <tr><td>Repayment period (years):</td>\n        <td><input id=\"years\" onchange=\"calculate();\"></td>\n    <tr><td>Zipcode (to find lenders):</td>\n        <td><input id=\"zipcode\" onchange=\"calculate();\"></td>\n    <tr><th>Approximate Payments:</th>\n        <td><button onclick=\"calculate();\">Calculate</button></td></tr>\n    <tr><td>Monthly payment:</td>\n        <td>$<span class=\"output\" id=\"payment\"></span></td></tr>\n    <tr><td>Total payment:</td>\n        <td>$<span class=\"output\" id=\"total\"></span></td></tr>\n    <tr><td>Total interest:</td>\n        <td>$<span class=\"output\" id=\"totalinterest\"></span></td></tr>\n    <tr><th>Sponsors:</th><td  colspan=2>\n        Apply for your loan with one of these fine lenders:\n        <div id=\"lenders\"></div></td></tr>\n</table>\n\n",
  "scriptText": "//\tTaken from Oreillly sample in Javascript the definative guide\n//\tDownload all sample code from : http://shop.oreilly.com/product/9780596805531.do\n/*\n * This script defines the calculate() function called by the event handlers\n * in HTML above. The function reads values from <input> elements, calculates\n * loan payment information, displays the results in <span> elements. It also\n * saves the user's data, displays links to lenders, and draws a chart.\n */\nfunction calculate() {\n    // Look up the input and output elements in the document\n    var amount = document.getElementById(\"amount\");\n    var apr = document.getElementById(\"apr\");\n    var years = document.getElementById(\"years\");\n    var zipcode = document.getElementById(\"zipcode\");\n    var payment = document.getElementById(\"payment\");\n    var total = document.getElementById(\"total\");\n    var totalinterest = document.getElementById(\"totalinterest\");\n\n    // Get the user's input from the input elements. Assume it is all valid.\n    // Convert interest from a percentage to a decimal, and convert from\n    // an annual rate to a monthly rate. Convert payment period in years\n    // to the number of monthly payments.\n    var principal = parseFloat(amount.value);\n    var interest = parseFloat(apr.value) / 100 / 12;\n    var payments = parseFloat(years.value) * 12;\n\n    // Now compute the monthly payment figure.\n    var x = Math.pow(1 + interest, payments);   // Math.pow() computes powers\n    var monthly = (principal*x*interest)/(x-1);\n\n    // If the result is a finite number, the user's input was good and\n    // we have meaningful results to display\n    if (isFinite(monthly)) {\n        // Fill in the output fields, rounding to 2 decimal places\n        payment.innerHTML = monthly.toFixed(2);\n        total.innerHTML = (monthly * payments).toFixed(2);\n        totalinterest.innerHTML = ((monthly*payments)-principal).toFixed(2);\n\n        // Save the user's input so we can restore it the next time they visit\n        save(amount.value, apr.value, years.value, zipcode.value);\n\n        // Advertise: find and display local lenders, but ignore network errors\n        try {      // Catch any errors that occur within these curly braces\n            getLenders(amount.value, apr.value, years.value, zipcode.value);\n        }\n        catch(e) { /* And ignore those errors */ }\n\n        // Finally, chart loan balance, and interest and equity payments\n        chart(principal, interest, monthly, payments);\n    }\n    else {  \n        // Result was Not-a-Number or infinite, which means the input was\n        // incomplete or invalid. Clear any previously displayed output.\n        payment.innerHTML = \"\";        // Erase the content of these elements\n        total.innerHTML = \"\"\n        totalinterest.innerHTML = \"\";\n        chart();                       // With no arguments, clears the chart\n    }\n}\n\n// Save the user's input as properties of the localStorage object. Those\n// properties will still be there when the user visits in the future\n// This storage feature will not work in some browsers (Firefox, e.g.) if you \n// run the example from a local file:// URL.  It does work over HTTP, however.\nfunction save(amount, apr, years, zipcode) {\n    if (window.localStorage) {  // Only do this if the browser supports it\n        localStorage.loan_amount = amount;\n        localStorage.loan_apr = apr;\n        localStorage.loan_years = years;\n        localStorage.loan_zipcode = zipcode;\n    }\n}\n\n// Automatically attempt to restore input fields when the document first loads.\nwindow.onload = function() {\n    // If the browser supports localStorage and we have some stored data\n    if (window.localStorage && localStorage.loan_amount) {  \n        document.getElementById(\"amount\").value = localStorage.loan_amount;\n        document.getElementById(\"apr\").value = localStorage.loan_apr;\n        document.getElementById(\"years\").value = localStorage.loan_years;\n        document.getElementById(\"zipcode\").value = localStorage.loan_zipcode;\n    }\n};\n\n// Pass the user's input to a server-side script which can (in theory) return\n// a list of links to local lenders interested in making loans.  This example\n// does not actually include a working implementation of such a lender-finding\n// service. But if the service existed, this function would work with it.\nfunction getLenders(amount, apr, years, zipcode) {\n    // If the browser does not support the XMLHttpRequest object, do nothing\n    if (!window.XMLHttpRequest) return;\n\n    // Find the element to display the list of lenders in\n    var ad = document.getElementById(\"lenders\");\n    if (!ad) return;                            // Quit if no spot for output \n\n    // Encode the user's input as query parameters in a URL\n    var url = \"getLenders.php\" +                // Service url plus\n        \"?amt=\" + encodeURIComponent(amount) +  // user data in query string\n        \"&apr=\" + encodeURIComponent(apr) +\n        \"&yrs=\" + encodeURIComponent(years) +\n        \"&zip=\" + encodeURIComponent(zipcode);\n\n    // Fetch the contents of that URL using the XMLHttpRequest object\n    var req = new XMLHttpRequest();        // Begin a new request\n    req.open(\"GET\", url);                  // An HTTP GET request for the url\n    req.send(null);                        // Send the request with no body\n\n    // Before returning, register an event handler function that will be called\n    // at some later time when the HTTP server's response arrives. This kind of \n    // asynchronous programming is very common in client-side JavaScript.\n    req.onreadystatechange = function() {\n        if (req.readyState == 4 && req.status == 200) {\n            // If we get here, we got a complete valid HTTP response\n            var response = req.responseText;     // HTTP response as a string\n            var lenders = JSON.parse(response);  // Parse it to a JS array\n\n            // Convert the array of lender objects to a string of HTML\n            var list = \"\";\n            for(var i = 0; i < lenders.length; i++) {\n                list += \"<li><a href='\" + lenders[i].url + \"'>\" +\n                    lenders[i].name + \"</a>\";\n            }\n\n            // Display the HTML in the element from above.\n            ad.innerHTML = \"<ul>\" + list + \"</ul>\"; \n        }\n    }\n}\n\n// Chart monthly loan balance, interest and equity in an HTML <canvas> element.\n// If called with no arguments then just erase any previously drawn chart.\nfunction chart(principal, interest, monthly, payments) {\n    var graph = document.getElementById(\"graph\"); // Get the <canvas> tag\n    graph.width = graph.width;  // Magic to clear and reset the canvas element\n\n    // If we're called with no arguments, or if this browser does not support\n    // graphics in a <canvas> element, then just return now.\n    if (arguments.length == 0 || !graph.getContext) return;\n\n    // Get the \"context\" object for the <canvas> that defines the drawing API\n    var g = graph.getContext(\"2d\"); // All drawing is done with this object\n    var width = graph.width, height = graph.height; // Get canvas size\n\n    // These functions convert payment numbers and dollar amounts to pixels\n    function paymentToX(n) { return n * width/payments; }\n    function amountToY(a) { return height-(a * height/(monthly*payments*1.05));}\n\n    // Payments are a straight line from (0,0) to (payments, monthly*payments)\n    g.moveTo(paymentToX(0), amountToY(0));         // Start at lower left\n    g.lineTo(paymentToX(payments),                 // Draw to upper right\n             amountToY(monthly*payments));\n    g.lineTo(paymentToX(payments), amountToY(0));  // Down to lower right\n    g.closePath();                                 // And back to start\n    g.fillStyle = \"#f88\";                          // Light red\n    g.fill();                                      // Fill the triangle\n    g.font = \"bold 12px sans-serif\";               // Define a font\n    g.fillText(\"Total Interest Payments\", 20,20);  // Draw text in legend\n\n    // Cumulative equity is non-linear and trickier to chart\n    var equity = 0;\n    g.beginPath();                                 // Begin a new shape\n    g.moveTo(paymentToX(0), amountToY(0));         // starting at lower-left\n    for(var p = 1; p <= payments; p++) {\n        // For each payment, figure out how much is interest\n        var thisMonthsInterest = (principal-equity)*interest;\n        equity += (monthly - thisMonthsInterest);  // The rest goes to equity\n        g.lineTo(paymentToX(p),amountToY(equity)); // Line to this point\n    }\n    g.lineTo(paymentToX(payments), amountToY(0));  // Line back to X axis\n    g.closePath();                                 // And back to start point\n    g.fillStyle = \"green\";                         // Now use green paint\n    g.fill();                                      // And fill area under curve\n    g.fillText(\"Total Equity\", 20,35);             // Label it in green\n\n    // Loop again, as above, but chart loan balance as a thick black line\n    var bal = principal;\n    g.beginPath();\n    g.moveTo(paymentToX(0),amountToY(bal));\n    for(var p = 1; p <= payments; p++) {\n        var thisMonthsInterest = bal*interest;\n        bal -= (monthly - thisMonthsInterest);     // The rest goes to equity\n        g.lineTo(paymentToX(p),amountToY(bal));    // Draw line to this point\n    }\n    g.lineWidth = 3;                               // Use a thick line\n    g.stroke();                                    // Draw the balance curve\n    g.fillStyle = \"black\";                         // Switch to black text\n    g.fillText(\"Loan Balance\", 20,50);             // Legend entry\n\n    // Now make yearly tick marks and year numbers on X axis\n    g.textAlign=\"center\";                          // Center text over ticks\n    var y = amountToY(0);                          // Y coordinate of X axis\n    for(var year=1; year*12 <= payments; year++) { // For each year\n        var x = paymentToX(year*12);               // Compute tick position\n        g.fillRect(x-0.5,y-3,1,3);                 // Draw the tick\n        if (year == 1) g.fillText(\"Year\", x, y-5); // Label the axis\n        if (year % 5 == 0 && year*12 !== payments) // Number every 5 years\n            g.fillText(String(year), x, y-5);\n    }\n\n    // Mark payment amounts along the right edge\n    g.textAlign = \"right\";                         // Right-justify text\n    g.textBaseline = \"middle\";                     // Center it vertically\n    var ticks = [monthly*payments, principal];     // The two points we'll mark\n    var rightEdge = paymentToX(payments);          // X coordinate of Y axis\n    for(var i = 0; i < ticks.length; i++) {        // For each of the 2 points\n        var y = amountToY(ticks[i]);               // Compute Y position of tick\n        g.fillRect(rightEdge-3, y-0.5, 3,1);       // Draw the tick mark\n        g.fillText(String(ticks[i].toFixed(0)),    // And label it.\n                   rightEdge-5, y);\n    }\n}\n"
}