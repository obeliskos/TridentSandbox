{
  "progName": "LokiJS QueryPerf",
  "htmlText": "<h3>\nLoki performance test\n</h3>\n\n<div style=\"width:1000px;height:400px\" id=\"chart1\">\n\n</div>",
  "scriptText": "// Recommended practice is to place variables in this object and then delete in cleanup\nvar sbv = {\n\tdb: new loki('Autos'),\n    samplecoll: null,\n    arraySize: 5000,\t\t// how large of a dataset to generate\n    totalIterations: 5000,\t// how many times we search it\n    results: [],\n    getIterations : 2000000,\n    plot1: null,\n    max: 0\n}\n\nfunction EVT_CleanSandbox()\n{\n\tif (sbv.plot1) sbv.plot1.destroy();\n    sbv.samplecoll = null;\n    delete sbv.samplecoll;\n    sbv.db = null;\n\tdelete sbv.db;\n    delete sbv.results;\n    sbv.plot1 = null;\n    delete sbv.plot1;\n    sbv = null;\n}\n\nfunction genRandomVal()\n{\n    var text = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n    for( var i=0; i < 20; i++ )\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return text;\n}\n\n// in addition to the loki id we will create a key of our own\n// (customId) which is number from 1- totalIterations\n// we will later perform find() queries against customId with and \n// without an index\nfunction initializeDB() {\n\tsbv.db = new loki('sample');\n  \n\tvar start, end, totalTime;\n    \n\tsbv.samplecoll = sbv.db.addCollection('samplecoll');\n    \n\tstart = performance.now();\n\n\tfor (var idx=0; idx < sbv.arraySize; idx++) {\n    \t//var v1 = genRandomVal();\n        //var v2 = genRandomVal();\n    \tsbv.samplecoll.insert({ \n\t\t\tcustomId: idx//, \n\t\t\t//val: v1, \n\t\t\t//val2: v2, \n\t\t\t//val3: \"more data 1234567890\"\n\t\t});\n    }\n    \n\tend = performance.now();\n    totalTime = end-start;\n    //API_LogMessage(\"totalTime (init) : \" + totalTime);\n    var rate = sbv.arraySize * 1000 / totalTime;\n\trate = rate.toFixed(2);\n    \n    sbv.results.push(rate);\n\n}\n\nfunction testperfGet() {\n\tvar start, end;\n\tvar totalTime = 0.0;\n\t\n\tfor (var idx=0; idx < sbv.getIterations; idx++) {\n    \tvar customidx = Math.floor(Math.random() * sbv.arraySize) + 1;\n        \n\t\tstart = performance.now();\n        var results = sbv.samplecoll.get(customidx);\n\t\tend = performance.now();\n\t\ttotalTime += (end-start);\n    }\n    \n    //API_LogMessage(\"totalTime (get) : \" + totalTime);\n\tvar rate = sbv.getIterations * 1000 / totalTime;\n\trate = rate.toFixed(2);\n\t//console.log(\"coll.get() : \" + totalMS + \"ms (\" + rate + \") ops/s\");\n    sbv.results.push(rate);\n}\n\nfunction testperfFind() {\n    var totalTime = 0.0, avgTime = 0.0;\n\tvar start, end;\n\n\tfor (var idx=0; idx < sbv.totalIterations; idx++) {\n    \tvar customidx = Math.floor(Math.random() * sbv.arraySize) + 1;\n        \n\t\tstart = performance.now();\n        var results = sbv.samplecoll.find({ 'customId': customidx });\n\t\tend = performance.now();\n        \n        totalTime += (end-start);\n    }\n    \n    var rate = sbv.totalIterations * 1000 / totalTime;\n\trate = rate.toFixed(2);\n    \n    sbv.results.push(rate);\n}\n\nfunction testperfRS(multiplier) {\n\tvar start, end;\n\tvar totalTime = 0.0;\n\n\tvar loopIterations = sbv.totalIterations;\n\tif (typeof(multiplier) != \"undefined\") {\n\t\tloopIterations = loopIterations * multiplier;\n\t}\n\t\n\tfor (var idx=0; idx < loopIterations; idx++) {\n    \tvar customidx = Math.floor(Math.random() * sbv.arraySize) + 1;\n        \n\t\tstart = performance.now();\n        var results = sbv.samplecoll.chain().find({ 'customId': customidx }).data();\n\t\tend = performance.now();\n        \n        totalTime += (end-start);\n    }\n    \n    API_LogMessage(\"totalTime (rs) : \" + totalTime);\n    \n\tvar rate = loopIterations * 1000 / totalTime;\n\trate = rate.toFixed(2);\n    sbv.results.push(rate);\n    \n\t//console.log(\"resultset chained find() :  \" + totalMS + \"ms (\" + rate + \" ops/s)\" + loopIterations + \" iterations\");\n}\n\nfunction testperfDV(multiplier) {\n\tvar start, end;\n\tvar start2, end2;\n\tvar totalTime = 0.0;\n\tvar totalTime2 = 0.0;\n\t//var totalMS = 0;\n\t//var totalMS2 = 0;\n    \n\tvar loopIterations = sbv.totalIterations;\n\tif (typeof(multiplier) != \"undefined\") {\n\t\tloopIterations = loopIterations * multiplier;\n\t}\n\t\n\tfor (var idx=0; idx < loopIterations; idx++) {\n    \tvar customidx = Math.floor(Math.random() * sbv.arraySize) + 1;\n       \n\t\tstart = performance.now();\n\t\tvar dv = sbv.samplecoll.addDynamicView(\"perfview\");\n        dv.applyFind({ 'customId': customidx });\n        var results = dv.data();\n\t\tend = performance.now();\n\t\ttotalTime += (end-start);\n      \n      \t// test speed of repeated query on an already set up dynamicview\n      \tstart2 = performance.now();\n        var results = dv.data();\n        end2 = performance.now();\n\t\ttotalTime2 += (end2-start2);\n        \n        sbv.samplecoll.removeDynamicView(\"perfview\");\n    }\n    \n\tvar rate = loopIterations * 1000 / totalTime;\n\tvar rate2 = loopIterations * 1000 / totalTime2;\n\trate = rate.toFixed(2);\n\trate2 = rate2.toFixed(2);\n\t\n    sbv.results.push(rate);\n    sbv.results.push(rate2);\n}\n\nfunction plotresults() {\n\t$.jqplot.config.enablePlugins = true;\n\tvar s1 = sbv.results;\n\tvar ticks = ['inserts', 'get', 'find no idx', 'resultset no idx', 'dv no idx', 'dv repeat', 'find w/idx', 'resultset w/idx', 'dv idx', 'dv rpt idx'];\n         \n\tif (sbv.plot1) { \n    \tsbv.plot1.destroy();\n        sbv.plot1 = null;\n    }\n    \n    var max = 0;\n    var flt = 0.0;\n    for (var idx=0; idx < s1.length; idx++) {\n    \tflt = parseFloat(s1[idx]);\n    \tif (flt > sbv.max) sbv.max = flt;\n    }\n    \n\tsbv.plot1 = $.jqplot('chart1', [s1], {\n\t\t// Only animate if we're not using excanvas (not in IE 7 or IE 8)..\n        title: 'Ops/sec rates for various loki database operations',\n\t\tanimate: !$.jqplot.use_excanvas,\n\t\tseriesDefaults:{\n\t\t\trenderer:$.jqplot.BarRenderer,\n\t\t\tpointLabels: { show: true }\n\t\t},\n\t\taxes: {\n\t\t\txaxis: {\n\t\t\t\trenderer: $.jqplot.CategoryAxisRenderer,\n                //pad: 2,\n\t\t\t\tticks: ticks\n\t\t\t},\n            yaxis: {\n            \tmin: 0,\n            \tmax: sbv.max*1.15,\n            \ttickOptions: {\n                \tformatString: \"%#.5f\"\n                }\n            }\n\t\t},\n\t\thighlighter: { show: true }\n\t});\n}\n\n\ninitializeDB();\n\ntestperfGet();\ntestperfFind();\ntestperfRS();\ntestperfDV();\nsbv.samplecoll.ensureBinaryIndex(\"customId\");\ntestperfFind();\ntestperfRS();\ntestperfDV();\nplotresults();"
}