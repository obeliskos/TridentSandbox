{
  "progName": "Daylight Graph",
  "htmlText": "<label style=\"color:#fff; font-size:24px; font-family:'Segoe UI'\">Daylight Graph</label>\n<label id=\"lblLatLong\" style=\"color:#aaa\">for Latitude Longitude</label>\n<style>\n    table.daystats {\n        font-family: \"Segoe UI\";\n        font-size: 14pt;\n    }\n</style>\n<table>\n    <tr>\n        <td>\n            <canvas id=\"dayChart\" width=\"400\" height=\"400\"></canvas>\n        </td>\n        <td>\n            <table class=\"daystats\">\n                <tr>\n                    <th style=\"width:160px\"></th>\n                    <th style=\"width:160px\">Daylight Hours</th>\n                    <th style=\"width:160px\">Nighttime Hours</th>\n                </tr>\n                <tr>\n                    <td>Summer Solstice</td>\n                    <td><span id=\"spnDayHoursSS\"></span></td>\n                    <td><span id=\"spnNightHoursSS\"></span></td>\n                </tr>\n                <tr style=\"font-weight:bold\">\n                    <td>Today</td>\n                    <td><span id=\"spnDayHoursT\"></span></td>\n                    <td><span id=\"spnNightHoursT\"></span></td>\n                </tr>\n                <tr>\n                    <td>Winter Solstice</td>\n                    <td><span id=\"spnDayHoursWS\"></span></td>\n                    <td><span id=\"spnNightHoursWS\"></span></td>\n                </tr>\n            </table>\n            <br/>\n            <span id=\"spnMoonPhase\"></span>\n        </td>\n    </tr>\n</table>\n<br/>\n<button class=\"minimal\" onclick=\"sbevGetLocation()\">Get Location</button>\n<button class=\"minimal\" onclick=\"sbevLogDetails()\">Log Details</button>",
  "scriptText": "(function() {\nsandbox.ui.setBackgroundColor(\"#444\");\n\nsandbox.events.clean = function()\n{\n    if (window.myDoughnut) {\n        window.myDoughnut.destroy();\n    }\n    \n    // clear established global handlers\n    window.sbevLogDetails = null;\n    window.sbevGetLocation = null;\n};\n\nvar ctx = document.getElementById(\"dayChart\").getContext(\"2d\");\n\nvar currDate = new Date(),\n    domElement = document.getElementById(\"output\"),\n    lat = 35.219713,\n    lng = -75.689781;\n\nfunction refreshStatistics() {\n    lat = document.getElementById(\"txtLat\").value;\n    lng = document.getElementById(\"txtLong\").value;\n\n    generateStatistics(currDate);\n}\n\nfunction getLocationSuccess(position) {\n    document.getElementById(\"txtLat\").value = position.coords.latitude;\n    document.getElementById(\"txtLong\").value = position.coords.longitude;\n\n    lat = position.coords.latitude;\n    lng = position.coords.longitude;\n\n    generateStatistics(currDate);\n}\n\nfunction addDate(unixDate, offset, offsetType) {\n    var oldDate = new Date();\n    oldDate.setTime(unixDate);\n    var year = parseInt(oldDate.getFullYear(), 10);\n    var month = parseInt(oldDate.getMonth(), 10);\n    var date = parseInt(oldDate.getDate(), 10);\n    var hour = parseInt(oldDate.getHours(), 10);\n    var mins = parseInt(oldDate.getMinutes(), 10);\n    var newDate;\n\n    switch (offsetType) {\n        case \"years\":\n        case \"Y\":\n        case \"y\":\n            newDate = new Date(year + offset, month, date, hour, mins);\n            break;\n        case \"months\":\n        case \"M\":\n        case \"m\":\n            newDate = new Date(year, month + offset, date, hour, mins);\n            break;\n        case \"days\":\n        case \"D\":\n        case \"d\":\n            newDate = new Date(year, month, date + offset, hour, mins);\n            break;\n        case \"weeks\":\n        case \"W\":\n        case \"w\":\n            newDate = new Date(year, month, date + offset*7, hour, mins);\n            break;\n        case \"hours\":\n        case \"H\":\n        case \"h\":\n            newDate = new Date(year, month, date, hour + offset, mins);\n            break;\n    }\n\n    return newDate.getTime();            \n} \n\nfunction dateDiff(datepart, fromdate, todate) {\n    datepart = datepart.toLowerCase();\n    var diff = todate - fromdate;\n    var divideBy = { w:604800000, \n                    d:86400000, \n                    h:3600000, \n                    n:60000, \n                    s:1000 };\n\n    return Math.floor( diff/divideBy[datepart]);\n}\n\nfunction getTime(date) {\n    var h = date.getHours(),\n        m = date.getMinutes(),\n        s = date.getSeconds(),\n        ap = (h>12)?\"PM\":\"AM\";\n\n    if (h>12) { h = h - 12; }\n    if (h<10) { h = '0' + h; }\n    if (m<10) { m = '0' + m; }\n    if (s<10) { s = '0' + s; }\n\n    return (h + \":\" + m + \":\" + s + \" \" + ap);\n}\n\nfunction generateStatistics(date) {\n    if (window.myDoughnut) {\n        window.myDoughnut.destroy();\n    }\n    $(\"#lblLatLong\").text(\"for lat : \" + lat + \", long : \" + lng);\n    \n    var sunPos = SunCalc.getPosition(date, lat, lng);\n    var times = SunCalc.getTimes(date, lat, lng);\n    //var moonPos = SunCalc.getMoonPosition(date, lat, lng);\n    var moonIllum = SunCalc.getMoonIllumination(date);\n    //var moonTimes = SunCalc.getMoonTimes(new Date('2013-03-04UTC'), lat, lng, true);\n\n    if (moonIllum.phase < 0.08) {\n        $(\"#spnMoonPhase\").text(\"Moon Phase : New moon\");\n    }\n    else if (moonIllum.phase < 0.21) {\n        $(\"#spnMoonPhase\").text(\"Moon Phase : Waxing crecent\");\n    }\n    else if (moonIllum.phase < 0.35) {\n        $(\"#spnMoonPhase\").text(\"Moon Phase : First quarter\");\n    }\n    else if (moonIllum.phase < 0.44) {\n        $(\"#spnMoonPhase\").text(\"Moon Phase : Waxing gibbous\");\n    }\n    else if (moonIllum.phase < 0.56) {\n        $(\"#spnMoonPhase\").text(\"Moon Phase : Full\");\n    }\n    else if (moonIllum.phase < 0.69) {\n        $(\"#spnMoonPhase\").text(\"Moon Phase : Waning gibbous\");\n    }\n    else if (moonIllum.phase < 0.82) {\n        $(\"#spnMoonPhase\").text(\"Moon Phase : Waning crecent\");\n    }\n    else if (moonIllum.phase < 0.94) {\n       $(\"#spnMoonPhase\").text(\"Moon Phase : New\");\n    }\n    getSolstices();\n}\n\n// converts the 'times' of day periods to lengths :\n// \"nadir approach\" : nadir -> nautical dawn\n// \"nauticaldawn\" : nautical dawn -> dawn\n// \"dawn\" : dawn -> goldenHourEnd\n// \"day\" : goldenHourEnd -> goldenHour\n// \"dusk\" : goldenHour -> dusk\n// \"nadir recede\" : dusk -> nadir\nfunction getPeriodLengths(sunTimes) {\n    // we will use tonight's nadir as estimate for last nights nadir\n    var nadir1 = sunTimes.nadir;\n    var nadir2 = sunTimes.nadir;\n    if (sunTimes.nadir < sunTimes.dawn) {\n        nadir2 = addDate(sunTimes.nadir.getTime(), 1, \"d\");\n    }\n    else {\n        nadir1 = addDate(sunTimes.nadir.getTime(), -1, \"d\");\n    }\n\n    return {\n        nadirMorning : dateDiff(\"n\", new Date(nadir1), sunTimes.nauticalDawn),\n        nauticalDawn: dateDiff(\"n\", sunTimes.nauticalDawn, sunTimes.dawn),\n        dawn: dateDiff(\"n\", sunTimes.dawn, sunTimes.goldenHourEnd),\n        day: dateDiff(\"n\", sunTimes.goldenHourEnd, sunTimes.goldenHour),\n        dusk: dateDiff(\"n\", sunTimes.goldenHour, sunTimes.dusk),\n        nauticalDusk: dateDiff(\"n\", sunTimes.dusk, sunTimes.nauticalDusk),\n        nadirEvening: dateDiff(\"n\", sunTimes.nauticalDusk, new Date(nadir2))\n    };\n}\n\nfunction getSolstices() {\n    var dailyStats = [];\n    var now = new Date().getTime();\n    var start = addDate(now, -6, \"m\");\n    var end = addDate(now, 6, \"m\");\n\n    var times, dayLength, dayStats;\n    var wsTimes, ssTimes, tTimes = SunCalc.getTimes(new Date(now), lat, lng);\n\n    var minLength = 9999, minDate = now, idxLength;\n    var maxLength = 0, maxDate = now;\n\n    for (var d = start; d <= end; d = addDate(d, 1, \"d\")) {\n        times = SunCalc.getTimes(d, lat, lng);\n\n        // calculate number of minutes in iterative day\n        idxLength = dateDiff( \"n\", times.dawn, times.dusk);\n\n        if (idxLength < minLength) {\n            minLength = idxLength;\n            minDate = new Date(d);\n        }\n\n        if (idxLength > maxLength) {\n            maxLength = idxLength;\n            maxDate = new Date(d);\n        }\n    }\n\n    wsTimes = SunCalc.getTimes(minDate, lat, lng);\n    ssTimes = SunCalc.getTimes(maxDate, lat, lng);\n\n    var wsPeriods = getPeriodLengths(wsTimes);\n    var ssPeriods = getPeriodLengths(ssTimes);\n    var tPeriods = getPeriodLengths(tTimes);\n\n    document.getElementById(\"spnDayHoursSS\").innerHTML = ((ssPeriods.day + ssPeriods.dawn + ssPeriods.dusk) / 60).toFixed(2);\n    document.getElementById(\"spnNightHoursSS\").innerHTML = ((ssPeriods.nadirEvening + ssPeriods.nadirMorning + ssPeriods.nauticalDusk + ssPeriods.nauticalDawn) / 60).toFixed(2);\n    document.getElementById(\"spnDayHoursT\").innerHTML = ((tPeriods.day + tPeriods.dawn + tPeriods.dusk) / 60).toFixed(2);\n    document.getElementById(\"spnNightHoursT\").innerHTML = ((tPeriods.nadirEvening + tPeriods.nadirMorning + tPeriods.nauticalDusk + tPeriods.nauticalDawn) / 60).toFixed(2);\n    document.getElementById(\"spnDayHoursWS\").innerHTML = ((wsPeriods.day + wsPeriods.dawn + wsPeriods.dusk) / 60).toFixed(2);\n    document.getElementById(\"spnNightHoursWS\").innerHTML = ((wsPeriods.nadirEvening + wsPeriods.nadirMorning + wsPeriods.nauticalDusk + wsPeriods.nauticalDawn) / 60).toFixed(2);\n\n    Chart.defaults.global.defaultFontColor = \"#fff\";\n    var config = {\n        type: 'doughnut',\n        data: {\n            datasets: [{\n                data: [\n                    ssPeriods.nadirMorning/60,\n                    ssPeriods.nauticalDawn/60,\n                    ssPeriods.dawn/60,\n                    ssPeriods.day/60,\n                    ssPeriods.dusk/60,\n                    ssPeriods.nauticalDusk/60,\n                    ssPeriods.nadirEvening/60\n                ],\n                backgroundColor: [\n                    \"#222244\",\n                    \"#8888aa\",\n                    \"#FDB45C\",\n                    \"#FFFF66\",\n                    \"#FDB45C\",\n                    \"#aa8888\",\n                    \"#222244\"\n                ],\n                label: 'Summer Solstice'\n            }, {\n                hidden: false,\n                data: [\n                    tPeriods.nadirMorning/60,\n                    tPeriods.nauticalDawn/60,\n                    tPeriods.dawn/60,\n                    tPeriods.day/60,\n                    tPeriods.dusk/60,\n                    tPeriods.nauticalDusk/60,\n                    tPeriods.nadirEvening/60\n                ],\n                backgroundColor: [\n                    \"#222244\",\n                    \"#8888aa\",\n                    \"#FDB45C\",\n                    \"#FFFF66\",\n                    \"#FDB45C\",\n                    \"#aa8888\",\n                    \"#222244\"\n                ],\n                label: 'Todays'\n            }, {\n                data: [\n                    wsPeriods.nadirMorning/60,\n                    wsPeriods.nauticalDawn/60,\n                    wsPeriods.dawn/60,\n                    wsPeriods.day/60,\n                    wsPeriods.dusk/60,\n                    wsPeriods.nauticalDusk/60,\n                    wsPeriods.nadirEvening/60\n                ],\n                backgroundColor: [\n                    \"#222244\",\n                    \"#8888aa\",\n                    \"#FDB45C\",\n                    \"#FFFF66\",\n                    \"#FDB45C\",\n                    \"#aa8888\",\n                    \"#222244\"\n                ],\n                label: 'Winter Solstice'\n            }],\n            labels: [\n                \"Nadir Morning\",\n                \"Nautical Dawn\",\n                \"Dawn\",\n                \"Day\",\n                \"Dusk\",\n                \"Nautical Dusk\",\n                \"Evening Nadir\"\n            ]\n        },\n        options: {\n            rotation: Math.PI * -1.5,\n            responsive: false,\n            legend: {\n                position: 'top'\n            },\n            title: {\n                display: true,\n                text: 'Daily division relative to Soltices'\n            }\n        }\n    };\n\n    window.myDoughnut = new Chart(ctx, config);      \n}\n\n// global event handler, so needs to be off window\nwindow.sbevLogDetails = function() {\n    sandbox.logger.console.clearScreen();\n    \n    var sunTimes = SunCalc.getTimes(new Date(), lat, lng);\n    sandbox.logger.log(\"Sun Times : \");\n    sandbox.logger.log(\"Sunrise : \" + getTime(sunTimes.sunrise));    \n    sandbox.logger.log(\"Sunset : \" + getTime(sunTimes.sunset));\n    sandbox.logger.log(\"SolarNoon : \" + getTime(sunTimes.solarNoon));\n    sandbox.logger.log(\"Nadir : \" + getTime(sunTimes.nadir));\n    sandbox.logger.log(\"dawn : \" + getTime(sunTimes.dawn));\n    sandbox.logger.log(\"dusk : \" + getTime(sunTimes.dusk));\n    sandbox.logger.log(\"nauticalDawn : \" + getTime(sunTimes.nauticalDawn));\n    sandbox.logger.log(\"nauticalDusk : \" + getTime(sunTimes.nauticalDusk));\n    sandbox.logger.log(\"goldenHour : \" + getTime(sunTimes.goldenHour));\n    sandbox.logger.log(\"goldenHourEnd : \" + getTime(sunTimes.goldenHourEnd));\n    sandbox.logger.log(\"day length : \" + dateDiff( \"n\", sunTimes.dawn, sunTimes.dusk) + \" minutes\");\n    \n    sandbox.logger.log(\"\\r\\n\");\n    sandbox.logger.log(\"Moon Info :\");\n    var moonIllum = SunCalc.getMoonIllumination(new Date());\n    if (moonIllum.phase < 0.08) {\n        sandbox.logger.log(\"Moon Phase : new moon\");\n    }\n    else if (moonIllum.phase < 0.21) {\n        sandbox.logger.log(\"Moon Phase : waxing crecent\");\n    }\n    else if (moonIllum.phase < 0.35) {\n        sandbox.logger.log(\"Moon Phase : first quarter\");\n    }\n    else if (moonIllum.phase < 0.44) {\n        sandbox.logger.log(\"Moon Phase : waxing gibbous\");\n    }\n    else if (moonIllum.phase < 0.56) {\n        sandbox.logger.log(\"Moon Phase : full\");\n    }\n    else if (moonIllum.phase < 0.69) {\n        sandbox.logger.log(\"Moon Phase : waning gibbous\");\n    }\n    else if (moonIllum.phase < 0.82) {\n        sandbox.logger.log(\"Moon Phase : waning crecent\");\n    }\n    else if (moonIllum.phase < 0.94) {\n       sandbox.logger.log(\"Moon Phase : new\");\n    }\n    sandbox.logger.log(\"fraction : \" + moonIllum.fraction);\n    sandbox.logger.log(\"phase : \" + moonIllum.phase);\n    sandbox.logger.log(\"angle : \" + moonIllum.angle);\n\n}\n\n// global event handler, so needs to be off window\nwindow.sbevGetLocation = function() {\n    if (navigator.geolocation)\n    {\n        navigator.geolocation.getCurrentPosition(function(position) {\n            lat = position.coords.latitude;\n            long = position.coords.longitude;\n            localStorage[\"daylightGraphLat\"] = lat;\n            localStorage[\"daylightGraphLong\"] = long;\n            generateStatistics(new Date());\n        });\n    }\n    else\n    {\n        sandbox.logger.notifyError(\"Geolocation is not supported by this browser.\");\n    }\n};\n\n\nvar daylightGraphLat = localStorage[\"daylightGraphLat\"];\nvar daylightGraphLong = localStorage[\"daylightGraphLong\"];\n\nif (daylightGraphLat && daylightGraphLong) {\n    lat = daylightGraphLat;\n    long = daylightGraphLong;\n    generateStatistics(new Date());\n}\nelse {\n    generateStatistics(new Date());\n}\n})();"
}