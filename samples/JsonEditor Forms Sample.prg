{
  "progName": "JsonEditor Forms Sample",
  "htmlText": "<h3>Json-Editor Sample</h3>\n\n<p>This sample demonstrates using the <a href=\"https://github.com/jdorn/json-editor\" target=\"_blank\">jsoneditor.js</a> library \nto create interesting dynamic forms for creating json objects.  The data can be structured \nhierarchically with lookups, validation, etc.  You can even define new properties at runtime \nand preview the JSON.</p>\n\n<div id='editor_holder'></div>\n<br/>\n<button class=\"minimal\" onclick=\"API_Inspect(sbv.editor.getValue());\">Get Obj</button>\n<button class=\"minimal\" onclick=\"setTestObject()\">Set Obj</button>",
  "scriptText": "// linter errors seem necessary because json-editor requires those names in the JSON.\n// should not be issue since they are within JSON object and not in main javascript?\n\nvar sbv = {\n    editor : null\n};\n\nsandbox.events.clean = function() {\n    sbv.editor.destroy();\n    sbv = null;\n};\n\n// Here we can specify how we want our form/json entity to be defined\n// We are basically describing how we want the output json object to structured\n// As well as the form that generates those json objects\n// This gets really interesting with 'array' schema types like service history \nsbv.editor = new JSONEditor(document.getElementById('editor_holder'),{\n    iconlib: \"fontawesome4\",\n    //theme: 'jqueryui',    jqueryui render looks kind of ugly so just use default\n    schema: {\n        type: \"object\",\n        title: \"Car\",\n        properties: {\n            make: {\n                type: \"string\",\n                enum: [\n                    \"Toyota\",\n                    \"BMW\",\n                    \"Honda\",\n                    \"Ford\",\n                    \"Chevy\",\n                    \"VW\"\n                ]\n            },\n            model: {\n                type: \"string\"\n            },\n            year: {\n                type: \"integer\",\n                enum: [\n                    1995,1996,1997,1998,1999,\n                    2000,2001,2002,2003,2004,\n                    2005,2006,2007,2008,2009,\n                    2010,2011,2012,2013,2014\n                ],\n                default: 2008\n            },\n            serviceHistory: {\n                type: \"array\",\n                format: \"table\",\n                title: \"Service History\",\n                uniqueItems: true,\n                items : {\n                    type: \"object\",\n                    properties: {\n                        \"Service Type\": {\n                            type: \"string\",\n                            enum: [\"Oil Change\", \"Repair\", \"Checkup\", \"Warranty\"],\n                            default: \"Oil Change\"\n                        },\n                        \"Service Date\": {\n                            type: \"string\",\n                            // depends on browser supporting html input types, \n                            // ie 10/11 doesn't support so its up to you to enter date\n                            format: \"date\"\t\n                        }\n                    }\n                }\n            }\n        }\n    }\n});\n\nfunction setTestObject() {\n    var obj = {\n        make: 'BMW', \n        model:'M5', \n        year: 2010, \n        serviceHistory: [ \n            { 'Service Type': 'Repair', 'Service Date': '5/1/12' }, \n            { 'Service Type': 'Oil Change', 'Service Date': '9/1/12' } \n        ]\n    };\n\n    sbv.editor.setValue(obj);\n}\n"
}