{
  "progName": "Hosted Files Database",
  "htmlText": "<ul class=\"tnavlist\">\n<li class=\"tnavli\"><a class=\"tnava\" onclick=\"showDiv(1);\" href=\"javascript:void(0)\"><i class=\"fa fa-home\"></i> Home</a></li>\n<li class=\"tnavli\"><a class=\"tnava\" onclick=\"showDiv(2);\" href=\"javascript:void(0)\"><i class=\"fa fa-info-circle\"></i> About</a></li>\n</ul>\n\n<div id=\"divMain\">\n\t<h3>Hosted File Database</h3>\n\n\tPick file(s) from local filesystem to import to TridentDB : \n\t<input style='height:30px;width:200px;' id='customFile' type=\"file\" name=\"customFile\" onchange=\"custom_load()\" multiple />\n\t<br/><br/>\n\t<br/>\n    Files stored in the TridentDB with app name of 'TridentFiles' : <br/>\n\t<select size=8 id=\"selFiles\" style=\"width:600px\"></select><br/><br/>\n\t<button class=\"minimal\" onclick=\"deleteFile()\">Delete</button> \n\t<button class=\"minimal\" onclick=\"downloadFile()\">Download</button> \n</div>\n\n<div id=\"divAbout\" style=\"display:none\">\n\t<h3>\n    About Hosted Files Database\n    </h3>\n    \n    <p>\n    This Utility allows you to 'upload' files into the TridentDB.&nbsp;  Your files are not \n    going to any server, they are being stored into the TridentDB which is an indexedDB \n    database stored in your browser's sandbox storage.&nbsp;  You have a limited amount of \n    this sandboxed storage.&nbsp;  For Internet Explorer 10/11 it is probably about 120megs.&nbsp;  \n    To monitor the amount of storage used, you can use the 'Storage Summary' function \n    of Trident Sandbox to guage how much sandbox storage space you have used/left.\n    </p>\n    \n    <p>\n    You can use this utility to store whatever files you want, but it is intended for \n    storing images or other media within your websites.&nbsp; The files are stored as \n    DataUrls (base64 encoded with mime type header) and you can use these dataurls in \n    place of an internet url.&nbsp; It's like a hyperlink to hardcoded/embedded/inline file. \n    For example you can retrieve a file from the trident db \n    as a data url string and set the 'src' property of an IMG tag to that string and it \n    will display the image.&nbsp; The same could apply to an html 5 video or audio tag \n    with mp3's or AVIs.&nbsp; This allows hosted/appcached environments to add media to their \n    pages.\n    </p>\n</div>",
  "scriptText": "// This program lets you import files from your local filesystem into the \n// TridentDB (for hosted/appcached environments only). We are storing them  \n// with an app name of 'TridentFiles' and for the key we use the filename\n// We can then get these files (as a dataurl) and use them within any of our programs.\n// DataURL is base64 encoded which adds overhead, so monitor consumption within\n// the 'Storage Summary' feature of Trident Sandbox.\n// This is intended mainly for images but the dataurl adds the mime type into the \n// encoding so you can determine exactly what type of file it contains by either\n// the filename (key) or the dataurl itself (starting bytes of val)\n\nfunction showDiv(divId) {\n\t$(\"#divMain\").hide();\n    $(\"#divAbout\").hide();\n    \n\tswitch (divId) {\n    \tcase 1 : $(\"#divMain\").show(); break;\n        case 2 : $(\"#divAbout\").show(); break;\n    }\n}\n\nfunction custom_load()\n{\n\tvar pickedFiles = $(\"#customFile\")[0].files;\n    \n\tfor(i=0; i<pickedFiles.length; i++) {\n\t\tvar pfile = pickedFiles[i];//document.getElementById('customFile').files[0];\n        \n\t\tvar reader = new FileReader();\n       \treader.onload = (function(loadedFile) {\n        \tvar loadedName = loadedFile.name;\n            return function(evt) {\n        \t\tAPI_SetIndexedAppKey(\"TridentFiles\", loadedName, evt.target.result);\n                setTimeout(function () { retrieveAllHostedFiles() }, 250);\n            };\n        })(pfile);\n        \n\t\treader.onerror = function(evt) {\n\t\t\talertify.error(\"error\");\n       \t};\n\n\t\treader.readAsDataURL(pfile, \"UTF-8\");\n\n\t}\n}\n\nfunction retrieveAllHostedFiles()\n{\n\t$(\"#selFiles\").html(\"\");\n    \n  \t// The anonymous function callback is called once per row returned \n\tAPI_GetIndexedAppCursor('TridentFiles', function(e) {\n\t  \tvar cursor = e.target.result;\n      \n\t\tif(cursor) {\n          \tvar currObject = cursor.value;\n          \n\t\t\t$('#selFiles').append($('<option>', {\n    \t\t\tvalue: currObject.id,\n    \t\t\ttext: currObject.key\n\t\t\t}));          \n          \n            cursor.continue();\n\t\t}\n\t});\n}\n\nfunction deleteFile() {\n\tvar filename = $(\"#selFiles option:selected\").text();\n   \tvar fileId = $(\"#selFiles option:selected\").val();\n\n\t// confirm object deletion\n\talertify.confirm(\"Are you sure you want to delete \" + filename, function (e) {\n    \t\tif (e) {\n        \t\t// user clicked \"ok\"\n              \tAPI_DelIndexedAppKey(parseInt(fileId));\n              \n              \tsetTimeout(function () { retrieveAllHostedFiles() }, 250);\n    \t\t}\n\t});\n}\n\nfunction downloadFile() {\n\tvar objId = $(\"#selFiles option:selected\").val();\n\n\t// user clicked \"ok\"\n\tAPI_GetIndexedAppKeyById(parseInt(objId), function(e) {\n\t\tvar res = e.target.result;\n\n\t\tvar fileName = res.key.replace(\"TridentFiles;\", \"\");\n\t\tvar dataURL = res.val;\n\t\tAPI_SaveDataURL(fileName, dataURL);\n\t});\n}\n\nretrieveAllHostedFiles();\n\n// Here is how you might retrieve and use an image uploaded by the above method \n\n//API_GetIndexedAppKey(\"TridentFiles\", \"myimage.jpg\", function(e) {\n//\tvar img = new Image;\n//\timg.src = e.target.result.val;\t// e.target.result is trident db obj\n//\tdocument.getElementById('UI_MainPlaceholder').appendChild(img);     \n//});\n"
}