{
  "progName": "Canvas Tiles",
  "htmlText": "<h3>Html 5 Canvas Random Tiles Generation</h3>\n\nLoad Existing Image (will crop if larger) : \n<input style='height:30px;width:400px;' id='customFile' type=\"file\" name=\"customFile\" onchange=\"custom_load()\" />\n<br/><br/>\n<button style=\"height:40px\" onclick=\"paint()\">Paint</button>\n<button style=\"height:40px\" onclick=\"point()\">Point</button>\n<button style=\"height:40px\" onclick=\"savePicture()\">Save Picture</button>\n<br/>\n\n<!-- NOTE: make sure you set height and width directory not in style -->\n<CANVAS id=\"canvas\" height='400px' width='512px' ></CANVAS>\n",
  "scriptText": "// This is a sample i am making to learn alternate binary data I/O techniques\n// This particular demo demonstrates saving raw binary data as is nicely provided by\n// the html 5 canvas object.  Reading of that data is done using the \n// FileReaders' readAsDataURL() method which gives a base64 encoded string which\n// the Image (IMG) object nicely accepts.  The canvas then nicely accepts our painting\n// of that image with its 2d context's drawImage() method.\n\n// set up global stub object to load our global variables into.\nvar sandboxVars = {\n  canvas : document.getElementById(\"canvas\"),\n  ctx : canvas.getContext(\"2d\")\n}\n\n// implement a cleanup callback function to release global variables\nfunction EVT_CleanSandbox() {\n\tdelete sandboxVars.canvas;\n  \tdelete sandboxVars.ctx;\n}\n\npaint();\n\nfunction paint() {\n\tfor (x=0; x<32; x++) {\n  \t\tfor(y=0; y<25; y++) {\n\t\t\tsandboxVars.ctx.fillStyle = getRandomColor();\n          \n\t\t\tsandboxVars.ctx.fillRect(x*16,y*16,16,16);\n\t  \t}\n\t}\n}\n\nfunction point() {\n\tvar x = Math.round(Math.random() * 32);\n  \tvar y = Math.round(Math.random() * 25);\n\n\tsandboxVars.ctx.fillStyle = getRandomColor();\n\tsandboxVars.ctx.fillRect(x*16,y*16,16,16);\n}\n\nfunction custom_load()\n{\n\t\tvar file = document.getElementById('customFile').files[0];\n\t\tif(file) {\n\t\t\tvar reader = new FileReader();\n\n\t\t\treader.readAsDataURL(file, \"UTF-8\");\n\n          \treader.onload = function(evt) {\n                // Make an image from data url sent\n              \tvar img = new Image;\n\t\t\t\timg.src = evt.target.result;\n              \n              \t// take image and draw to canvas, if image is larger it will be cropped\n               \tsandboxVars.ctx.drawImage(img, 0, 0);\n              \n               \talertify.success(\"loaded\");\n              \n              \t// hack to clear out file control in case we save to that same file later\n              \t// so that there wont be a lock on that file.\n              \t// This is possibly not needed and possibly browser specific\n             \t// But this seems to help elsewhere so i will add here.\n          \t\tvar cfControl = $(\"#customFile\");\n          \t\tcfControl.replaceWith( cfControl = cfControl.clone( true ) );\n          \t};\n          \treader.onerror = function(evt) {\n\t\t\t\talertify.error(\"error\");\n          \t};\n\t\t}\n}\n\nfunction savePicture()\n{\n \t// canvas nicely supports multiple methods of exporting its data\n\t// we will use msToBlob to easily save this data with msSaveBlob\n\tvar blob1 = sandboxVars.canvas.msToBlob();\n\twindow.navigator.msSaveBlob(blob1, \"canvastiles.png\");\n}\n\nfunction getRandomColor() {\n    var letters = '0123456789ABCDEF'.split('');\n    var color = '#';\n    for (var i = 0; i < 6; i++ ) {\n        color += letters[Math.round(Math.random() * 15)];\n    }\n    return color;\n}"
}