{
  "progName": "Proper Cleanup Method",
  "htmlText": "<h3>Sandbox Cleanup Method Demo</h3>\n\n<p>If you are just working with a single program you might not need to worry about this at first, \n    but I am coding many programs and want it to be resilient as I load/unload many different PRG files. \n</p>\n\n<p>\n    <b><u>Variables</u></b> created outside of a function (global variables) are not removed after the sandbox \n    is cleared out.  They are attached to the global window object... so they linger until you \n    reload the Trident Sandbox webpage.\n</p>\n<p>\n    <b><u>Functions and timers</u></b> similarly attach to the global window object and might need to be cleaned up.\n</p>\n\n<p>One way to avoid pollution is to : \n</p>\n<ul>\n    <li>Create a stub global app variable object (see script). That object \n    can't be deleted either but its contents can.</li>\n    <li>Implement and attach callback function to <b>sandbox.events.clean</b></li>\n    <li>Within your clean callback, you can delete variables from your global object, release timers, etc.</li>\n</ul>\n\nTrident Sandbox will call a registered clean callback \n<ul>\n    <li>Between each program 'Run'</li>\n    <li>Before it unloads your program (for instance if you press the 'New' toolbar button</li>\n    <li>You load another program</li>\n</ul>\n",
  "scriptText": "// Create a stub global variable we can easily cleanup later\n// Its name can be anything but we will use a convention of calling it 'sandboxVars'\nvar mySandboxApp = {\n    myName : 'Testuser',\n    myNum : 2,\n\n    // We can even wrap our programs functions into our stub app object\n    // Functions exhibit similar in that they get added to the window object\n    // Although they probably wont interfere with other programs if they still use some\n    // memory so you might want to clear them out or null them\n    SayHello : function(name, count) {\n        for (i=0;i<count; i++) {\n            alertify.log(name + i);\n        }\n    }\n};\n\n// Here, we can register an optional clean function to be run before the ide clears out our\n// program.  You can implement this callback to release variables, functions, timers etc.\nsandbox.events.clean = function() {\n    delete mySandboxApp.myName;\n    delete mySandboxApp.myNum;\n\n    delete mySandboxApp.SayHello;\n};\n\nmySandboxApp.SayHello(mySandboxApp.myName, mySandboxApp.myNum);\n"
}