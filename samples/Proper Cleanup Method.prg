{
  "progName": "Proper Cleanup Method",
  "htmlText": "<h3>Sandbox Cleanup Method Demo</h3>\n\n<p>This is a demo created after the discovery that certain variables not being cleared out. \n  This was causing one program to affect another program even after the sandbox was 'cleaned out'.\n</p>\n\n<p>If you are just working with a single program you might not need to worry about this at first, \n  but I am coding many programs and want it to be resilient as I load/unload many different PRG files. \n</p>\n\n<p>Variables created outside of a function (global variables) are not removed after the sandbox \n  is cleared out.  They are attached to the global window object... so they linger until you \n  reload the Trident Sandbox webpage.  This became very apparent with variables such as \n  'canvas' and 'ctx'.  Possibly the html canvas they \nwere referencing was not being unloaded.  Either way a bunch of global variables were just \naccumulating and depending on how much memory a program puts into global variables, this could \ncause memory leaks, reference conflicts, etc.</p>\n\n<p>The simplest conflict resolution solution would be to make sure all global variables are \n  named uniquely.  This is good enough at first but not ideal for preventing memory leaks.</p>\n\n<p>Here is how I \n  will support the ability for your programs to mitigate these issues :</p>\n\n<p>Create a stub global variable... this format is JSON object notation (see script).  You \n  can uniquely name this, use your own name, or use a common 'sandboxVars' name. That object \n  can't be deleted either but its contents can.  So within that stub variable you can create \n  your variables/object references etc.  To fulfill the cleanup process you will implement \n  a callback function EVT_CleanSandbox() where you will delete the variables within that \n  stub variable (or at least the ones which may conflict or consume alot of memory). You \n  might also release timers, stop animation loops, etc. \nTrident Sandbox will then call your cleanup function between each program 'Run', before it \n  unloads your program (for instance if you press the 'New' toolbar button or open another \n  program.</p>",
  "scriptText": "// Create a stub global variable we can easily cleanup later\n// Its name can be anything but we will use a convention of calling it 'sandboxVars'\nvar sandboxApp = {\n  myName : 'Testuser',\n  myNum : 2,\n  \n  // We can even wrap our programs functions into our stub app object\n  // Functions exhibit similar in that they get added to the window object\n  // Although they probably wont interfere with other programs if they still use some\n  // memory so you might want to clear them out or null them\n  SayHello : function(name, count) {\n  \tfor (i=0;i<count; i++) {\n    \talertify.log(name);\n    }\n  }\n}\n\n// Although we dont call this function ourselves, it will be called by \n// Trident Sandbox when it cleans out the sandbox.  You are not required to \n// implement this callback but it should be used if you retain global variables\n// which may conflict with other programs or consume alot of memory\nfunction EVT_CleanSandbox()\n{\n   // If these variables were references to UI elements or consumed alot of memory\n   // then this cleanup would be important, you probably dont need to worry about it\n   // for simple vars such as below, but this is the process and its good practice.\n   delete sandboxApp.myName;\n   delete sandboxApp.myNum;\n   \n   delete sandboxApp.SayHello;\n}\n\nsandboxApp.SayHello(sandboxApp.myName, sandboxApp.myNum);\n"
}