{
  "progName": "JSONDatabank-WJS",
  "htmlText": "<style>\n    a.wjslink {\n        color: rgba(156, 114, 255, 0.67);\n    }\n    a.wjslink:hover {\n        color: rgba(156, 114, 255, 0.97);\n    }\n    .fullScreen {\n        width: 100%;\n        height: 100%;\n        position: absolute;\n        top: 0;\n        left: 0;\n    }\n\n    input[type='date'] {\n        background-color: rgba(255, 255, 255, 0.8);\n        border-color: transparent;\n        color: #000;\n        min-height: 28px;\n        min-width: 64px;\n        -ms-user-select: element;\n        font-family: \"Segoe UI\", \"Segoe WP\", \"sans-serif\", \"Segoe UI Symbol\", \"Symbols\";\n        font-size: 15px;\n        font-weight: 400;\n        line-height: 1.333;\n    }\n    input[type='date']:hover {\n        background-color: rgba(255, 255, 255, 0.87);\n    }\n    input[type='date']:focus {\n        background-color: #fff;\n    }\n\n    /*width of each section*/\n    .section1.win-hub-section {\n        width: 1200px;\n        overflow: hidden;\n        /*    background-color:#565; */\n    }\n\n    .section2.win-hub-section {\n        width: 1300px; \n        /*    background-color:#454; */\n    }\n\n    .section3.win-hub-section {\n        width: 800px;\n    }\n\n    .section4.win-hub-section {\n        width: 650px;\n        /*    background-color:#232; */\n    }\n\n    #insertListView {\n        height: 100%;\n    }\n\n    .horizontallistview {\n        height: 100%;\n    }\n\n\n    /*ListView style inside section container*/\n    #listView.win-listview {\n        height: calc(100% - 150px);\n        width: 100%;\n    }\n\n\n    #listView.win-listview .win-container {\n        width: 242px;\n        height: 60px;\n    }\n\n\n    /*styles for video in section 3*/\n    .promoVideo {\n        height: 330px;\n        width: 400px;\n    }\n\n    /*App Header Styles*/\n    #appHeader {\n        position: absolute;\n        z-index: 1;\n        top: 50px;\n        left: 40px;\n    }\n\n    #appHeader .win-navigation-backbutton {\n        margin-right: 20px;\n    }\n\n    #appHeader h1 {\n        display: inline;\n    }\n\n    /* if window height is less than 800 then make header area smaller */\n    @media all and (max-height: 800px) {\n        .win-hub-section-header {\n            margin-top:60px !important;\n        }\n    }\n\n    /*styles when app is in the portrait mode*/\n    @media all and (min-height: 1280px) {\n        .section2.win-hub-section {\n            overflow: hidden;\n        }\n\n        /*change the width of the form control to cover only one input box*/\n        .section4.win-hub-section {\n        }\n\n    }\n\n    /*styles for larger screens*/\n    @media (min-width: 1920px) {\n        .section2.win-hub-section {\n            overflow: hidden;\n        }\n\n        /*change the width of the form control to cover only one input box*/\n        .section4.win-hub-section {\n        }\n\n    }\n\n</style>\n\n<div id=\"divMainFS\" class=\"fullScreen\" style=\"display:none\" >\n    <!-- Flyouts -->\n    <div id=\"addLookupFlyout\" data-win-control=\"WinJS.UI.Flyout\" aria-label=\"{Add lookup flyout}\">\n        <div>Enter name of new lookup<br/>\n            <input type='text' id=\"txtAddLookupName\">\n        </div>\n        <button id=\"btnAddLookupAction\" onclick=\"doAddLookup()\">Add</button>\n    </div>\n\n    <div id=\"editLookupFlyout\" data-win-control=\"WinJS.UI.Flyout\" aria-label=\"{Edit lookup flyout}\">\n        <div>Edit name of lookup<br/>\n            <input type='text' id=\"txtEditLookupName\">\n        </div>\n        <button id=\"btnEditLookupAction\" onclick=\"doEditLookup()\">Update</button>\n    </div>\n\n    <div id=\"deleteLookupFlyout\" data-win-control=\"WinJS.UI.Flyout\" aria-label=\"{Delete lookup flyout}\">\n        <div>Delete lookup?<br/><br/></div>\n        <button id=\"btnDeleteLookupAction\" onclick=\"doDeleteLookup()\">Confirm</button>\n    </div>\n\n    <div id=\"addLookupValueFlyout\" data-win-control=\"WinJS.UI.Flyout\" aria-label=\"{Add lookup value flyout}\">\n        <div>Enter lookup value<br/>\n            <input type='text' id=\"txtAddLookupValue\">\n        </div>\n        <button id=\"btnAddLookupValueAction\" onclick=\"doAddLookupValue()\">Add</button>\n    </div>\n\n    <div id=\"editLookupValueFlyout\" data-win-control=\"WinJS.UI.Flyout\" aria-label=\"{Edit lookup value flyout}\">\n        <div>Edit lookup value<br/>\n            <input type='text' id=\"txtEditLookupValue\">\n        </div>\n        <button id=\"btnEditLookupValueAction\" onclick=\"doEditLookupValue()\">Update</button>\n    </div>\n\n    <div id=\"deleteLookupValueFlyout\" data-win-control=\"WinJS.UI.Flyout\" aria-label=\"{Delete lookup value flyout}\">\n        <div>Delete lookup value?<br/><br/></div>\n        <button id=\"btnDeleteLookupValueAction\" onclick=\"doDeleteLookupValue()\">Confirm</button>\n    </div>\n\n    <div id=\"deleteEntryFlyout\" data-win-control=\"WinJS.UI.Flyout\" aria-label=\"{Delete entry flyout}\">\n        <div>Delete Entry?<br/><br/></div>\n        <button id=\"btnDeleteLookupValueAction\" onclick=\"doDeleteEntry()\">Confirm</button>\n    </div>\n\n    <div id=\"deleteSchemaFlyout\" data-win-control=\"WinJS.UI.Flyout\" aria-label=\"{Delete schema flyout}\">\n        <div>Delete Schema?<br/><br/></div>\n        <button id=\"btnDeleteSchemaAction\" onclick=\"doDeleteSchema()\">Confirm</button>\n    </div>\n\n    <!-- AppBar -->\n    <div id=\"createAppBar\" data-win-control=\"WinJS.UI.AppBar\" data-win-options=\"{sticky: true, placement: 'top'}\">\n        <button data-win-control=\"WinJS.UI.AppBarCommand\" data-win-options=\"{id:'cmdSave',label:'Save',icon:'save',section:'global',tooltip:'Add new top-level node'}\"></button>\n        <button data-win-control=\"WinJS.UI.AppBarCommand\" data-win-options=\"{id:'cmdExport',label:'Export',icon:'download',section:'global',tooltip:'Add child below selected node'}\"></button>\n        <button data-win-control=\"WinJS.UI.AppBarCommand\" data-win-options=\"{id:'cmdImport',label:'Import',icon:'upload',section:'global',tooltip:'Rename the selected node', type:'flyout', flyout: select('#renameFlyout')}\"></button>\n        <button data-win-control=\"WinJS.UI.AppBarCommand\" data-win-options=\"{id:'cmdFullscreen',label:'Toggle Fullscreen',icon:'fullscreen',section:'selection',tooltip:'Toggle fullscreen'}\"></button>\n    </div>\n\n    <!-- App Header -->\n    <div id=\"appHeader\">\n        <h2>JSON Databank</h2>\n    </div>\n\n    <!-- Hub / Hub Sections -->\n    <div style=\"top:80px\" data-win-control=\"WinJS.UI.Hub\">\n        <div class=\"section2\" data-win-control=\"WinJS.UI.HubSection\" data-win-options=\"{header: 'Data Entry', isHeaderStatic: true}\">\n            <table width=\"100%\">\n                <tr valign=\"top\">\n                    <td>\n                        <label style=\"font-size:20px\"><b>Schemas</b></label><br/>\n                        <select size=\"15\" id=\"selSchemaList\" onchange=\"refreshSchemaItems()\" style=\"width:100%; font-size:20px\"></select><br/>\n                    </td>\n                    <td>\n                        <label style=\"font-size:20px\"><b>Items</b></label><br/>\n                        <select size=\"15\" id=\"selSchemaItems\" onchange=\"showItem()\" style=\"width:100%; font-size:20px\"></select><br/>\n                        <button class=\"minimal\" onclick=\"addEditorItem()\" style=\"min-width:100px; width:100px\"><i class=\"fa fa-plus-circle\"></i> Add</button>\n                        <button id=\"btnDeleteEntry\" class=\"minimal\" onclick=\"delEditorItem()\" style=\"min-width:100px; width:100px\"><i class=\"fa fa-minus-circle\"></i> Delete</button>\n                    </td>\n                    <td>\n                        <div style=\"margin-left:10px; overflow-y:scroll\" id='entry_editor_holder'></div>\n                        <div id=\"divEditorButtons\" style=\"margin-left:20px; display:none\">\n                            <button class=\"minimal\" onclick=\"saveEditorItem()\"><i class=\"fa fa-save\"></i> Save</button>\n                        </div>\n                    </td>\n                </tr>\n            </table>\n        </div>\n\n        <div class=\"section2\" data-win-control=\"WinJS.UI.HubSection\" data-win-options=\"{header: 'Schemas', isHeaderStatic: true}\">\n            <table width=\"100%\">\n                <tr valign=\"top\">\n                    <td>\n                        <h3>Schemas</h3>\n                        <select id=\"selSchemaManage\" style=\"width:100%; font-size:20px;\" size=\"15\" onchange=\"manageSchemaChange()\"></select>\n                        <br/>\n                        <button id=\"btnDeleteSchema\" class=\"minimal\" onclick=\"deleteSchema()\"><i class=\"fa fa-minus-circle\"></i> Delete</button>\n                    </td>\n                    <td>\n                        <div style=\"margin-left:10px\" id='editor_holder'></div>\n                        <div id=\"divHints\">\n                            <ul>\n                                <li><i>All Schemas <b>must have</b> a <b>Name</b> property</i></li>\n                                <li><i>Schemas <b>should not</b> have an <b>id</b> property</i></li>\n                                <li><i>Schemas <b>should not</b> have an <b>objType</b> property</i></li>\n                            </ul>\n                        </div>\n\n                        <div style=\"margin-left:100px\">\n                            <button class=\"minimal\" onclick=\"newSchema()\"><i class=\"fa fa-plus\"></i> New</button>\n                            <button class=\"minimal\" onclick=\"saveSchema()\"><i class=\"fa fa-save\"></i> Save</button>\n                        </div>\n                    </td>\n                </tr>\n\n            </table>\n        </div>\n\n        <div class=\"section3\" data-win-control=\"WinJS.UI.HubSection\" data-win-options=\"{header: 'Lookups', isHeaderStatic: true}\">\n            <table width=\"100%\">\n                <tr>\n                    <th>Lookups</th>\n                    <th>Lookup Values</th>\n                </tr>\n                <tr>\n                    <td><select size=\"15\" id=\"selLookups\" onchange=\"refreshLookupValues()\" style=\"width:100%; font-size:20px;\"></select></td>\n                    <td><select size=\"15\" id=\"selLookupVals\" style=\"width:100%; font-size:20px;\"></select></td>\n                </tr>\n                <tr>\n                    <td align='center'>\n                        <button id=\"btnAddLookup\" class=\"minimal\" onclick=\"addLookup()\" style=\"width:120px\"><i class=\"fa fa-plus-circle\"></i> Add</button> \n                        <button id=\"btnEditLookup\" class=\"minimal\" onclick=\"editLookup()\" style=\"width:120px\"><i class=\"fa fa-pencil-square-o\"></i> Edit</button> \n                        <button id=\"btnDeleteLookup\" class=\"minimal\" onclick=\"delLookup()\" style=\"width:120px\"><i class=\"fa fa-minus-circle\"></i> Delete</button>\n                    </td>\n                    <td align='center'>\n                        <button id=\"btnAddLookupValue\" class=\"minimal\" onclick=\"addLookupValue()\" style=\"width:120px\"><i class=\"fa fa-plus-circle\"></i> Add</button> \n                        <button id=\"btnEditLookupValue\" class=\"minimal\" onclick=\"editLookupValue()\" style=\"width:120px\"><i class=\"fa fa-pencil-square-o\"></i> Edit</button> \n                        <button id=\"btnDeleteLookupValue\" class=\"minimal\" onclick=\"delLookupValue()\" style=\"width:120px\"><i class=\"fa fa-minus-circle\"></i> Delete</button>\n                    </td>\n                </tr>\n            </table>\n        </div>\n\n        <div class=\"section4\" data-win-control=\"WinJS.UI.HubSection\" data-win-options=\"{header: 'Data Entry', isHeaderStatic: true}\">\n            <h3>About JSON Databank</h3>\n            <p>This is a data-filer type application that let's you define the structure of \n                non-hierarchical json objects (in a way similar to flat-file type tables), set up lookup lists, and enter/view data in those tables.&nbsp; \n                It uses loki.js to store json objects whose structure is defined dynamically.&nbsp; Json-Editor.js \n                is used for generating dynamic forms for data entry as well as for schema definition.</p>\n            <p>The <a class=\"wjslink\" href=\"https://github.com/jdorn/json-editor\" target=\"_blank\">Json Editor</a> control adheres to a more complete version of Json Schema standard.&nbsp; This \n                application simplifies and reduces it to basic datatypes you see implemented and then stores \n                that simplified schema in a loki schemas collection.&nbsp; This collection is later used to \n                recreate the schema for data entry.</p>\n        </div>\n\n    </div>\n</div>\n",
  "scriptText": "sandbox.ui.setBackgroundColor(\"#343\");\n\nvar sbv = {\n    editor : null,\n    entryEditor: null,\n    db: new loki('JSON Databank'),\n    lookups: null,\n    lookupValues : null,\n    schemas: null\n};\n\nsandbox.events.clean = function() {\n    if (sbv.editor) sbv.editor.destroy();\n    if (sbv.entryEditor) sbv.entryEditor.destroy();\n\n    delete sbv.lookups;\n    delete sbv.lookupValues;\n    delete sbv.schemas;\n    delete sbv.db;\n    delete sbv.editor;\n    delete sbv.entryEditor;\n\n    sbv = null;\n};\n\nsandbox.events.windowResize = function() {\n    switch (sandbox.volatile.env) {\n        case \"IDE\" : alertify.error(\"This sample needs winjs version\"); break;\n        case \"IDE WJS\" : $(\"#UI_MainPlaceholder\").css(\"height\", $(window).height() - 280); break;\n        default : break;\n    }\n};\n\nsandbox.events.windowResize();\n//\n// UI LOAD/REFRESH FUNCTIONS\t\n//\n\n// updates select list for display/management of schemas\nfunction refreshSchemas() {\n    $(\"#selSchemaManage\").html(\"\");\n    $(\"#selSchemaList\").html(\"\");\n\n    for (var idx=0; idx < sbv.schemas.data.length; idx++) {\n        $(\"#selSchemaManage\")\n            .append($('<option>', { value : sbv.schemas.data[idx].$loki })\n                    .text(sbv.schemas.data[idx].Name)); \n        $(\"#selSchemaList\")\n            .append($('<option>', { value : sbv.schemas.data[idx].$loki })\n                    .text(sbv.schemas.data[idx].Name)); \n    }\n\n    $('#selSchemaList option:first-child').attr(\"selected\", \"selected\");\n    refreshSchemaItems();\n\n    $(\"#selSchemaItems\").focus();\n    $(\"#selSchemaList\").focus();\n}\n\n// Establishing a convention that all items need Name property,\n// which is what we will display in this list\nfunction refreshSchemaItems() {\n    $(\"#selSchemaItems\").html(\"\");\n\n    var schemaId = $(\"#selSchemaList\").val();\n\n    if (schemaId == null) return;\n\n    var schemaName = $(\"#selSchemaList\").find(\"option:selected\").text();\n\n    // if dynamic collection hasn't been created yet then just exit with empty list\n    var schemaItems = null;\n    schemaItems = sbv.db.getCollection(schemaName);\n    if (schemaItems == null) { return; };\n\n    for(var idx=0; idx < schemaItems.data.length; idx++) {\n        $(\"#selSchemaItems\")\n            .append($('<option>', { value : schemaItems.data[idx].$loki })\n                    .text(schemaItems.data[idx].Name));\n    }\n}\n\n// updates select list for display/management of lookups\nfunction refreshLookups() {\n    $(\"#selLookups\").html(\"\");\n\n    for(var idx=0; idx < sbv.lookups.data.length; idx++) {\n        $(\"#selLookups\")\n            .append($('<option>', { value : sbv.lookups.data[idx].$loki })\n                    .text(sbv.lookups.data[idx].name)); \n    }\n}\n\n// updates select list for display/management of values\nfunction refreshLookupValues() {\n    var lkpId = $(\"#selLookups\").val();\n    var lkpVals = sbv.lookupValues.find({ 'listId': { '$eq' : parseInt(lkpId, 10) }});\n\n    $(\"#selLookupVals\").html(\"\");\n\n    for(var idx=0; idx < lkpVals.length; idx++) {\n        $(\"#selLookupVals\")\n            .append($('<option>', { value : lkpVals[idx].$loki })\n                    .text(lkpVals[idx].name)); \n    }\n}\n\n//\n// LOOKUP MAINTENANCE\n//\n\nfunction addLookup() {\n    var btn = document.getElementById(\"btnAddLookup\");\n    document.getElementById(\"addLookupFlyout\").winControl.show(btn);\n}\n\nfunction doAddLookup() {\n    var str = $(\"#txtAddLookupName\").val();\n    document.getElementById(\"addLookupFlyout\").winControl.hide();\n\n    sbv.lookups.insert({ name: str });\n    refreshLookups();\n    initSchemaEditor();\n}\n\nfunction editLookup() {\n    var lkpId = $(\"#selLookups\").val();\n    if (lkpId == null) return;\n\n    var lkpText = $(\"#selLookups\").find(\"option:selected\").text();\n\n    $(\"#txtEditLookupName\").val(lkpText);\n\n    var btn = document.getElementById(\"btnEditLookup\");\n    document.getElementById(\"editLookupFlyout\").winControl.show(btn);\n}\n\nfunction doEditLookup() {\n    var lkpId = $(\"#selLookups\").val();\n    var lkp = sbv.lookups.get(parseInt(lkpId, 10));\n\n    lkp.name = $(\"#txtEditLookupName\").val();\n\n    document.getElementById(\"editLookupFlyout\").winControl.hide();\n\n    refreshLookups();\n    initSchemaEditor();\n}\n\nfunction delLookup() {\n    var lkpId = $(\"#selLookups\").val();\n    if (lkpId == null) return;\n\n    var btn = document.getElementById(\"btnDeleteLookup\");\n    document.getElementById(\"deleteLookupFlyout\").winControl.show(btn);\n}\n\nfunction doDeleteLookup() {\n    var lkpId = $(\"#selLookups\").val();\n    var lkpText = $(\"#selLookups\").find(\"option:selected\").text();\n    var lkp = sbv.lookups.get(parseInt(lkpId, 10));\n\n    document.getElementById(\"deleteLookupFlyout\").winControl.hide();\n\n    //remove values first\n    var lkpVals = sbv.lookupValues.find({ 'listId': { '$eq' : parseInt(lkpId, 10) }});\n    for(var idx=0; idx < lkpVals.length; idx++) {\n        sbv.lookupValues.remove(lkpVals[idx]);\n    }\n\n    sbv.lookups.remove(lkp);\n    refreshLookups();\n    initSchemaEditor();\n}\n\nfunction addLookupValue() {\n    var lkpId = $(\"#selLookups\").val();\n    if (lkpId == null) return;\n\n    var btn = document.getElementById(\"btnAddLookupValue\");\n    document.getElementById(\"addLookupValueFlyout\").winControl.show(btn);\n}\n\nfunction doAddLookupValue() {\n    var lkpId = $(\"#selLookups\").val();\n    var str = $(\"#txtAddLookupValue\").val();\n    document.getElementById(\"addLookupValueFlyout\").winControl.hide();\n\n    sbv.lookupValues.insert({ listId: parseInt(lkpId, 10), name: str });\n    refreshLookupValues();\n}\n\nfunction editLookupValue() {\n    var valId = $(\"#selLookupVals\").val();\n    if (valId == null) return;\n\n    var valText = $(\"#selLookupVals\").find(\"option:selected\").text();\n    $(\"#txtEditLookupValue\").val(valText);\n\n    var btn = document.getElementById(\"btnEditLookupValue\");\n    document.getElementById(\"editLookupValueFlyout\").winControl.show(btn);\n}\n\nfunction doEditLookupValue() {\n    var valId = $(\"#selLookupVals\").val();\n    var val = sbv.lookupValues.get(parseInt(valId, 10));\n\n    val.name = $(\"#txtEditLookupValue\").val();;\n    document.getElementById(\"editLookupValueFlyout\").winControl.hide();\n\n    refreshLookupValues();\n}\n\nfunction delLookupValue() {\n    var lkpId = $(\"#selLookupVals\").val();\n    if (lkpId == null) return;\n\n    var btn = document.getElementById(\"btnDeleteLookupValue\");\n    document.getElementById(\"deleteLookupValueFlyout\").winControl.show(btn);\n}\n\nfunction doDeleteLookupValue() {\n    var valId = $(\"#selLookupVals\").val();\n    var valText = $(\"#selLookupVals\").find(\"option:selected\").text();\n    var val = sbv.lookupValues.get(parseInt(valId, 10));\n\n    document.getElementById(\"deleteLookupValueFlyout\").winControl.hide();\n\n    sbv.lookupValues.remove(val);\n    refreshLookupValues();\n}\n\n// returns array for placement into entry editor object reference\nfunction getLookupValues(lkpName) {\n    var lkp = sbv.lookups.find({ 'name': { '$eq' : lkpName }});\n    var valObjs = sbv.lookupValues.find({ 'listId': { '$eq' : lkp[0].$loki }});\n    var vals = [\"\"];\n\n    for(var idx=0; idx < valObjs.length; idx++) {\n        vals.push(valObjs[idx].name);\n    }\n\n    return vals;\n}\n\n// returns array for placement into schema def obj reference\nfunction getLookupLists() {\n    var listNames = [\"\"];\n\n    for(var idx=0; idx < sbv.lookups.data.length; idx++) {\n        listNames.push(sbv.lookups.data[idx].name);\n    }\n\n    return listNames;\n}\n\nfunction generateEditorSchema(schemaId) {\n    var schema = sbv.schemas.get(schemaId);\n    var propertiesObject = {};\n    for(var idx=0; idx < schema.Properties.length; idx++) {\n        var prop = schema.Properties[idx];\n\n        if (prop.srcLookup !== \"\") {\n            var propAttrs = { type: \"string\", enum: getLookupValues(prop.srcLookup) };\n            propertiesObject[prop.propName] = propAttrs;\n        }\n        else {\n            if (prop.type == \"date\") {\n                var propAttrs = { type: \"string\", format: \"date\" };\n                propertiesObject[prop.propName] = propAttrs;\n            }\n            else {\n                if (prop.type == \"textarea\") {\n                    var propAttrs = { type: \"string\", format: \"textarea\", rows: \"5\" };\n                    propertiesObject[prop.propName] = propAttrs;\n                }\n                else {\n                    var propAttrs = { type: prop.type };\n                    propertiesObject[prop.propName] = propAttrs;\n                }\n            }\n        }\n    }\n\n    return propertiesObject;\n}\n\nfunction addEditorItem() {\n    var itemId = $(\"#selSchemaList\").val();\n\n    if (itemId == null) return;\n\n    initDataEditor();\n\n    $(\"#selSchemaItems\").val([]);\n\n    // override styles imposed by json editor or apply additional functionality\n    //$(\"input[data-schemaformat=date]\").datepicker();\n    $(\"textarea[data-schemaformat=textarea]\").css(\"height\", \"150px\");\n    $(\"#divEditorButtons\").show();\n\n}\n\nfunction saveEditorItem() {\n    var selItem = $(\"#selSchemaItems\").val();\n    var selSchema = $(\"#selSchemaList\").val();\n    var schemaName = $(\"#selSchemaList\").find(\"option:selected\").text();\n    //var schemaItems = sbv.db.getCollection(schemaName);\n    var schemaRec = sbv.schemas.get(parseInt(selSchema, 10));\n\n    // If dynamic collection doesn't exist yet (this is first item), create it\n    var schemaItems = null;\n    try {\n        schemaItems = sbv.db.getCollection(schemaName);\n    }\n    catch (err) {\n        schemaItems = sbv.db.addCollection(schemaName);\n    };\n\n    if (selItem == null) {\n        var newObj = sbv.entryEditor.getValue();\n\n        schemaItems.insert(newObj);\n\n        refreshSchemaItems();\n        addEditorItem();\n        alertify.success(\"added\");\n    }\n    else {\n        var oldObj = schemaItems.get(parseInt(selItem, 10));\n        var newObj = sbv.entryEditor.getValue();\n\n        for (var idx=0; idx < schemaRec.Properties.length; idx++) {\n            var propName = schemaRec.Properties[idx].propName;\n\n            oldObj[propName] = newObj[propName];\n        }\n\n        // in case they changed the 'name' property, item list would change\n        refreshSchemaItems();\n        addEditorItem();\n        alertify.log(\"updated\");\n    }\n\n}\n\nfunction delEditorItem() {\n    var selItem = $(\"#selSchemaItems\").val();\n    if (selItem == null) return;\n\n    var btn = document.getElementById(\"btnDeleteEntry\");\n    document.getElementById(\"deleteEntryFlyout\").winControl.show(btn);\n}\n\nfunction doDeleteEntry() {\n    var selItem = $(\"#selSchemaItems\").val();\n    var schemaName = $(\"#selSchemaList\").find(\"option:selected\").text();\n    var schemaItems = sbv.db.getCollection(schemaName);\n    var oldObj = schemaItems.get(parseInt(selItem, 10));\n\n    document.getElementById(\"deleteEntryFlyout\").winControl.hide();\n\n    schemaItems.remove(oldObj);\n\n    // If no more items in dynamic collection, remove the collection but keep its schema\n    // This is necessary due to loki.js persistence bug with empty collections.\n    if (schemaItems.data.length === 0) {\n        sbv.db.removeCollection(schemaName);\n    }\n\n    refreshSchemaItems();\n}\n\n// when user changes the selected schema in shema manage screen, this displays contents\nfunction manageSchemaChange() {\n    $(\"#divHints\").hide();\n\n    resetManageEditor();\n\n    var selId = $(\"#selSchemaManage\").val();\n    var schema = sbv.schemas.get(parseInt(selId, 10));\n\n    var propertiesArray = [];\n    for(var idx=0; idx < schema.Properties.length; idx++) {\n        var prop = schema.Properties[idx];\n\n        if (prop.srcLookup !== \"\") {\n            var propObj = { name: prop.propName, type: prop.type, srcLookup: prop.srcLookup };\n            propertiesArray.push(propObj);\n        }\n        else {\n            var propObj = { name: prop.propName, type: prop.type };\n            propertiesArray.push(propObj);\n        }\n    }\n\n    var editorObj = \n        { \n            SchemaName: schema.Name,\n            PropertyList: propertiesArray\n        };\n\n    sbv.editor.setValue(editorObj);\n\n}\n\nfunction resetManageEditor() {\n    var editorObj = \n        { \n            SchemaName: \"\", \n            PropertyList: [\n                {\n                    name: \"Name\",\n                    type: \"string\",\n                    srcLookup: \"\"\n                }\n            ] \n        };\n\n    sbv.editor.setValue(editorObj);\n}\n\nfunction newSchema()\n{\n    $(\"#selSchemaManage\").val([]);\n\n    resetManageEditor();\n}\n\nfunction saveSchema() \n{\n    var selId = $(\"#selSchemaManage\").val();\n    var schemaName = $(\"#selSchemaManage\").find(\"option:selected\").text();\n\n    var editorObj = sbv.editor.getValue();\n\n    if (editorObj.SchemaName === \"\") {\n        alertify.error(\"Must Provide a schema name\");\n        return;\n    }\n\n    var newObj = {\n        Name: editorObj.SchemaName,\n        Properties : []\n    };\n\n    for(var idx=0; idx < editorObj.PropertyList.length; idx++) {\n        var prop = editorObj.PropertyList[idx];\n\n        var newProp = { propName: prop.name, type: prop.type, srcLookup: prop.srcLookup };\n        if (newProp.srcLookup == null) newProp.srcLookup = \"\";\n\n        newObj.Properties.push(newProp);\n    }\n\n    if (selId == null) {\n        sbv.schemas.insert(newObj);\n\n        refreshSchemas();\n        resetManageEditor();\n\n        alertify.success(\"schema added\");\n    }\n    else {\n        var oldObj = sbv.schemas.get(parseInt(selId, 10));\n\n        if (oldObj.Name != newObj.Name) {\n            alertify.confirm(\"This will rename collection, are you sure?\", function (e) {\n                if (e) {\n                    var itemColl = sbv.db.getCollection(schemaName);\n\n                    itemColl.name = newObj.Name;\n                    itemColl.objType = newObj.Name;\n\n                    for(var idx=0; idx < itemColl.data.length; idx++) { \n                        var item = itemColl.data[idx];\n\n                        item.objType = newObj.Name;\n                    }\n\n                    oldObj.Name = newObj.Name;\n                    oldObj.Properties = newObj.Properties;\n\n                    // in case the name changed, refresh list\n                    refreshSchemas();\n                    resetManageEditor();\n\n                    alertify.success(\"schema renamed and updated\");\n                    return;\n                } \n                else { return; }\n            });\n        }\n        else\n        {\n            // name didnt change, maybe properties did, all are in this one property array\n            oldObj.Properties = newObj.Properties;\n\n            alertify.success(\"schema updated\");\n        }\n    }\n}\n\nfunction deleteSchema() {\n    var selId = $(\"#selSchemaManage\").val();\n    if (selId == null) return;\n\n    var btn = document.getElementById(\"btnDeleteSchema\");\n    document.getElementById(\"deleteSchemaFlyout\").winControl.show(btn);\n}\n\nfunction doDeleteSchema() {\n    var selId = $(\"#selSchemaManage\").val();\n    if (selId == null) return;\n\n    var schema = sbv.schemas.get(parseInt(selId, 10));\n\n    document.getElementById(\"deleteSchemaFlyout\").winControl.hide();\n\n    sbv.schemas.remove(schema);\n    sbv.db.removeCollection(schema.Name); \n\n    refreshSchemas();\n}\n\nfunction makeTestData() {\n    sbv.lookups = sbv.db.addCollection('lookups'); \n    sbv.lookupValues = sbv.db.addCollection('lookupValues'); \n    sbv.schemas = sbv.db.addCollection('schemas'); \n\n    var lkp1 = sbv.lookups.insert({ name:'PortTypes' });\n    sbv.lookupValues.insert({ listId: lkp1.$loki, name: 'HDMI' });\n    sbv.lookupValues.insert({ listId: lkp1.$loki, name: 'HDMI (mini)' });\n    sbv.lookupValues.insert({ listId: lkp1.$loki, name: 'USB' });\n    sbv.lookupValues.insert({ listId: lkp1.$loki, name: 'USB (mini)' });\n    sbv.lookupValues.insert({ listId: lkp1.$loki, name: 'Thunderbolt' });\n\n    var lkp2 = sbv.lookups.insert({ name: \"Tablet Manufacturers\" });\n    sbv.lookupValues.insert({ listId: lkp2.$loki, name: 'Amazon' });\n    var apl = sbv.lookupValues.insert({ listId: lkp2.$loki, name: 'Apple' });\n    sbv.lookupValues.insert({ listId: lkp2.$loki, name: 'Google' });\n    var ms = sbv.lookupValues.insert({ listId: lkp2.$loki, name: 'Microsoft' });\n    sbv.lookupValues.insert({ listId: lkp2.$loki, name: 'Samsung' });\n    sbv.lookupValues.insert({ listId: lkp2.$loki, name: 'Sony' });\n\n    sbv.schemas.insert({ Name: 'Tablets', Properties: [\n        { propName: 'Name', type: \"string\", srcLookup: \"\"},   \n        { propName: 'Manufacturer', type: \"lookup\", srcLookup: \"Tablet Manufacturers\" },\n        { propName: 'Screen Size', type: \"number\", srcLookup: \"\" },\n        { propName: 'Release Date', type: \"date\", srcLookup: \"\" },\n        { propName: 'Notes', type: \"textarea\", srcLookup: \"\" }\n    ]});\n\n    // Each schema that the user creates gets its own Loki Collection\n    var tablets = sbv.db.addCollection('Tablets');\n    tablets.insert({ Name: \"IPAD Mini\", Manufacturer: \"Apple\", \"Screen Size\": 7.9, \"Release Date\": \"10/23/2012\", \"Notes\": \"thin...\" });\n    tablets.insert({ Name: \"Surface RT\", Manufacturer: \"Microsoft\", \"Screen Size\": 10.6, \"Release Date\": \"10/26/2012\", \"Notes\": \"Office 2013; Built-in stand.\" });\n}\n\nfunction initProgram() {\n\n    if (!sandbox.db) {\n        $(\"#btnSave\").hide();\n        makeTestData();        \n\n        refreshLookups();\n        refreshSchemas();\n        initSchemaEditor();\n        resetManageEditor();\n\n        return;\n    }\n\n    sandbox.db.getAppKey('JSON Databank', 'DatabankInfo', function(result) {\n        if (result == null || result.id === 0) {\n            // Nothing saved yet, initialize a new loki db with single note\n            makeTestData();\n\n            refreshLookups();\n            refreshSchemas();\n            initSchemaEditor();\n            resetManageEditor();\n        }\n        else {\n            sbv.db.loadJSON(result.val);\n            sbv.lookups = sbv.db.getCollection(\"lookups\");\n            sbv.lookupValues = sbv.db.getCollection(\"lookupValues\");\n            sbv.schemas = sbv.db.getCollection(\"schemas\");\n\n            refreshLookups();\n            refreshSchemas();\n            initSchemaEditor();\n            resetManageEditor();\n        }\n    });\n}\n\nfunction showItem() {\n    var itemId = $(\"#selSchemaItems\").val();\n\n    if (itemId == null) return;\n\n    initDataEditor();\n\n    var schemaName = $(\"#selSchemaList\").find(\"option:selected\").text();\n    var itemColl = sbv.db.getCollection(schemaName);\n    var itemObj = itemColl.get(parseInt(itemId, 10));\n    var copiedObject = jQuery.extend({},itemObj);\n    delete copiedObject.$loki;\n    delete copiedObject.objType;\n    sbv.entryEditor.setValue(copiedObject);\n\n    // override styles imposed by json editor or apply additional functionality\n    //$(\"input[data-schemaformat=date]\").datepicker();\n    $(\"textarea[data-schemaformat=textarea]\").css(\"height\", \"150px\");\n    $(\"#divEditorButtons\").show();\n    $(\"#entry_editor_holder\").css(\"height\", $(\".section3\").height() - 220);\n}\n\nfunction initDataEditor() {\n    var schemaId = $(\"#selSchemaList\").val();\n    schemaId = parseInt(schemaId, 10);\n\n    $(\"#entry_editor_holder\").empty();\n\n    var propArray = generateEditorSchema(schemaId);\n\n    sbv.entryEditor = new JSONEditor(document.getElementById('entry_editor_holder'), {\n        iconlib: \"fontawesome4\",\n        //theme: 'jqueryui',    //jqueryui render looks kind of ugly so just use default\n        disable_properties: true,\n        disable_edit_json : true,\n        disable_collapse: true,\n\n        schema: {\n            type: \"object\",\n            title: \"Item Entry\",\n            properties: propArray\n        }\n    });\n}\n\nfunction initSchemaEditor() {\n    $(\"#editor_holder\").empty();\n\n    // Define Form Schema for OUR reduced 'Schema' implementation\n    // This is a schema for schemas :S\n    sbv.editor = new JSONEditor(document.getElementById('editor_holder'),{\n        iconlib: \"fontawesome4\",\n        disable_properties: true,\n        disable_edit_json : true,\n        disable_collapse: true,\n        //theme: 'jqueryui',    //jqueryui render looks kind of ugly so just use default\n        schema: {\n            type: \"object\",\n            title: \"Schema Properties\",\n            properties: {\n                SchemaName: {\n                    title: \"Name\",\n                    type: \"string\"\n                },\n                PropertyList: {\n                    type: \"array\",\n                    format: \"table\",\n                    title: \"Properties\",\n                    uniqueItems: true,\n                    items : {\n                        type: \"object\",\n                        properties: {\n                            \"name\": {\n                                title: \"Name\",\n                                type: \"string\"\n                            },\n                            \"type\": {\n                                title: \"Type\",\n                                type: \"string\",\n                                enum: [\"string\", \"textarea\", \"int\", \"number\", \"boolean\", \"date\", \"lookup\"],\n                                default: \"String\"\n                            },\n                            \"srcLookup\": {\n                                title: \"SrcLookup\",\n                                type: \"string\",\n                                enum: getLookupLists()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    });\n}\n\n//\n// I/O ROUTINES\n//\nfunction saveTrident() {\n    var result = JSON.stringify(sbv.db);\n\n    sandbox.db.setAppKey('JSON Databank', \"DatabankInfo\", result, function(e) {\n        if (e.success) alertify.success(\"Databank Saved\");\n        else alertify.error(\"Error encountered during save\");\n    });\n}\n\nfunction exportDatabank() {\n    sbv.appBar.hide();\n\n    sandbox.ui.fullscreenExit();\n\n    var result = JSON.stringify(sbv.db);\n\n    sandbox.files.saveTextFile(\"MyDatabank.jdb\", result);\n}\n\nfunction importDatabank() {\n    sbv.appBar.hide();\n    sandbox.files.userfileShow();\n    $(\"#sb_user_file\").click();\n}\n\nsandbox.events.userLoadCallback = function (filestring, filename) {\n    sandbox.files.userfileHide();\n\n    sbv.db.loadJSON(filestring);\n\n    // we rehydrated loki db object and collections but old collection references still\n    // point to old db object. \n    sbv.lookups = sbv.db.getCollection(\"lookups\");\n    sbv.lookupValues = sbv.db.getCollection(\"lookupValues\");\n    sbv.schemas = sbv.db.getCollection(\"schemas\");\n\n    refreshLookups();\n    refreshSchemas();\n    initSchemaEditor();\n    resetManageEditor();\n};\n\nWinJS.UI.Pages.define(location.href, {\n    ready: function (element, options) {\n    },\n\n    unload: function () {\n        // TODO: Respond to navigations away from this page.\n    }\n});\n\nfunction doFullscreen() {\n    sandbox.ui.fullscreenToggle();\n}\n\nWinJS.UI.processAll().then(function () {\n    sbv.appBar = document.getElementById(\"createAppBar\").winControl;\n\n    sbv.appBar.getCommandById(\"cmdSave\").addEventListener(\"click\", saveTrident, false);\n    sbv.appBar.getCommandById(\"cmdImport\").addEventListener(\"click\", importDatabank, false);\n    sbv.appBar.getCommandById(\"cmdExport\").addEventListener(\"click\", exportDatabank, false);\n    sbv.appBar.getCommandById(\"cmdFullscreen\").addEventListener(\"click\", doFullscreen, false);\n\n    if (!sandbox.db) sbv.appBar.hideCommands([\"cmdSave\"]);\n\n    initProgram();\n\n    $(\"#divMainFS\").show();\n});\n"
}