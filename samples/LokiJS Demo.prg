{
  "progName": "LokiJS Demo",
  "htmlText": "<h3>Loki DB Demo using JQGrid</h3>\n<p>This demo is a test of Loki.js (an in-memory JSON object database), using it with jqGrid.  It allows adding, editing, deleting, filtering \nand lets you load/save any of the three methods available (File API, Local Storage, Trident DB).\nThe demo database supports three collections (similar to a table) : vehicle class, manufacturer, and autos.  Autos depends on vehicle class and \nmanufacturer.  Currently the user interface only supports manipulating data in the autos class.  Data for all classes is \nautomatically initialized to a default sample set.</p> \n\n<button style=\"height:40px\" onclick=\"LoadAutoDB()\"><i class=\"fa fa-arrow-up\"></i> Load</button>\n<button style=\"height:40px\" onclick=\"SaveAutoDB()\"><i class=\"fa fa-download\"></i> Save</button>\n<div id=\"divLS\" style=\"display: none\">\n<button style=\"height:40px\" onclick=\"LoadLocal()\"><i class=\"fa fa-arrow-circle-o-up\"></i> Load localStorage</button>\n<button style=\"height:40px\" onclick=\"SaveLocal()\"><i class=\"fa fa-arrow-circle-o-down\"></i> Save localStorage</button>\n</div>\n<div id=\"divTDB\" style=\"display: none\">\n<button style=\"height:40px\" onclick=\"LoadTridentDB()\"><i class=\"fa fa-arrow-circle-o-up\"></i> Load indexedDB</button>\n<button style=\"height:40px\" onclick=\"SaveTridentDB()\"><i class=\"fa fa-arrow-circle-o-down\"></i> Save indexedDB</button>\n</div>\n<br/><br/>\n<table id=\"autogrid\"></table>\n<div id=\"autopager\"></div>\n\n<div id=\"dialog-confirm\" title=\"Confirm Delete\" style=\"display:none\">\n    <p>&nbsp;<i class=\"fa fa-trash-o fa-2x\"></i>&nbsp; Are you sure you want to delete this auto?</p>\n</div>\n\n",
  "scriptText": "// This is a demo of using the third party javascript library Loki\n// It helps create a cleaner, more defined database abstraction to a bunch of json object arrays \n\nif (localStorage) $(\"#divLS\").css(\"display\", \"inline\");\nif (VAR_TRIDENT_DB) $(\"#divTDB\").css(\"display\", \"inline\");\n\nvar sandboxVars = {\n  // Keep a global instance to a Loki database object\n  db: new loki('Autos'),\n\n  manufacturers: null,\n  vclass: null, \n  autos: null,\n  lastsel: null\n}\n\nfunction EVT_CleanSandbox() {\n\tdelete sandboxVars.db;\n    delete sandboxVars.manufacturers;\n    delete sandboxVars.autos;\n    delete sandboxVars.vclass;\n  \tdelete sandboxVars.lastsel;\n}\n  \n// keep track of last selected gridrow for graphical update purposes\n\ninitializeDB();\n\n// initialize the database with a set of autos, to do so we need to first set up \n// some manufacturers and models so our autos can reference their id's\nfunction initializeDB() {\n  \n\t// Collections would be like tables\n\tsandboxVars.manufacturers = sandboxVars.db.addCollection('manufacturers', 'Manufacturer');\n\tsandboxVars.vclass = sandboxVars.db.addCollection('vclass', 'VehicleClass');\n\tsandboxVars.autos = sandboxVars.db.addCollection('autos', 'Autos');\n\n\t// Now add some documents (loki term for records)\n\t// In adding the records we are defining the structure\n\tvar ford = sandboxVars.manufacturers.insert({ name:'Ford', country:'US' });\n\tvar toyo = sandboxVars.manufacturers.insert({ name:'Toyota', country:'Japan' });\n\tvar vw = sandboxVars.manufacturers.insert({ name:'Volkswagen', country:'Germany' });\n\n\tvar classSedan = sandboxVars.vclass.insert({ name:'Sedan' });\n\tvar classSports = sandboxVars.vclass.insert({ name:'Sports' });\n\tvar classHybrid = sandboxVars.vclass.insert({ name:'Hybrid' });\n\tvar classCompact = sandboxVars.vclass.insert({ name:'Compact' });\n\t\n\tsandboxVars.autos.insert({ name:'Focus', doors : 4, vclass: classCompact.$loki, manufacturer: ford.$loki });\n\tsandboxVars.autos.insert({ name:'Fusion', doors: 4, vclass: classHybrid.$loki, manufacturer: ford.$loki });\n\tsandboxVars.autos.insert({ name:'Mustang', doors: 2, vclass: classSports.$loki, manufacturer: ford.$loki });\n\tsandboxVars.autos.insert({ name:'Camry', doors: 4, vclass: classSedan.$loki, manufacturer: toyo.$loki });\n\tsandboxVars.autos.insert({ name:'Prius', doors: 4, vclass: classHybrid.$loki, manufacturer: toyo.$loki });\n\tsandboxVars.autos.insert({ name:'Avalon', doors: 4, vclass: classSedan.$loki, manufacturer: toyo.$loki });\n\tsandboxVars.autos.insert({ name:'Jetta', doors: 4, vclass: classSedan.$loki, manufacturer: vw.$loki });\n\tsandboxVars.autos.insert({ name:'Passat', doors: 4, vclass: classSedan.$loki, manufacturer: vw.$loki });\n\tsandboxVars.autos.insert({ name:'Beetle', doors: 2, vclass: classCompact.$loki, manufacturer: vw.$loki });\n\t\n\tLoadAutosGrid();\n}\n\nfunction RefreshGrid() {\n\t// this is how to refresh grid when using jsonstring local data\n\t$(\"#autogrid\").setGridParam({\n\t    datastr: sandboxVars.autos.data,\n\t    datatype: \"jsonstring\" // !!! reset datatype\n\t}).trigger(\"reloadGrid\");\n  \n  \t// clear lastsel\n  \tsandboxVars.lastsel = null;\n}\n\nfunction LoadAutosGrid()\n{   \n    // if auto grid has already been initialized, then do a refresh with new data instead\n    if ($(\"#autogrid\")[0].grid) {\n    \tRefreshGrid();\n    \treturn;\n    }\n    \n    $(\"#autogrid\").jqGrid({\n        colModel: [\n            { name: 'Actions', index: 'ID', width: 170, align: 'left', formatter: lnkFormatter },\n            { name: 'name', index: 'name', width: \"110\", editable:true },\n            { name: 'doors', index: 'doors', width: \"100\", editable:true },\n            { name: 'vclass', index: 'vclass', width: 180, align: 'left', stype: 'select', editable: true, edittype: 'select', formatter: 'select',\n                editoptions: { value: CollectionToLookup(sandboxVars.vclass) }\n            },\n            { name: 'manufacturer', index: 'manufacturer', width: 180, align: 'left', stype: 'select', editable: true, edittype: 'select', formatter: 'select',\n                editoptions: { value: CollectionToLookup(sandboxVars.manufacturers) }\n            }\n        ],\n        pager: '#autopager',\n        datatype: \"jsonstring\",\n        datastr: sandboxVars.autos.data,\n        jsonReader: { repeatitems: false },\n        viewrecords: true,\n        caption: \"Autos\",\n        height: \"auto\",\n\tonSelectRow: function (id) {\n\t\tif (id != \"new_id\") {\n\t\t\tvar selAuto = sandboxVars.autos.get(parseInt(id));\n\t\t\tvar selManu = sandboxVars.manufacturers.get(parseInt(selAuto.manufacturer));\n\t\t\t\n    \t\t\talertify.log('Country of origin : ' + selManu.country);\n    \t\t}\n\t},\n        ignoreCase: true\n    });\n    \n    //$(\"#autogrid\").jqGrid('navGrid', '#autogrid',\n    //    { add: false, edit: false, del: false }, {}, {}, {},\n    //    { multipleSearch: true, multipleGroup: true });\n        \n    $(\"#autogrid\")\n        .navGrid(\"#autopager\", { edit: false, add: false, del: false, search: false })\n        .navButtonAdd(\"#autopager\", { caption: \"Add Auto\", buttonicon: \"ui-icon-plus\", onClickButton: function () { AddAuto(); }, position: \"last\" });\n\n    $(\"#autogrid\").jqGrid('filterToolbar', { defaultSearch: 'cn', stringResult: true });\n};\n\nfunction lnkFormatter(cellvalue, options, rowObject) {\n\treturn \"<div><div><a href='javascript:void(0)' title='Edit' onclick='EditAuto(\" + options.rowId + \"); return;'>Edit</a> | \" +\n            \"<a href='javascript:void(0)' title='Delete' onclick='DeleteAuto(\" + options.rowId + \"); return false;'>Delete</a></div>\" +\n            \"<div style='display:none'><a href='javascript:void(0)' title='Update' onclick='UpdateAuto(\\\"\" + options.rowId + \"\\\"); return false;'>Update</a> | \" +\n            \"<a href='javascript:void(0)' title='Cancel' onclick='CancelEdit(\\\"\" + options.rowId + \"\\\"); return false;'>Cancel</a></div></div>\";\n}\n\n// convert our lookup collections (vclass and manufacturer) to simple json of name/value pairs\n// jqgrid needs something like \nfunction CollectionToLookup(obj)\n{\n\tvar lookupString = \":\";\n\tfor (i=0;i<obj.data.length;i++) {\n\t\tlookupString += \";\" + obj.data[i].$loki + \":\" + obj.data[i].name;\n\t}\n\t\n\treturn lookupString;\n}\n\nfunction AddAuto()\n{\n        var s;\n\n        var dataRow = { name: '' };\n        $('#autogrid').addRowData('new_id', dataRow, \"first\");\n        $('#autogrid').editRow('new_id', true);\n\n        $('#new_id').find('div')[1].style.display = 'none';\n        $('#new_id').find('div')[2].style.display = 'block';\n\n        sandboxVars.lastsel = \"new_id\";\n}\n\nfunction EditAuto(id) {\n        // undo any previous rowedit\n        if (id && id != sandboxVars.lastsel) {\n            if (typeof (sandboxVars.lastsel) != \"undefined\" && sandboxVars.lastsel != null) {\n                var s = $(\"#autogrid\").jqGrid('restoreRow', sandboxVars.lastsel);\n                $('#' + sandboxVars.lastsel).find('div')[1].style.display = 'block';\n                $('#' + sandboxVars.lastsel).find('div')[2].style.display = 'none';\n            }\n            sandboxVars.lastsel = id;\n        }\n\n        // update action column to show update/cancel actions and hide edit/delete actions\n        $('#' + id).find('div')[1].style.display = 'none';\n        $('#' + id).find('div')[2].style.display = 'block';\n\n        // put row into edit mode\n        var gr = jQuery(\"#autogrid\").jqGrid('getGridParam', 'selrow');\n        jQuery(\"#autogrid\").editRow(id, true);\n}\n\nfunction CancelEdit(id) {\n        if (typeof (sandboxVars.lastsel) != \"undefined\") {\n\n            if (sandboxVars.lastsel == 'new_id') {\n                $(\"#new_id\").remove();\n                sandboxVars.lastsel = null;\n            }\n            else {\n                var s = $(\"#autogrid\").jqGrid('restoreRow', sandboxVars.lastsel);\n                $('#' + sandboxVars.lastsel).find('div')[1].style.display = 'block';\n                $('#' + sandboxVars.lastsel).find('div')[2].style.display = 'none';\n            }\n        }\n}\n\nfunction UpdateAuto(id) {\n\t\n\tvar autoName = $('#' + id).find('input')[0].value;\n\tvar numDoors = $('#' + id).find('input')[1].value;\n\tvar vclassId = $('#' + id).find('select').find(\":selected\")[0].value;\n\tvar manufacturerId = $('#' + id).find('select').find(\":selected\")[1].value;\n\n\tvar sErrors = \"\";\n\n\t// require name, vclass, and manufacturer\n\tif (autoName == \"\") { sErrors += \"Name is required.<br/>\"; }\n\tif (vclassId == \"\") { sErrors += \"Vehicle Class is required.<br/>\"; }\n\tif (manufacturerId == \"\") { sErrors += \"Manufacturer is required.<br/>\"; }\n\n\tif (sErrors != \"\") {\n\t\talertify.error(sErrors);\n\t\treturn;\n\t}\n\n\tif (id == 'new_id') {\n\t\tsandboxVars.autos.insert({ name:autoName, doors : numDoors, vclass: vclassId, manufacturer: manufacturerId });\n\t\t\n\t\tRefreshGrid();\n\t}\n\telse {\n\t\t// toggle actions back to edit/delete\n\t\t$('#' + sandboxVars.lastsel).find('div')[1].style.display = 'block';\n\t\t$('#' + sandboxVars.lastsel).find('div')[2].style.display = 'none';\n\n\t\t// Lookup and modify existing auto document\n\t\tvar currAuto = sandboxVars.autos.get(parseInt(id));\n\t\tcurrAuto.name = autoName;\n\t\tcurrAuto.doors = numDoors;\n\t\tcurrAuto.manufacturer = manufacturerId;\n\n                RefreshGrid();\n\t}\n}\n\nfunction DeleteAuto(id) {\n\t$(\"#dialog-confirm\").dialog({\n\t\tresizable: false,\n\t\theight: 200,\n\t\twidth: 400,\n\t\tmodal: true,\n\t\tbuttons: {\n\t\t\t\"Delete\": function () {\n\t\t\t\tsandboxVars.autos.remove(sandboxVars.autos.get(id));\n\t\t\t\tRefreshGrid();\n\t\t\t\t$(this).dialog(\"close\");\n\t\t\t},\n\t\t\tCancel: function () {\n\t\t\t\t$(this).dialog(\"close\");\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction EVT_UserLoadCallback(filestring) {\n  \n\t// dont just JSON.parse this, hand off to Loki to reconstruct object and collections\n    // otherwise we would lose all the prototype methods and just have raw data not a real loki db\n  \tsandboxVars.db.loadJSON(filestring);\n\n\t// we rehydrated loki db object and collections but old collection references still\n  \t// point to old db object. \n\tsandboxVars.manufacturers = sandboxVars.db.getCollection(\"manufacturers\");\n\tsandboxVars.vclass = sandboxVars.db.getCollection(\"vclass\");\n\tsandboxVars.autos = sandboxVars.db.getCollection(\"autos\");\n\t\n\tRefreshGrid();\n}\n\nfunction LoadAutoDB()\n{\n\tAPI_ShowLoad();\n}\n\nfunction SaveAutoDB()\n{\n\tvar saveString = JSON.stringify(sandboxVars.db);\n\tAPI_SaveTextFile(\"autos.db\", saveString);\n}\n\n//\n// DATABASE SERIALIZATION TO TRIDENT SANDBOX DB (uses IndexedDB)\n//\n\nfunction LoadTridentDB()\n{\n    if (VAR_TRIDENT_DB) {\n\n      API_GetIndexedAppKey('LokiDemoApp', 'LokiDemo', function(e) {\n        var res = e.target.result;\n        \n        if (!res) return;\n        \n      \tsandboxVars.db.loadJSON(res.val);\n\n\t\t// we rehydrated loki db object and collections but old collection references still\n  \t\t// point to old db object. \n\t\tsandboxVars.manufacturers = sandboxVars.db.getCollection(\"manufacturers\");\n\t\tsandboxVars.vclass = sandboxVars.db.getCollection(\"vclass\");\n\t\tsandboxVars.autos = sandboxVars.db.getCollection(\"autos\");\n\t\n\t\tRefreshGrid();\n\n      });\n      \n    }\n  \telse {\n      \talertify.log(\"Trident Database is not available.\");\n  \t}\n}\n\nfunction SaveTridentDB()\n{\n\tif(VAR_TRIDENT_DB) {\n      \tAPI_SetIndexedAppKey('LokiDemoApp', 'LokiDemo', JSON.stringify(sandboxVars.db))\n\t\t//localStorage.setItem(\"Loki Demo\", JSON.stringify(sandboxVars.db));\n  \t\talertify.log('Loki Demo database saved to Trident Database');\n  \t}\n  \telse {\n\t\talertify.log(\"Trident Database is not available.\");\n\t}\n}\n\n//\n// DATABASE SERIALIZATION TO Local Storage\n//\n\nfunction LoadLocal()\n{\n    if (localStorage) {\n\t\tif (localStorage.getItem(\"Loki Demo\") === null) {\n  \t\t\talertify.error('Loki Demo database not in local storage');\n          \treturn;\n\t\t}  \t\t\n      \n      \tsandboxVars.db.loadJSON(localStorage.getItem(\"Loki Demo\"));\n\n\t\t// we rehydrated loki db object and collections but old collection references still\n  \t\t// point to old db object. \n\t\tsandboxVars.manufacturers = sandboxVars.db.getCollection(\"manufacturers\");\n\t\tsandboxVars.vclass = sandboxVars.db.getCollection(\"vclass\");\n\t\tsandboxVars.autos = sandboxVars.db.getCollection(\"autos\");\n\t\n\t\tRefreshGrid();\n    }\n  \telse {\n      \talertify.log(\"Local Storage is not available.\");\n  \t}\n}\n\nfunction SaveLocal()\n{\n\tif(localStorage) {\n\t\tlocalStorage.setItem(\"Loki Demo\", JSON.stringify(sandboxVars.db));\n  \t\talertify.log('Loki Demo database saved to local storage');\n  \t}\n  \telse {\n\t\talertify.log(\"Local Storage is not available.\");\n\t}\n}\n"
}