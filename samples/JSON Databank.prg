{
  "progName": "JSON Databank",
  "htmlText": "<ul class=\"tnavlist\">\n<li class=\"tnavli\"><a class=\"tnava\" onclick=\"showDiv(1);\" href=\"javascript:void(0)\"><i class=\"fa fa-pencil\"></i> Entry</a></li>\n<li class=\"tnavli\"><a class=\"tnava\" onclick=\"showDiv(2);\" href=\"javascript:void(0)\"><i class=\"fa fa-puzzle-piece\"></i> Schemas</a></li>\n<li class=\"tnavli\"><a class=\"tnava\" onclick=\"showDiv(3);\" href=\"javascript:void(0)\"><i class=\"fa fa-list\"></i> Lookups</a></li>\n<li class=\"tnavli\"><a class=\"tnava\" onclick=\"showDiv(4);\" href=\"javascript:void(0)\"><i class=\"fa fa-info-circle\"></i> About</a></li>\n</ul>\n\n<br/>\n<table style='width:100%;background-color:#aaa'>\n\t<tr style='background-color:#aaa'>\n\t\t<td>\n\t\t\t<div id='divDbActions' style='display:inline; width:100%'>\n\t\t\t\t<button style=\"height:34px\" id='btnSave' title='Save to Trident DB' onclick='saveTrident()'><i class=\"fa fa-floppy-o\"></i> Save TDB</button>&nbsp;\n\t\t\t\t<button style=\"height:34px\" title='Export / Save Locally' onclick='exportDatabank()'><i class=\"fa fa-download\"></i> Export</button>&nbsp;\n\t\t\t\t<button style=\"height:34px\" title='Import / Load Local File' onclick='importDatabank()'><i class=\"fa fa-arrow-up\"></i> Import</button>\n                <label id=\"lblPageName\" style=\"float:right; font-size:20px; margin-top:5px\">Item Entry</label>\n\t\t\t</div>\n\t\t</td>\n\t</tr>\n</table>\n\n<div id=\"divMain\">\n<br/>\n<table width=\"100%\">\n  <tr valign=\"top\">\n    <td align=\"center\" style=\"width:220px; height:100px\">\n    \t<label style=\"font-size:20px\"><b>Schemas</b></label><br/>\n    \t<select size=\"7\" id=\"selSchemaList\" onclick=\"refreshSchemaItems()\" style=\"width:100%; font-size:20px\"></select>\n        <button class=\"minimal\" onclick=\"addEditorItem()\"><i class=\"fa fa-plus\"></i> Add Item</button>\n    </td>\n    <td rowspan=\"2\">\n    \t<div style=\"margin-left:10px\" id='entry_editor_holder'></div>\n        <div id=\"divEditorButtons\" style=\"margin-left:20px; display:none\">\n        \t<button class=\"minimal\" onclick=\"saveEditorItem()\"><i class=\"fa fa-save\"></i> Save</button>\n        </div>\n\t</td>\n  </tr>\n  <tr>\n    <td align=\"center\" style=\"width:140px\">\n    \t<br/>\n    \t<label style=\"font-size:20px\"><b>Items</b></label><br/>\n    \t<select size=\"10\" id=\"selSchemaItems\" onclick=\"showItem()\" style=\"width:100%; font-size:20px\"></select>\n       \t<button class=\"minimal\" onclick=\"delEditorItem()\"><i class=\"fa fa-trash-o\"></i> Delete</button>\n\t</td>\n  </tr>\n</table>\n</div>\n\n<div id=\"divSchemas\" style=\"display:none\">\n\n<table width=\"100%\">\n<tr valign=\"top\">\n\t<td>\n    \t<h3>Schemas</h3>\n    \t<select id=\"selSchemaManage\" style=\"width:100%; font-size:20px;\" size=\"14\" onclick=\"manageSchemaChange()\"></select>\n        <br/>\n        <button class=\"minimal\" onclick=\"deleteSchema()\"><i class=\"fa fa-trash-o\"></i> Delete</button>\n\t</td>\n    <td>\n        <div style=\"margin-left:10px\" id='editor_holder'></div>\n\t\t<ul>\n\t\t\t<li><i>All Schemas <b>must have</b> a <b>Name</b> property</i></li>\n\t\t\t<li><i>Schemas <b>should not</b> have an <b>id</b> property</i></li>\n\t\t\t<li><i>Schemas <b>should not</b> have an <b>objType</b> property</i></li>\n\t\t</ul>\n\n        <div style=\"margin-left:100px\">\n        \t<button class=\"minimal\" onclick=\"newSchema()\"><i class=\"fa fa-plus\"></i> New</button>\n        \t<button class=\"minimal\" onclick=\"saveSchema()\"><i class=\"fa fa-save\"></i> Save</button>\n        </div>\n    </td>\n</tr>\n\n</table>\n\n</div>\n\n<div id=\"divLookups\" style=\"display:none\">\n<br/>\n<table width=\"100%\">\n<tr>\n\t<th>Lookups</th>\n\t<th>Lookup Values</th>\n</tr>\n<tr>\n\t<td><select size=\"14\" id=\"selLookups\" onclick=\"refreshLookupValues()\" style=\"width:100%; font-size:20px;\"></select></td>\n\t<td><select size=\"14\" id=\"selLookupVals\" style=\"width:100%; font-size:20px;\"></select></td>\n</tr>\n<tr>\n\t<td align='center'>\n    \t<button class=\"minimal\" onclick=\"addLookup()\" style=\"width:120px\"><i class=\"fa fa-plus\"></i> Add</button> \n        <button class=\"minimal\" onclick=\"editLookup()\" style=\"width:120px\"><i class=\"fa fa-pencil\"></i> Edit</button> \n        <button class=\"minimal\" onclick=\"delLookup()\" style=\"width:120px\"><i class=\"fa fa-trash-o\"></i> Delete</button>\n\t</td>\n    <td align='center'>\n    \t<button class=\"minimal\" onclick=\"addLookupValue()\" style=\"width:120px\"><i class=\"fa fa-plus\"></i> Add</button> \n        <button class=\"minimal\" onclick=\"editLookupValue()\" style=\"width:120px\"><i class=\"fa fa-pencil\"></i> Edit</button> \n        <button class=\"minimal\" onclick=\"delLookupValue()\" style=\"width:120px\"><i class=\"fa fa-trash-o\"></i> Delete</button>\n\t</td>\n</tr>\n</table>\n</div>\n\n<div id=\"divAbout\" style=\"display:none\">\n<h3>About JSON Databank</h3>\n<p>This is a data-filer type application that let's you define the structure of \nnon-hierarchical json objects (in a way similar to flat-file type tables), set up lookup lists, and enter/view data in those tables.&nbsp; \nIt uses loki.js to store json objects whose structure is defined dynamically.&nbsp; Json-Editor.js \nis used for generating dynamic forms for data entry as well as for schema definition.</p>\n<p>The Json Editor control adheres to a more complete version of Json Schema standard.&nbsp; This \napplication simplifies and reduces it to basic datatypes you see implemented and then stores \nthat simplified schema in a loki schemas collection.&nbsp; This collection is later used to \nrecreate the schema for data entry.</p>\n<p>Currently, the 'lookup' type is single select only.  Possibly in the future i will allow multiselect \nlookups.  The 'date' type is not fully supported in IE so it will just be a regular text box.</p>\n\n</p>\n</div>",
  "scriptText": "var sbv = {\n    editor : null,\n    entryEditor: null,\n    db: new loki('JSON Databank'),\n    lookups: null,\n    lookupValues : null,\n    schemas: null\n};\n\nsandbox.events.clean = function() {\n    if (sbv.editor) sbv.editor.destroy();\n    if (sbv.entryEditor) sbv.entryEditor.destroy();\n\n    delete sbv.lookups;\n    delete sbv.lookupValues;\n    delete sbv.schemas;\n    delete sbv.db;\n    delete sbv.editor;\n    delete sbv.entryEditor;\n\n    sbv = null;\n};\n\nfunction showDiv(divIndex) {\n    $(\"#divMain\").hide();\n    $(\"#divSchemas\").hide();\n    $(\"#divLookups\").hide();\n    $(\"#divAbout\").hide();\n\n    switch(divIndex) {\n        case 1: $(\"#divMain\").show(); $(\"#lblPageName\").text(\"Item Entry\"); break;\n        case 2: $(\"#divSchemas\").show(); $(\"#lblPageName\").text(\"Manage Schemas\"); break;\n        case 3: $(\"#divLookups\").show(); $(\"#lblPageName\").text(\"Manage Lookups\"); break;\n        case 4: $(\"#divAbout\").show(); $(\"#lblPageName\").text(\"About\"); break;\n    }\n}\n\n//\n// UI LOAD/REFRESH FUNCTIONS\t\n//\n\n// updates select list for display/management of schemas\nfunction refreshSchemas() {\n    $(\"#selSchemaManage\").html(\"\");\n    $(\"#selSchemaList\").html(\"\");\n\n    for (var idx=0; idx < sbv.schemas.data.length; idx++) {\n        $(\"#selSchemaManage\")\n            .append($('<option>', { value : sbv.schemas.data[idx].$loki })\n                    .text(sbv.schemas.data[idx].Name)); \n        $(\"#selSchemaList\")\n            .append($('<option>', { value : sbv.schemas.data[idx].$loki })\n                    .text(sbv.schemas.data[idx].Name)); \n    }\n\n    $('#selSchemaList option:first-child').attr(\"selected\", \"selected\");\n    refreshSchemaItems();\n\n    $(\"#selSchemaItems\").focus();\n    $(\"#selSchemaList\").focus();\n}\n\n// Establishing a convention that all items need Name property,\n// which is what we will display in this list\nfunction refreshSchemaItems() {\n    $(\"#selSchemaItems\").html(\"\");\n\n    var schemaId = $(\"#selSchemaList\").val();\n\n    if (schemaId == null) return;\n\n    var schemaName = $(\"#selSchemaList\").find(\"option:selected\").text();\n\n    // if dynamic collection hasn't been created yet then just exit with empty list\n    var schemaItems = null;\n    schemaItems = sbv.db.getCollection(schemaName);\n    if (schemaItems == null) { return; };\n\n    for(var idx=0; idx < schemaItems.data.length; idx++) {\n        $(\"#selSchemaItems\")\n            .append($('<option>', { value : schemaItems.data[idx].$loki })\n                    .text(schemaItems.data[idx].Name));\n    }\n}\n\n// updates select list for display/management of lookups\nfunction refreshLookups() {\n    $(\"#selLookups\").html(\"\");\n\n    for(var idx=0; idx < sbv.lookups.data.length; idx++) {\n        $(\"#selLookups\")\n            .append($('<option>', { value : sbv.lookups.data[idx].$loki })\n                    .text(sbv.lookups.data[idx].name)); \n    }\n}\n\n// updates select list for display/management of values\nfunction refreshLookupValues() {\n    var lkpId = $(\"#selLookups\").val();\n    var lkpVals = sbv.lookupValues.find({ 'listId': { '$eq' : parseInt(lkpId) }});\n\n    $(\"#selLookupVals\").html(\"\");\n\n    for(var idx=0; idx < lkpVals.length; idx++) {\n        $(\"#selLookupVals\")\n            .append($('<option>', { value : lkpVals[idx].$loki })\n                    .text(lkpVals[idx].name)); \n    }\n}\n\n//\n// LOOKUP MAINTENANCE\n//\n\nfunction addLookup() {\n    alertify.prompt(\"Enter Lookup Name\", function (e, str) {\n        if (e) {\n            sbv.lookups.insert({ name: str });\n            refreshLookups();\n            initSchemaEditor();\n        } \n    }, \"MyLookup\");\n}\n\nfunction editLookup() {\n    var lkpId = $(\"#selLookups\").val();\n    var lkpText = $(\"#selLookups\").find(\"option:selected\").text();\n    var lkp = sbv.lookups.get(parseInt(lkpId));\n\n    alertify.prompt(\"Set Lookup Name\", function (e, str) {\n        if (e) {\n            lkp.name = str;\n            refreshLookups();\n            initSchemaEditor();\n        } \n    }, lkpText);\n}\n\nfunction delLookup() {\n    var lkpId = $(\"#selLookups\").val();\n    var lkpText = $(\"#selLookups\").find(\"option:selected\").text();\n    var lkp = sbv.lookups.get(parseInt(lkpId));\n\n    alertify.confirm(\"Delete \" + lkpText, function (e) {\n        if (e) {\n            //remove values first\n            var lkpVals = sbv.lookupValues.find({ 'listId': { '$eq' : parseInt(lkpId) }});\n            for(var idx=0; idx < lkpVals.length; idx++) {\n                sbv.lookupValues.remove(lkpVals[idx]);\n            }\n\n            sbv.lookups.remove(lkp);\n            refreshLookups();\n            initSchemaEditor();\n        } \n    });\n}\n\nfunction addLookupValue() {\n    var lkpId = $(\"#selLookups\").val();\n    alertify.prompt(\"Enter Lookup Value\", function (e, str) {\n        if (e) {\n            sbv.lookupValues.insert({ listId: parseInt(lkpId), name: str });\n            refreshLookupValues();\n        } \n    }, \"MyLookupValue\");\n}\n\nfunction editLookupValue() {\n    var valId = $(\"#selLookupVals\").val();\n    var valText = $(\"#selLookupVals\").find(\"option:selected\").text();\n    var val = sbv.lookupValues.get(parseInt(valId));\n\n    alertify.prompt(\"Edit Lookup Value\", function (e, str) {\n        if (e) {\n            val.name = str;\n            refreshLookupValues();\n        } \n    }, valText);\n}\n\nfunction delLookupValue() {\n    var valId = $(\"#selLookupVals\").val();\n    var valText = $(\"#selLookupVals\").find(\"option:selected\").text();\n    var val = sbv.lookupValues.get(parseInt(valId));\n\n    alertify.confirm(\"Delete \" + valText, function (e) {\n        if (e) {\n            sbv.lookupValues.remove(val);\n            refreshLookupValues();\n        } \n    });\n}\n\n// returns array for placement into entry editor object reference\nfunction getLookupValues(lkpName) {\n    var lkp = sbv.lookups.find({ 'name': { '$eq' : lkpName }});\n    var valObjs = sbv.lookupValues.find({ 'listId': { '$eq' : lkp[0].$loki }});\n    var vals = [\"\"];\n\n    for(var idx=0; idx < valObjs.length; idx++) {\n        vals.push(valObjs[idx].name);\n    }\n\n    return vals;\n}\n\n// returns array for placement into schema def obj reference\nfunction getLookupLists() {\n    var listNames = [\"\"];\n\n    for(var idx=0; idx < sbv.lookups.data.length; idx++) {\n        listNames.push(sbv.lookups.data[idx].name);\t\n    }\n\n    return listNames;\n}\n\nfunction generateEditorSchema(schemaId) {\n    var schema = sbv.schemas.get(schemaId);\n    var propertiesObject = {};\n    for(var idx=0; idx < schema.Properties.length; idx++) {\n        var prop = schema.Properties[idx];\n\n        if (prop.srcLookup != \"\") {\n            var propAttrs = { type: \"string\", enum: getLookupValues(prop.srcLookup) };\n            propertiesObject[prop.propName] = propAttrs;\n        }\n        else {\n            if (prop.type == \"date\") {\n                var propAttrs = { type: \"string\", format: \"date\" };\n                propertiesObject[prop.propName] = propAttrs;\n            }\n            else {\n                if (prop.type == \"textarea\") {\n                    var propAttrs = { type: \"string\", format: \"textarea\", rows: \"5\" };\n                    propertiesObject[prop.propName] = propAttrs;\n                }\n                else {\n                    var propAttrs = { type: prop.type };\n                    propertiesObject[prop.propName] = propAttrs;\n                }\n            }\n        }\n    }\n\n    return propertiesObject;\n}\n\nfunction addEditorItem() {\n    var itemId = $(\"#selSchemaList\").val();\n\n    if (itemId == null) return;\n\n    initDataEditor();\n\n    $(\"#selSchemaItems\").val([]);\n\n    // override styles imposed by json editor or apply additional functionality\n    //$(\"input[data-schemaformat=date]\").datepicker();\n    $(\"textarea[data-schemaformat=textarea]\").css(\"height\", \"150px\");\n    $(\"#divEditorButtons\").show();\n\n}\n\nfunction saveEditorItem() {\n    var selItem = $(\"#selSchemaItems\").val();\n    var selSchema = $(\"#selSchemaList\").val();\n    var schemaName = $(\"#selSchemaList\").find(\"option:selected\").text();\n    //var schemaItems = sbv.db.getCollection(schemaName);\n    var schemaRec = sbv.schemas.get(parseInt(selSchema));\n\n    // If dynamic collection doesn't exist yet (this is first item), create it\n    var schemaItems = null;\n    try {\n        schemaItems = sbv.db.getCollection(schemaName);\n    }\n    catch (err) {\n        schemaItems = sbv.db.addCollection(schemaName);\n    };\n\n    if (selItem == null) {\n        var newObj = sbv.entryEditor.getValue();\n\n        schemaItems.insert(newObj);\n\n        refreshSchemaItems();\n        addEditorItem();\n        alertify.success(\"added\");\n    }\n    else {\n        var oldObj = schemaItems.get(parseInt(selItem));\n        var newObj = sbv.entryEditor.getValue();\n\n        for (var idx=0; idx < schemaRec.Properties.length; idx++) {\n            var propName = schemaRec.Properties[idx].propName;\n\n            oldObj[propName] = newObj[propName];\n        }\n\n        // in case they changed the 'name' property, item list would change\n        refreshSchemaItems();\n        addEditorItem();\n        alertify.log(\"updated\");\n    }\n\n}\n\nfunction delEditorItem() {\n    var selItem = $(\"#selSchemaItems\").val();\n    var schemaName = $(\"#selSchemaList\").find(\"option:selected\").text();\n    var schemaItems = sbv.db.getCollection(schemaName);\n    var oldObj = schemaItems.get(parseInt(selItem));\n\n    schemaItems.remove(oldObj);\n\n    // If no more items in dynamic collection, remove the collection but keep its schema\n    // This is necessary due to loki.js persistence bug with empty collections.\n    if (schemaItems.data.length == 0) {\n        sbv.db.removeCollection(schemaName);\n    }\n\n    refreshSchemaItems();\n\n    alertify.log(\"deleted\");\n}\n\n// when user changes the selected schema in shema manage screen, this displays contents\nfunction manageSchemaChange() {\n    resetManageEditor();\n\n    var selId = $(\"#selSchemaManage\").val();\n    var schema = sbv.schemas.get(parseInt(selId));\n\n    var propertiesArray = [];\n    for(var idx=0; idx < schema.Properties.length; idx++) {\n        var prop = schema.Properties[idx];\n\n        if (prop.srcLookup != \"\") {\n            var propObj = { name: prop.propName, type: prop.type, srcLookup: prop.srcLookup };\n            propertiesArray.push(propObj);\n        }\n        else {\n            var propObj = { name: prop.propName, type: prop.type };\n            propertiesArray.push(propObj);\n        }\n    }\n\n    var editorObj = { \n        SchemaName: schema.Name,\n        PropertyList: propertiesArray\n    };\n\n    sbv.editor.setValue(editorObj);\n\n}\n\nfunction resetManageEditor() {\n    var editorObj = { \n        SchemaName: \"\", \n        PropertyList: [\n            {\n                name: \"Name\",\n                type: \"string\",\n                srcLookup: \"\"\n            }\n        ] \n    };\n\n    sbv.editor.setValue(editorObj);\n}\n\nfunction newSchema()\n{\n    $(\"#selSchemaManage\").val([]);\n\n    resetManageEditor();\n}\n\nfunction saveSchema() \n{\n    var selId = $(\"#selSchemaManage\").val();\n    var schemaName = $(\"#selSchemaManage\").find(\"option:selected\").text();\n\n    var editorObj = sbv.editor.getValue();\n\n    if (editorObj.SchemaName === \"\") {\n        alertify.error(\"Must Provide a schema name\");\n        return;\n    }\n\n    var newObj = {\n        Name: editorObj.SchemaName,\n        Properties : []\n    };\n\n    for(var idx=0; idx < editorObj.PropertyList.length; idx++) {\n        var prop = editorObj.PropertyList[idx];\n\n        var newProp = { propName: prop.name, type: prop.type, srcLookup: prop.srcLookup };\n        if (newProp.srcLookup == null) newProp.srcLookup = \"\";\n\n        newObj.Properties.push(newProp);\n    }\n\n    if (selId == null) {\n        sbv.schemas.insert(newObj);\n\n        refreshSchemas();\n        resetManageEditor();\n\n        alertify.success(\"schema added\");\n    }\n    else {\n        var oldObj = sbv.schemas.get(parseInt(selId));\n\n        if (oldObj.Name != newObj.Name) {\n            alertify.confirm(\"This will rename collection, are you sure?\", function (e) {\n                if (e) {\n                    var itemColl = sbv.db.getCollection(schemaName);\n\n                    itemColl.name = newObj.Name;\n                    itemColl.objType = newObj.Name;\n\n                    for(var idx=0; idx < itemColl.data.length; idx++) { \n                        var item = itemColl.data[idx];\n\n                        item.objType = newObj.Name;\n                    }\n\n                    oldObj.Name = newObj.Name;\n                    oldObj.Properties = newObj.Properties;\n\n                    // in case the name changed, refresh list\n                    refreshSchemas();\n                    resetManageEditor();\n\n                    alertify.success(\"schema renamed and updated\");\n                    return;\n                } \n                else { return; }\n            });\n        }\n        else\n        {\n            // name didnt change, maybe properties did, all are in this one property array\n            oldObj.Properties = newObj.Properties;\n\n            alertify.success(\"schema updated\");\n        }\n    }\n}\n\nfunction deleteSchema() {\n    var selId = $(\"#selSchemaManage\").val();\n    if (selId == null) return;\n\n    var schema = sbv.schemas.get(parseInt(selId));\n\n    alertify.confirm(\"Delete schema \" + schema.Name + \"?\", function (e) {\n        if (e) {\n            sbv.schemas.remove(schema);\n            sbv.db.removeCollection(schema.Name); \n\n            alertify.success(\"deleted\");\n            refreshSchemas();\n        }\n    });\n\n}\n\nfunction makeTestData() {\n    sbv.lookups = sbv.db.addCollection('lookups'); \n    sbv.lookupValues = sbv.db.addCollection('lookupValues'); \n    sbv.schemas = sbv.db.addCollection('schemas'); \n\n    var lkp1 = sbv.lookups.insert({ name:'PortTypes' });\n    sbv.lookupValues.insert({ listId: lkp1.$loki, name: 'HDMI' });\n    sbv.lookupValues.insert({ listId: lkp1.$loki, name: 'HDMI (mini)' });\n    sbv.lookupValues.insert({ listId: lkp1.$loki, name: 'USB' });\n    sbv.lookupValues.insert({ listId: lkp1.$loki, name: 'USB (mini)' });\n    sbv.lookupValues.insert({ listId: lkp1.$loki, name: 'Thunderbolt' });\n\n    var lkp2 = sbv.lookups.insert({ name: \"Tablet Manufacturers\" });\n    sbv.lookupValues.insert({ listId: lkp2.$loki, name: 'Amazon' });\n    var apl = sbv.lookupValues.insert({ listId: lkp2.$loki, name: 'Apple' });\n    sbv.lookupValues.insert({ listId: lkp2.$loki, name: 'Google' });\n    var ms = sbv.lookupValues.insert({ listId: lkp2.$loki, name: 'Microsoft' });\n    sbv.lookupValues.insert({ listId: lkp2.$loki, name: 'Samsung' });\n    sbv.lookupValues.insert({ listId: lkp2.$loki, name: 'Sony' });\n\n    sbv.schemas.insert({ Name: 'Tablets', Properties: [\n        { propName: 'Name', type: \"string\", srcLookup: \"\"},   \n        { propName: 'Manufacturer', type: \"lookup\", srcLookup: \"Tablet Manufacturers\" },\n        { propName: 'Screen Size', type: \"number\", srcLookup: \"\" },\n        { propName: 'Release Date', type: \"date\", srcLookup: \"\" },\n        { propName: 'Notes', type: \"textarea\", srcLookup: \"\" }\n    ]});\n\n    // Each schema that the user creates gets its own Loki Collection\n    var tablets = sbv.db.addCollection('Tablets');\n    tablets.insert({ Name: \"IPAD Mini\", Manufacturer: \"Apple\", \"Screen Size\": 7.9, \"Release Date\": \"10/23/2012\", \"Notes\": \"thin...\" });\n    tablets.insert({ Name: \"Surface RT\", Manufacturer: \"Microsoft\", \"Screen Size\": 10.6, \"Release Date\": \"10/26/2012\", \"Notes\": \"Office 2013; Built-in stand.\" });\n}\n\nfunction initProgram() {\n\n    if (!window.indexedDB) {\n        $(\"#btnSave\").hide();\n        makeTestData();        \n\n        refreshLookups();\n        refreshSchemas();\n        initSchemaEditor();\n        resetManageEditor();\n\n        return;\n    }\n\n    sandbox.db.getAppKey('JSON Databank', 'DatabankInfo', function(result) {\n        if (result == null || result.id === 0) {\n            // Nothing saved yet, initialize a new loki db with single note\n            makeTestData();\n\n            refreshLookups();\n            refreshSchemas();\n            initSchemaEditor();\n            resetManageEditor();\n        }\n        else {\n            sbv.db.loadJSON(result.val);\n            sbv.lookups = sbv.db.getCollection(\"lookups\");\n            sbv.lookupValues = sbv.db.getCollection(\"lookupValues\");\n            sbv.schemas = sbv.db.getCollection(\"schemas\");\n\n            refreshLookups();\n            refreshSchemas();\n            initSchemaEditor();\n            resetManageEditor();\n        }\n    });\n}\n\ninitProgram();\n\nfunction showItem() {\n    var itemId = $(\"#selSchemaItems\").val();\n\n    if (itemId == null) return;\n\n    initDataEditor();\n\n    var schemaName = $(\"#selSchemaList\").find(\"option:selected\").text();\n    var itemColl = sbv.db.getCollection(schemaName);\n    var itemObj = itemColl.get(parseInt(itemId));\n    var copiedObject = jQuery.extend({},itemObj);\n    delete copiedObject.$loki;\n    delete copiedObject.objType;\n    sbv.entryEditor.setValue(copiedObject);\n\n    // override styles imposed by json editor or apply additional functionality\n    //$(\"input[data-schemaformat=date]\").datepicker();\n    $(\"textarea[data-schemaformat=textarea]\").css(\"height\", \"150px\");\n    $(\"#divEditorButtons\").show();\n}\n\nfunction initDataEditor() {\n    var schemaId = $(\"#selSchemaList\").val();\n    schemaId = parseInt(schemaId);\n\n    $(\"#entry_editor_holder\").empty();\n\n    var propArray = generateEditorSchema(schemaId);\n\n    sbv.entryEditor = new JSONEditor(document.getElementById('entry_editor_holder'), {\n        iconlib: \"fontawesome4\",\n        //theme: 'jqueryui',    //jqueryui render looks kind of ugly so just use default\n        disable_properties: true,\n        disable_edit_json : true,\n        disable_collapse: true,\n\n        schema: {\n            type: \"object\",\n            title: \"Item Entry\",\n            properties: propArray\n        }\n    });\n}\n\nfunction initSchemaEditor() {\n    $(\"#editor_holder\").empty();\n\n    // Define Form Schema for OUR reduced 'Schema' implementation\n    // This is a schema for schemas :S\n    sbv.editor = new JSONEditor(document.getElementById('editor_holder'),{\n        iconlib: \"fontawesome4\",\n        disable_properties: true,\n        disable_edit_json : true,\n        disable_collapse: true,\n        //theme: 'jqueryui',    //jqueryui render looks kind of ugly so just use default\n        schema: {\n            type: \"object\",\n            title: \"Schema Properties\",\n            properties: {\n                SchemaName: {\n                    title: \"Name\",\n                    type: \"string\"\n                },\n                PropertyList: {\n                    type: \"array\",\n                    format: \"table\",\n                    title: \"Properties\",\n                    uniqueItems: true,\n                    items : {\n                        type: \"object\",\n                        properties: {\n                            \"name\": {\n                                title: \"Name\",\n                                type: \"string\"\n                            },\n                            \"type\": {\n                                title: \"Type\",\n                                type: \"string\",\n                                enum: [\"string\", \"textarea\", \"int\", \"number\", \"boolean\", \"date\", \"lookup\"],\n                                default: \"String\"\n                            },\n                            \"srcLookup\": {\n                                title: \"SrcLookup\",\n                                type: \"string\",\n                                enum: getLookupLists()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    });\n}\n\n//\n// I/O ROUTINES\n//\nfunction saveTrident() {\n    var result = JSON.stringify(sbv.db);\n\n    sandbox.db.setAppKey('JSON Databank', \"DatabankInfo\", result, function(e) {\n        if (e.success) alertify.success(\"Databank Saved\");\n        else alertify.error(\"Error encountered during save\");\n    });\n}\n\nfunction exportDatabank() {\n    var result = JSON.stringify(sbv.db);\n\n    sandbox.files.saveTextFile(\"MyDatabank.jdb\", result);\n}\n\nfunction importDatabank() {\n    sandbox.files.userfileShow();\n}\n\nfunction EVT_UserLoadCallback(filestring, filename) {\n    sandbox.files.userfileHide();\n\n    sbv.db.loadJSON(filestring);\n\n    // we rehydrated loki db object and collections but old collection references still\n    // point to old db object. \n    sbv.lookups = sbv.db.getCollection(\"lookups\");\n    sbv.lookupValues = sbv.db.getCollection(\"lookupValues\");\n    sbv.schemas = sbv.db.getCollection(\"schemas\");\n\n    refreshLookups();\n    refreshSchemas();\n    initSchemaEditor();\n    resetManageEditor();\n}"
}