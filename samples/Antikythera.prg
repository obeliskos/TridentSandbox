{
  "progName": "Antikythera",
  "htmlText": "<style>\nselect.unitlist  {\n\twidth:100%;\n    font-size:20px;\n}\n\nfieldset { \n\tpadding: 1em;\n    font:80%/1 sans-serif;\n\tborder:1px solid black; \n}\nlabel.lb4 {\n\tfloat:left;\n    width:25%;\n    margin-right:0.5em;\n    padding-top:0.2em;\n    text-align:right;\n    font-weight:bold;\n}\n\nlegend {\n    padding: 0.2em 0.5em;\n    border:1px solid black;\n    color:black;\n    font-size:90%;\n    text-align:right;\n}\n\n</style>\n\n<ul class=\"tnavlist\">\n<li class=\"tnavli\"><a class=\"tnava\" onclick=\"showDiv(1);\" href=\"javascript:void(0)\"><i class=\"fa fa-list-ol\"></i> Summary</a></li>\n<li class=\"tnavli\"><a class=\"tnava\" onclick=\"showDiv(2);\" href=\"javascript:void(0)\"><i class=\"fa fa-gear\"></i> Set Dates</a></li>\n<li class=\"tnavli\"><a class=\"tnava\" onclick=\"showDiv(3);\" href=\"javascript:void(0)\"><i class=\"fa fa-info-circle\"></i> About</a></li>\n</ul>\n\n<div id=\"divSummary\">\n\t<h3>Antikythera : TaskList Summary</h3>\n\n<table>\n    <tr>\n        <td>\n            <div id=\"divTiles\"></div>\n        </td>\n    </tr>\n    <tr>\n        <td style=\"padding-top:10px\">\n            <input class=\"vpatel\" type=\"radio\" id=\"radio1\" name=\"radios\" value=\"all\" onclick=\"refreshTasks('Two Month')\" checked='checked'>\n            <label for=\"radio1\">Two Month &plusmn;</label>\n            <input class=\"vpatel\" type=\"radio\" id=\"radio3\" name=\"radios\" value=\"true\" onclick=\"refreshTasks('Upcoming')\">\n            <label for=\"radio3\">Upcoming</label>\n            <input class=\"vpatel\" type=\"radio\" id=\"radio4\" name=\"radios\" value=\"true\" onclick=\"refreshTasks('Previous')\">\n            <label for=\"radio4\">Previous</label>\n\n            <ul id=\"taskListView\" class=\"tlist\"></ul><br/>\n\n            <button class=\"minimal\" onclick=\"refreshTasks()\">Refresh</button>\n        </td>\n    </tr>\n</table>\n\n</div>\n\n<div id=\"divConfig\" style=\"display:none\">\n<h3>Configure Dates</h3>\n\t<ul id=\"editListView\" class=\"tlist\"></ul><br/>\n    <button class=\"minimal\" onclick=\"addTask()\"><i class=\"fa fa-plus\"></i> Add</button>&nbsp;\n\t<button class=\"minimal\" onclick=\"editTask()\"><i class=\"fa fa-pencil-square-o\"></i> Edit</button>&nbsp;\n    <button class=\"minimal\" onclick=\"deleteTask()\"><i class=\"fa fa-trash-o\"></i> Delete</button>&nbsp;\n    <br/><br/>\n    <div id=\"divTaskEdit\" style=\"display:none\">\n    \t<fieldset>\n            <legend>Task Settings :</legend>\n            <input id=\"hfTaskId\" type=\"hidden\" />\n            <label class=\"lb4\" for=\"txtTaskDate\">Task Date :</label>\n            <input id=\"txtTaskDate\" style=\"width:240px\"/>\n            <label style=\"padding-left:30px\" for=\"chkTaskDone\">Task Complete : </label>\n            <input id=\"chkTaskDone\" type=\"checkbox\"/><br/><br/>\n        \t<label class=\"lb4\" for=\"txtTaskName\">Task Name : </label>\n            <input id=\"txtTaskName\" style=\"width:240px\"/><br/><br/>\n         \t<label class=\"lb4\" for=\"txtTaskDescription\">Task Description : </label>\n            <textarea id=\"txtTaskDescription\" spellcheck='false' style=\"width:65%; height:80px;\"></textarea><br/><br/>\n            <label class=\"lb4\" for=\"txtRecurInterval\">Repeat Every :</label>\n            <input id=\"txtRecurInterval\" style=\"width:50px\"/>\n\t\t\t<select id=\"selRecurPattern\">\n            <option value=\"0\">None</option>\n            <option value=\"1\">Days</option>\n            <option value=\"2\">Weeks</option>\n            <option value=\"3\">Months</option>\n            <option value=\"4\">Years</option>\n            </select>\n            <label>,&nbsp; until : </label>\n            <input id=\"txtRecurUntil\" style=\"width:100px\"/>\n            <label>&nbsp; (leave blank for indefinite)</label>\n            \n            <br/><br/> <br/>   \n        \t<span style=\"float:right; margin-right:100px\">\n\t            <button class=\"minimal\" onclick=\"saveTask()\"><i class=\"fa fa-save\"></i> Save</button>\n    \t        <button class=\"minimal\" onclick=\"$('#divTaskEdit').hide();\"><i class=\"fa fa-ban\"></i> Cancel</button>\n            </span>\n        </fieldset>\n    </div>\n\n</div>\n\n<div id=\"divAbout\" style=\"display:none\">\n<h3>About Antikythera</h3>\n\n<p>Antikythera is a 'Days Since / Days Until' program which allows you to enter tasks to be reminded of.&nbsp; The program \nwill synchronize them and report on how long ago or soon they will occur in the future.\n</p>\n<p>\nThe Summary Page consists of a Metro.JS Live Tile view as well as a Trident list for viewing raw data on projections.\nThe live tiles show future tasks up to a year and past tasks up to a month.  For any given \nrecurring task, only the next (future) occurence is shown.  Tasks designated as 'done' do not appear.\n</p>\n</div>",
  "scriptText": "var sbv = {\n  db: new loki('Tasks'),\n  taskList: null,\n  \n  taskLV: null,\n  editLV: null,\n  \n  RecurModeEnum:  Object.freeze({\"None\":0, \"Days\":1, \"Weeks\":2, \"Months\":3, \"Years\":4 })\n\n}\n\nfunction EVT_CleanSandbox() {\n\t$(\".live-tile, .flip-list\").not(\".exclude\").liveTile('stop');\n    delete sbv.taskList;\n\tdelete sbv.db;\n    delete sbv.taskLV;\n    delete sbv.RecurModeEnum;\n}\n  \nfunction showDiv(divIndex) {\n\t$(\"#divSummary\").hide();\n\t$(\"#divConfig\").hide();\n\t$(\"#divAbout\").hide();\n\n\tswitch(divIndex) {\n        case 1: $(\"#divSummary\").show(); break;\n        case 2: $(\"#divConfig\").show(); break;\n        case 3: $(\"#divAbout\").show(); break;\n    }\n}\n\nfunction dbInit() {\n    \n\tsbv.taskLV = new TridentList(\"taskListView\", taskSelected);\n    sbv.taskLV.makeBright();\n    \n    sbv.editLV = new TridentList(\"editListView\", taskSelected);\n    sbv.editLV.makeBright();\n    \n\tsbv.taskList = sbv.db.addCollection('tasks', 'Tasks');\n    \n    if (VAR_TRIDENT_DB) {\n\n\t\tVAR_TRIDENT_API.GetAppKey('Antikythera', 'TaskList', function(result) {\n        \tif (result == null || result.id == 0) return;\n            \n       \t\tsbv.db.loadJSON(result.val);\n\n\t\t\t// we rehydrated loki db object and collections but old collection references still\n  \t\t\t// point to old db object. \n\t\t\tsbv.taskList = sbv.db.getCollection(\"tasks\");\n\t\n\t\t\trefreshTasks('Two Month');\n        });\n    }\n  \telse {\n      \talertify.log(\"Trident Database is not available.\");\n  \t}\n    \n    \n}\n\nfunction dbSave() {\n\tif(VAR_TRIDENT_DB) {\n    \t\n        VAR_TRIDENT_API.SetAppKey('Antikythera', 'TaskList', JSON.stringify(sbv.db), function(result) {\n\t\t\tif (result) alertify.log('Antikythera database saved to Trident Database');\n            else alertify.error('Unable to save record');\n\t\t});\n  \t}\n  \telse {\n\t\talertify.log(\"Trident Database is not available.\");\n\t}\n}\n\nfunction taskSelected(sender, key) {\n\t$('#divTaskEdit').hide();    \n}\n\nfunction getTasks() {\n    var arrCopy = sbv.taskList.data.slice(0);\n    \n\tvar sorted = arrCopy.sort(function (x, y) { \n   \t\tif (moment(x.taskDate) < moment(y.taskDate)) return 1;\n   \t\tif (moment(x.taskDate) > moment(y.taskDate)) return -1;\n   \t\treturn 0;\n   \t});\n        \n\treturn sorted;\n}\n\nfunction sortTasks(mode) {\n    // clone array so sorting occurs in copy\n    var arrCopy = sbv.taskList.data.slice(0);\n    \n    if (mode == 'Upcoming') {\n    \t//arrCopy = arrCopy.filter(function(x) { return (moment(x.taskDate) >= moment().startOf('day')) });\n        arrCopy = projectTasks(moment().startOf('day'), moment().add('years', 1));\n        \n\t\tvar sorted = arrCopy.sort(function (x, y) { \n    \t\tif (moment(x.taskDate) > moment(y.taskDate)) return 1;\n    \t\tif (moment(x.taskDate) < moment(y.taskDate)) return -1;\n    \t\treturn 0;\n    \t});\n        \n        return sorted;\n    }\n    \n    if (mode == 'Two Month') {\n        arrCopy = projectTasks(null, null);\n\n\t\tvar sorted = arrCopy.sort(function (x, y) { \n    \t\tif (moment(x.taskDate) < moment(y.taskDate)) return 1;\n    \t\tif (moment(x.taskDate) > moment(y.taskDate)) return -1;\n    \t\treturn 0;\n    \t});\n        \n        return sorted;\n    }\n    \n    if (mode == 'Tiles') {\n    \tvar start = moment().startOf('day').subtract('month', 1);\n        var end = moment().startOf('day').add('years', 1);\n        arrCopy = projectTasks(start, end, true);\n\n\t\tvar sorted = arrCopy.sort(function (x, y) { \n    \t\tif (moment(x.taskDate) < moment(y.taskDate)) return 1;\n    \t\tif (moment(x.taskDate) > moment(y.taskDate)) return -1;\n    \t\treturn 0;\n    \t});\n        \n        return sorted;\n    }\n    \n    if (mode == 'All') {\n\t\tvar sorted = arrCopy.sort(function (x, y) { \n    \t\tif (moment(x.taskDate) < moment(y.taskDate)) return 1;\n    \t\tif (moment(x.taskDate) > moment(y.taskDate)) return -1;\n    \t\treturn 0;\n    \t});\n        \n        return sorted;\n    }\n    \n    if (mode == 'Previous') {\n    \tarrCopy = arrCopy.filter(function(x) { return (moment(x.taskDate) < moment()) });\n\n\t\tvar sorted = arrCopy.sort(function (x, y) { \n    \t\tif (moment(x.taskDate) < moment(y.taskDate)) return 1;\n    \t\tif (moment(x.taskDate) > moment(y.taskDate)) return -1;\n    \t\treturn 0;\n    \t});\n        \n        return sorted;\n    }\n    \n}\n\nfunction copyTask(task) {\n\tvar copy = { \n        \ttaskName: task.taskName, \n            taskDesc: task.taskDesc, \n            taskDate: Date.parse(taskDate),\n            taskDone: taskDone,\n            recurPattern: recurPattern, \n            recurInterval: recurInterval,\n            recurUntil: recurUntil,\n            category: null,\n            color: null,\n            priority: null\n\t\t}\n}\n\nfunction projectTasks(startDate, endDate, firstOccurrenceOnly) \n{\n    var arrCopy = sbv.taskList.data.slice(0);\n    arrCopy = arrCopy.filter(function(x) { return (!x.taskDone) });\n    \n    var result = [];\n    \n    firstOccurrenceOnly = (typeof firstOccurrenceOnly == 'undefined' ? false : firstOccurrenceOnly);\n    \n    if (startDate == null) startDate = moment().startOf('day').subtract('months', 2);\n    if (endDate == null) endDate = moment().startOf('day').add('months', 2);\n    \n    // for each recurring task, project\n    for(idx=0; idx < arrCopy.length; idx++) {\n    \tvar task = arrCopy[idx];\n        \n    \tif (task.recurPattern == 0) {\n        \tif (moment(task.taskDate) >= startDate && moment(task.taskDate) <= endDate) result.push(task);\n        }\n        else {\n            var arrDates = [ ];\n    \t\tvar fif = false;  // first occurrence found flag\n            \n            var runDate = moment(task.taskDate);\n            while (runDate <= endDate && !fif) {\n        \t\tif (runDate > startDate) {\n                    var newTask = jQuery.extend({}, task); // Shallow copy\n                    newTask.taskDate = runDate;\n                    newTask.nonPersistent = (runDate > moment(task.taskDate));\t// 'projected' designation\n\t\t\t\t\t\n                    if (firstOccurrenceOnly && (runDate > moment())) fif = true; \n                    \n\t\t\t\t\tresult.push(newTask);\n                }\n                \n                // Progress date\n                switch (task.recurPattern) {\n                \tcase 0 : runDate = endDate; break; // bad task has no interval so terminate\n                \tcase 1 : runDate = moment(runDate).add('days', task.recurInterval).toDate(); break; // days\n                    case 2 : runDate = moment(runDate).add('weeks', task.recurInterval).toDate(); break; // weeks\n                    case 3 : runDate = moment(runDate).add('months', task.recurInterval).toDate(); break; // months\n                    case 4 : runDate = moment(runDate).add('years', task.recurInterval).toDate(); break; // years\n                }\n            }\n        }\n    }\n    \n    return result;\n}\n\nfunction generateTiles(tasks) {\n\t$(\".live-tile, .flip-list\").not(\".exclude\").liveTile('stop');\n\t$(\"#divTiles\").empty();\n    \n    for(idx=0; idx < tasks.length; idx++) {\n    \tvar delay = Math.floor(Math.random() * 400) + 4800;\n        \n        var color = \"red\";\n        switch ((idx+1)%4) {\n        \tcase 0 : color = \"red\"; break;\n            case 1 : color = \"green\"; break;\n            case 2 : color = \"blue\"; break;\n            case 3 : color = \"mango\"; break;\n            case 4 : break;\n        }\n        \n    \tvar listitemDiv = document.createElement(\"div\");\n        listitemDiv.className = color + \" live-tile\";\n\t\t$(listitemDiv).attr(\"data-mode\", \"carousel\"); // flip, carousel, flip-list\n\t\t$(listitemDiv).attr(\"data-delay\", delay.toString());\n\n\t\tvar t1 = document.createElement(\"div\");\n        \n    \tvar numberDiv = document.createElement(\"div\");\n        $(numberDiv).css(\"height\", \"110px\");\n        $(numberDiv).css(\"line-height\", \"110px\");\n        $(numberDiv).css(\"text-align\", \"center\");\n        $(numberDiv).css(\"font-size\", \"64px\");\n     \tvar delta = moment(tasks[idx].taskDate).diff(moment().startOf('day'), 'days')\n        $(numberDiv).text(delta);\n        var pos = (parseInt(delta) >= 0);\n        \n       \tvar descSpan = document.createElement(\"span\");\n\t\tdescSpan.className = \"tile-title\";\n        var desc = (pos?\"Days Until\":\"Days Since\") + \"<br/><br/><b>\" + tasks[idx].taskName + \"</b>\";\n        $(descSpan).html(desc);\n        \n    \tt1.appendChild(numberDiv);\n    \tt1.appendChild(descSpan);\n    \tlistitemDiv.appendChild(t1);\n        \n\t\tvar t2 = document.createElement(\"div\");\n        \n    \tvar numberDiv2 = document.createElement(\"div\");\n        $(numberDiv2).css(\"height\", \"100px\");\n        $(numberDiv2).css(\"line-height\", \"100px\");\n        $(numberDiv2).css(\"text-align\", \"center\");\n        $(numberDiv2).css(\"font-size\", \"52px\");\n        $(numberDiv2).text(delta);\n        \n       \tvar descSpan2 = document.createElement(\"span\");\n\t\tdescSpan2.className = \"tile-title\";\n        var desc2 = (pos?\"Days Until\":\"Days Since\") + \"<br/><br/>\" + tasks[idx].taskDesc;\n        $(descSpan2).html(desc2);\n        \n    \tt2.appendChild(numberDiv2);\n    \tt2.appendChild(descSpan2);\n    \tlistitemDiv.appendChild(t2);\n        \n        \n        \n        $(\"#divTiles\").append(listitemDiv);\n    }\n    \n   $(\".live-tile, .flip-list\").not(\".exclude\").liveTile();\n}\n\nfunction refreshTasks(mode) {\n    sbv.taskLV.clearList();\n    sbv.editLV.clearList();\n    \n    if (mode == null) {\n    \tvar radio = $(\".vpatel:checked\").attr(\"id\");\n        \n        switch(radio) {\n\t\t\tcase \"radio1\" : mode = \"Two Month\"; break;\n            case \"radio3\" : mode = \"Upcoming\"; break;\n            case \"radio4\" : mode = \"Previous\"; break;\n\t\t}\n    }\n    \n    var sortedTasks = sortTasks(mode);\n    var tileTasks = sortTasks(\"Tiles\");\n    var allTasks = getTasks();\n    \n    generateTiles(tileTasks);\n    \n\tfor (idx = 0; idx < sortedTasks.length; idx++) {\n    \tvar obj = sortedTasks[idx];\n        var recStatus = \"\";\n        if (obj.recurPattern!=0) {\n        \trecStatus = (obj.nonPersistent?\"Recurring | \":\"Recurring Start |\");\n        }\n        \n\t\tsbv.taskLV.addListItem(obj.id, obj.taskName, \"<span style='color:#464'>\" + moment(obj.taskDate).format('L') + \"</span> (\" + moment(obj.taskDate).diff(moment(), 'days') + \" days) \" + recStatus + obj.taskDesc, true);\n    }\n    \n\tfor (idx = 0; idx < allTasks.length; idx++) {\n    \tvar obj = allTasks[idx];\n        \n        sbv.editLV.addListItem(obj.id, obj.taskName, \"<span style='color:#464'>\" + moment(obj.taskDate).format('L') + \"</span> (\" + moment(obj.taskDate).diff(moment(), 'days') + \" days) \" + recStatus + obj.taskDesc, true);\n    }\n    \n}\n\nfunction addTask() {\n\t$(\"#txtTaskText\").text(\"\");\n    $(\"#hfTaskId\").val(\"\");\n\t$(\"#divTaskEdit\").show();\n    \n    $(\"#txtTaskDate\").val(\"\");\n    $(\"#txtTaskName\").val(\"\");\n    $(\"#txtTaskDescription\").text(\"\");\n    $(\"#chkTaskDone\").prop('checked', false);\n    $(\"#txtRecurInterval\").val(\"\");\n    $(\"#selRecurPattern\").val(0);\n}\n\nfunction editTask() {\n\tvar taskId = sbv.editLV.listSettings.selectedId;\n\n\tvar task = sbv.taskList.get(parseInt(taskId));\n    \n\t$(\"#hfTaskId\").val(taskId);\n    $(\"#txtTaskDate\").val(moment(task.taskDate).format('L'));\n    ;\n   \t$(\"#txtTaskName\").val(task.taskName);\n  \t$(\"#txtTaskDescription\").val(task.taskDesc);\n    \n    $(\"#chkTaskDone\").prop('checked', task.taskDone);\n    $(\"#txtRecurInterval\").val(task.recurInterval);\n    $(\"#selRecurPattern\").val(task.recurPattern);\n    \n    if (task.recurUntil != null) {\n    \t$(\"#txtRecurUntil\").val(moment(task.recurUntil).format('L'));\n    }\n    else  {\n    \t$(\"#txtRecurUntil\").val(\"\");\n    }\n    \n\t$(\"#divTaskEdit\").show();\n    \n}\n\nfunction deleteTask() {\n\tvar key = sbv.editLV.listSettings.selectedId;\n    \n\talertify.confirm(\"Are you sure you want to delete this task?\", function (e) {\n\t\tif (e) {\n\t\t\tsbv.taskList.remove(sbv.taskList.get(key));\n\t\t\trefreshTasks();\n\t\t\tdbSave();\n\t\t} \n    });\n}\n\nfunction saveTask() {\n\tvar key = $(\"#hfTaskId\").val();\n    \n    var taskDate = $(\"#txtTaskDate\").val();\n\tvar taskName = $(\"#txtTaskName\").val();\n\tvar taskDesc = $(\"#txtTaskDescription\").text();\n    var taskDone = $(\"#chkTaskDone\").is(':checked');\n    \n    var recurIntervalText = $(\"#txtRecurInterval\").val();\n\tvar recurInterval = 0;\n    if (recurIntervalText != \"\") recurInterval = parseInt(recurIntervalText);\n    \n\tvar recurPatternVal = $(\"#selRecurPattern\").val();\n    var recurPattern = parseInt(recurPatternVal.toString());\n    \n    var recurUntilText = $(\"#txtRecurUntil\").val();\n    var recurUntil = null;\n    if (recurUntilText != \"\") recurUntil = moment(recurUntilText).format('L');\n\n\tif (taskDate == \"\") {\n    \talertify.error(\"Task Date is required\");\n        return;\n    }\n    \n    if (taskName == \"\") {\n    \talertify.error(\"Task Name is required\");\n        return;\n    }\n\n\tif (key == \"\") {\n    \t// Unused/Unset properties allocated for future use\n\t\tsbv.taskList.insert({ \n        \ttaskName: taskName, \n            taskDesc: taskDesc, \n            taskDate: moment(taskDate).format('L'),\n            taskDone: taskDone,\n            recurPattern: recurPattern, \n            recurInterval: recurInterval,\n            recurUntil: recurUntil,\n            nonPersistent : false,\n            category: null,\n            color: null,\n            priority: null\n\t\t});\n    }\n    else {\n\t\tvar task = sbv.taskList.get(parseInt(key));\n    \t\n        task.taskDate = moment(taskDate).format('L');\n        task.taskName = taskName;\n        task.taskDesc = taskDesc;\n        task.taskDone = taskDone;\n        task.recurPattern = recurPattern;\n        task.recurInterval = recurInterval;\n        task.recurUntil = recurUntil;\n        task.category = null;\n        task.color = null;\n        task.priority = null;\n    }\n\n\trefreshTasks();\n    \n\t$(\"#divTaskEdit\").hide();\n    \n    dbSave();\n}\n\n\n\n$(\"#txtRecurUntil\").datepicker({ appendTo: \"#UI_MainPlaceholder\", changeMonth: true, changeYear: true });\n$(\"#txtTaskDate\").datepicker({ changeMonth: true, changeYear: true });\n\ndbInit();"
}