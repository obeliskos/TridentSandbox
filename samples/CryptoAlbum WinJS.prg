{
  "progName": "CryptoAlbum WinJS",
  "htmlText": "<style>\n    #droptarget { border: solid black 2px; width: 150px; height: 150px; }\n    #droptarget.active { border: solid red 4px; }\n    #droptargetAlbum { border: solid black 2px; width: 150px; height: 150px; }\n    #droptargetAlbum.active { border: solid red 4px; }\n\n    .divider{\n        width:25px;\n        height:auto;\n        display:inline-block;\n    }\n\n    .content,\n    #app {\n        height: 100%;\n    }\n\n    #app .win-splitviewpanetoggle {\n        float: left;\n    }\n\n    /* SplitView pane content style*/\n    #app .header {\n        white-space: nowrap;\n    }\n\n    #app .title {\n        font-size: 25px;\n        left: 50px;\n        margin-top: 6px;\n        vertical-align: middle;\n        display: inline-block;\n    }\n\n    #app .nav-commands {\n        margin-top: 20px;\n    }\n\n    .win-splitviewcommand-button {\n        background-color: transparent;\n    }\n\n    #app .win-splitview-pane-closed .win-splitviewcommand-label {\n        /*  Make sure pane content doesn't scroll if \n        SplitViewCommand label receives focus while pane is closed.\n        */\n        visibility: hidden;\n    }\n\n    /*SplitView content style : Change main background color here */\n    #app .win-splitview-content {\n        background-color: rgb(40,40,40);\n        overflow-y: scroll;\n    }\n\n    #app .contenttext {\n        margin-left: 20px;\n        margin-top: 6px;\n    }\n\n</style>\n\n<div id=\"app\">\n    <div id=\"dialogElement\"\n         data-win-control=\"WinJS.UI.ContentDialog\" \n         data-win-options=\"{\n                           title: 'Enter Password',\n                           primaryCommandText: 'Accept',\n                           secondaryCommandText: 'Cancel'\n                           }\">\n\n        <div id=\"divPassword\">\n            <input id=\"hfTaskId\" type=\"hidden\" />\n            <input id=\"txtDialogPassword\" style=\"width:300px; font-size:20px\" type=\"password\" style=\"border:1px solid #000\"\n                   onkeydown=\"if (event.keyCode == 13) $('.win-contentdialog-primarycommand').click()\"/>\n        </div>\n    </div>\n    \n    <!-- Main WinJS SplitView control -->\n    <div class=\"splitView\" data-win-control=\"WinJS.UI.SplitView\">\n        <!-- Pane area -->\n        <div style=\"min-height:800px\">\n            <div class=\"header\">\n                <button\n                        class=\"win-splitviewpanetoggle\"\n                        data-win-control=\"WinJS.UI.SplitViewPaneToggle\"\n                        data-win-options=\"{ splitView: select('.splitView') }\"\n                        ></button>\n                <div class=\"title\">Template Commands</div>\n            </div>\n\n            <div class=\"nav-commands\">\n                <!-- The icons referenced in these commands are WinJS icons, google for list of all available WinJS icon names -->\n                <div data-win-control=\"WinJS.UI.SplitViewCommand\" data-win-options=\"{ id:'cmdFullscreen', label: 'Fullscreen', icon: 'fullscreen', onclick: TemplateApp.fullscreenCommand }\"></div>\n                <div data-win-control=\"WinJS.UI.SplitViewCommand\" data-win-options=\"{ label: 'Viewer', icon: 'home', onclick: TemplateApp.homeCommand }\"></div>\n                <div data-win-control=\"WinJS.UI.SplitViewCommand\" data-win-options=\"{ label: 'Manage', icon: 'list', onclick: TemplateApp.editCommand }\"></div>\n                <div data-win-control=\"WinJS.UI.SplitViewCommand\" data-win-options=\"{ label: 'Settings', icon: 'settings', onclick: TemplateApp.settingsCommand }\"></div>\n                <div data-win-control=\"WinJS.UI.SplitViewCommand\" data-win-options=\"{ id:'cmdAbout', label: 'About', icon: 'help', onclick: TemplateApp.aboutCommand }\"></div>\n            </div>\n        </div>\n\n        <!-- Content area -->\n        <div class=\"contenttext\">\n            <div id=\"divHome\">\n                <div id=\"divViewTop\">\n                    <table width=\"100%\">\n                        <tr>\n                            <td valign=\"top\">\n                                <button class=\"minimal\" onclick=\"sandbox.files.userfileShow()\">Pick</button><br/><br/>&nbsp;&nbsp;- or -<br/><br/>\n                                <div id=\"droptargetAlbum\">Drop Album Here to view its images</div>\n                                <div id=\"divAlbumProgress\" style=\"display:none\">\n                                    <i class=\"fa fa-spinner fa-spin fa-2x\"></i>\n                                </div><br/>\n                            </td>\n                            <td align='center'>\n                                <div id=\"divViewThumbs\"></div>\n                            </td>\n                        </tr>\n                    </table>\n                </div>\n\n                <div id=\"divViewFullOuter\" style=\"display:none;\">\n                    <table id=\"tblViewLayout\" width=\"100%\" bgcolor=\"#fff\">\n                        <tr>\n                            <td align='center'>\n                                <div id=\"divViewFull\" style=\"overflow:auto\"></div>\n                            </td>\n                        </tr>\n                    </table>\n                </div>\n            </div>\n            <div id=\"divEdit\" style=\"display:none\">\n                <table width=\"100%\">\n                    <tr>\n                        <td valign=\"top\">\n                            <button class=\"minimal\" onclick=\"newAlbum()\">New</button><br/><br/>\n                            <div id=\"droptarget\">Drop Image Files Here to add to album</div><br/>\n                            <button class=\"minimal\" onclick=\"saveAlbum()\">Save</button><br/>\n                            <div id=\"divSaveProgress\" style=\"display:none\">\n                                <i class=\"fa fa-spinner fa-spin fa-2x\"></i>\n                            </div>\n                        </td>\n                        <td>\n                            <label>Click on a thumbnail to remove it from the album</label><br/>\n                            <div id=\"divThumbs\"></div>\n                        </td>\n                    </tr>\n                </table>\n\n                <div id=\"divFullImage\"></div>\n            </div>\n            <div id=\"divFile\" style=\"display:none\">\n                File Screen<br/><br/>\n\n                <ul>\n                    <li>If your program has no need to save data, you can get rid of this screen (which is a simple html div).</li>\n                    <li>If your program only needs to save a single file, you can alter the splitview command to call a save event off of the TemplateApp namespace (rather than an event to show this div)</li>\n                    <li>If your program needs to load/save, import/export multiple ways, this screen can contain the presentation logic to do so.</li>\n                </ul>\n\n\n            </div>\n            <div id=\"divSettings\" style=\"display:none\">\n                Settings<br/><br/>\n                <div id=\"scaleToggle\" data-win-control=\"WinJS.UI.ToggleSwitch\" data-win-options=\"{ title: 'Scale Image', checked: true, onchange: toggleScaleImage }\">\n                </div>\n                <div id=\"fullscreenToggle\" data-win-control=\"WinJS.UI.ToggleSwitch\" data-win-options=\"{ title: 'Fullscreen Viewer', checked: true, onchange: toggleFullscreenImage }\">\n                </div>\n                <br/>\n                <label>Thumbnail Size :</label>\n                <input id=\"rangeThumbSize\" type='range' min=80 max=300 step=20 onchange=\"thumbSizeChanged()\" />\n                <br/><br/>\n                <label>Base DataUri memory pressure :</label><br/>\n                <label id=\"lbl-memory-pressure\">0</label>\n            </div>\n        </div>\n    </div> \n\n    <!-- This is a template about box, which is rendered as a WinJS Content Dialog -->\n    <div class=\"box\">\n        <div id=\"dialogAbout\" \n             data-win-control=\"WinJS.UI.ContentDialog\" \n             data-win-options=\"{\n                               title: 'About CryptoAlbum',\n                               primaryCommandText: 'Close'\n                               }\">\n\n            <div align='center' style=\"display: inline-block; padding:4px; color:#494; width:160px\">\n            </div>&nbsp;\n            <p>App Version : <span id=\"spnVersion\"></span><br/>\n                TridentSandbox Version : <span id=\"spnTridentVersion\"></span></p>\n\n            <p>\n                <i style=\"color:#ff9\">CryptoAlbum</i> lets you import a series of images \n                into an 'album' which you can then save as a single, encrypted file.<br/><br/>\n\n            </p>\n\n            <div style=\"height: 50px; width: 1px;\"></div>\n        </div>\n    </div>\n\n</div>\n\n\n",
  "scriptText": "// go ahead and set version fields within the about dialog\n$(\"#spnVersion\").text(\"0.1 (alpha)\");\n$(\"#spnTridentVersion\").text(sandbox.volatile.version);\n\nDoInit();\nDoInitViewer();\n\nvar albumData = [];\n\nvar sbv = {\n    thumbWidth: 200,\n    scaleImage : true,\n    fullscreenImage : true,\n    cachedPass : null,\n    imageIndex : null,\n    imageCounter : null,\n    lastAlbumName : \"album.eia\",\n    pool: new Pool(4),\n    memoryPressure: 0\n};\n\nsbv.pool.init();\n\nsandbox.events.clean = function()\n{\n    delete sbv.cachedPass;\n    delete sbv.myVar2;\n    delete sbv.pool;\n    albumData = [];\n};\n\nvar thumbCounter = 0;\n\nsandbox.files.userfileLoaded = function(evt, filename)\n{\n    sandbox.files.userfileHide();\n    \n    sbv.lastAlbumName = filename;\n\n    var ealbum = JSON.parse(evt.target.result);\n    albumData = [];\n    var thumbCounter = 0;\n    sbv.memoryPressure = 0;\n\n    $(\"#divViewThumbs\").empty();\n    $(\"#divThumbs\").empty();\n\n    var contentDialog = document.querySelector(\"#dialogElement\").winControl; //document.querySelector(\".win-contentdialog\").winControl;\n    contentDialog.show().then(function (info) {\n        if (info.result == \"primary\") {\n            var pass = $(\"#txtDialogPassword\").val();\n            sbv.cachedPass = pass;\n\n            $(\"#divAlbumProgress\").show();\n\n            for(var idx=0; idx < ealbum.length; idx++) {\n                var params = { \n                    id: idx, \n                    val: ealbum[idx], \n                    algorithm: 'aes', \n                    action: 'decrypt', \n                    password: pass \n                };\n\n                var workerTask = new WorkerTask('libraries/crypto_worker.js', function() {\n                    ealbum[event.data.id] = null;\n                    albumData[event.data.id] = event.data.val;\n                    sbv.memoryPressure += event.data.val.length;\n\n                    var thumb = document.createElement(\"img\");\n                    thumb.src = event.data.val;\n                    thumb.setAttribute(\"data-index\", event.data.id);\n                    thumb.onload = (function(newIdx1) {\n                        return function() {\n                            this.width = sbv.thumbWidth;\n                            $(this).click( (function(newIdx2) {\n                                return function() {\n                                    viewFullImage(newIdx2);\n                                };\n                            })(newIdx1));\n\n                            document.getElementById(\"divViewThumbs\").appendChild(this);\n                        };\n                    })(event.data.id);\n\n                    var thumb2 = document.createElement(\"img\");\n                    thumb2.src = event.data.val;\n                    thumb2.setAttribute(\"data-index\", event.data.id);\n                    thumb2.onload = (function(newIdx1) {\n                        return function() {\n                            this.width = sbv.thumbWidth;\n                            $(this).click( (function(newIdx2) {\n                                return function() {\n                                    deleteImage(newIdx2);\n                                };\n                            })(newIdx1));\n\n                            document.getElementById(\"divThumbs\").appendChild(this);\n                        };\n                    })(event.data.id);\n\n                    thumbCounter++;\n                    if (thumbCounter == ealbum.length) {\n                        $(\"#divAlbumProgress\").hide();\n                        alertify.success(\"Done!\");\n\n                        ealbum = [];\n                    }\n                }, params);\n\n                sbv.pool.addWorkerTask(workerTask);\n            }\n        }\n    });\n};\n\nfunction DoInitViewer() {\n    // Find the element we want to add handlers to.\n    var droptarget = document.getElementById(\"droptargetAlbum\");\n\n    // When the user starts dragging files over the droptarget, highlight it.\n    droptarget.ondragenter = function(e) {\n        // If the drag is something other than files, ignore it.\n        // The HTML5 dropzone attribute will simplify this when implemented.\n        var types = e.dataTransfer.types;\n        if (!types ||\n            (types.contains && types.contains(\"Files\")) ||\n            (types.indexOf && types.indexOf(\"Files\") != -1)) {\n            droptarget.classList.add(\"active\"); // Highlight droptarget\n            return false;                       // We're interested in the drag\n        }\n    };\n    // Unhighlight the drop zone if the user moves out of it\n    droptarget.ondragleave = function() {\n        droptarget.classList.remove(\"active\");\n    };\n\n    // This handler just tells the browser to keep sending notifications\n    droptarget.ondragover = function(e) { return false; };\n\n    // When the user drops files on us, get their URLs and display thumbnails.\n    droptarget.ondrop = function(e) {\n        var files = e.dataTransfer.files;            // The dropped files\n        for(var i = 0; i < files.length; i++) {      // Loop through them all\n            var type = files[i].type;\n            if (type.substring(0,6) == \"image/\") {    // images dropped on album box, warn and stop\n                alertify.error(\"You dropped images on album viewer!\");\n                return false;\n            }\n\n            sbv.lastAlbumName = files[i].name;\n\n            var fileReader = new FileReader();\n            fileReader.onload = loadAlbum;\n\n            fileReader.readAsText(files[i], \"UTF-8\");\n        }\n\n        droptarget.classList.remove(\"active\");       // Unhighlight droptarget\n        return false;                                // We've handled the drop\n    };\n}\n\n// When the document is loaded, add event handlers to the droptarget element\n// so that it can handle drops of files\nfunction DoInit() {\n    // Find the element we want to add handlers to.\n    var droptarget = document.getElementById(\"droptarget\");\n\n    // When the user starts dragging files over the droptarget, highlight it.\n    droptarget.ondragenter = function(e) {\n        // If the drag is something other than files, ignore it.\n        // The HTML5 dropzone attribute will simplify this when implemented.\n        var types = e.dataTransfer.types;\n        if (!types ||\n            (types.contains && types.contains(\"Files\")) ||\n            (types.indexOf && types.indexOf(\"Files\") != -1)) {\n            droptarget.classList.add(\"active\"); // Highlight droptarget\n            return false;                       // We're interested in the drag\n        }\n    };\n    // Unhighlight the drop zone if the user moves out of it\n    droptarget.ondragleave = function() {\n        droptarget.classList.remove(\"active\");\n    };\n\n    // This handler just tells the browser to keep sending notifications\n    droptarget.ondragover = function(e) { return false; };\n\n    // When the user drops files on us, get their URLs and display thumbnails.\n    droptarget.ondrop = function(e) {\n        var files = e.dataTransfer.files;            // The dropped files\n        for(var i = 0; i < files.length; i++) {      // Loop through them all\n            var type = files[i].type;\n            if (type.substring(0,6) !== \"image/\")    // Skip any nonimages\n                continue;\n\n            var fileReader = new FileReader();\n            fileReader.onload = (function(file) {\n                return function(e) {\n                    var newIdx = albumData.length;\n\n                    albumData.push(e.target.result);\n                    sbv.memoryPressure += e.target.result.length;\n\n                    var thumb = document.createElement(\"img\");\n                    thumb.src = e.target.result;\n                    thumb.setAttribute(\"data-index\", newIdx);\n                    thumb.onload = (function(newIdx1) {\n                        return function() {\n                            this.width = sbv.thumbWidth;\n                            $(this).click( (function(newIdx2) {\n                                return function() {\n                                    viewFullImage(newIdx2);\n                                };\n                            })(newIdx1));\n\n                            document.getElementById(\"divViewThumbs\").appendChild(this);\n                        };\n                    })(newIdx);\n\n                    var thumb2 = document.createElement(\"img\");\n                    thumb2.src = e.target.result;\n                    thumb2.setAttribute(\"data-index\", newIdx);\n                    thumb2.onload = (function(newIdx1) {\n                        return function() {\n                            this.width = sbv.thumbWidth;\n                            $(this).click( (function(newIdx2) {\n                                return function() {\n                                    deleteImage(newIdx2);\n                                };\n                            })(newIdx1));\n\n                            document.getElementById(\"divThumbs\").appendChild(this);\n                        };\n                    })(newIdx);\n\n\n                };\n            })(files[i]);\n\n            fileReader.readAsDataURL(files[i]);\n        }\n\n        droptarget.classList.remove(\"active\");       // Unhighlight droptarget\n        return false;                                // We've handled the drop\n    };\n}\n\nfunction showFullImage(idx) {\n    $(\"#divFullImage\").empty();\n\n    $(\"#divViewTop\").hide();\n    $(\"#divViewFull\").show();\n\n    var img = document.createElement(\"img\"); // Create an <img> element\n    img.src = albumData[idx];        \n    img.onload = function() {                // When it loads\n        document.getElementById('divFullImage').appendChild(this);     \n    };\n}\n\nfunction scaleImage() {\n    var $img = $('#imgViewer'),\n        imageWidth = $img[0].width, //need the raw width due to a jquery bug that affects chrome\n        imageHeight = $img[0].height, //need the raw height due to a jquery bug that affects chrome\n        //maxWidth = screen.width,\n        //maxHeight = screen.height,\n        maxWidth = $(window).width() * 0.98,\n        maxHeight = $(window).height() * 0.98,\n        widthRatio = maxWidth / imageWidth,\n        heightRatio = maxHeight / imageHeight;\n\n    var ratio = widthRatio; //default to the width ratio until proven wrong\n\n    if (widthRatio * imageHeight > maxHeight) {\n        ratio = heightRatio;\n    }\n\n    //now resize the image relative to the ratio\n    $img.attr('width', imageWidth * ratio)\n        .attr('height', imageHeight * ratio);\n\n    //and center the image vertically and horizontally\n    //$img.css({\n    //    margin: 'auto',\n    //    position: 'absolute',\n    //    top: 0,\n    //    bottom: 0,\n    //    left: 0,\n    //    right: 0\n    //});\n}\n\nfunction viewFullImage(idx) {\n    $(\"#divViewFull\").empty();\n    $(\"#divViewTop\").hide();\n    $(\"#divViewFullOuter\").show();\n    $(\"#navmenu\").hide();\n\n    var img = document.createElement(\"img\"); // Create an <img> element\n    img.id = \"imgViewer\";\n    img.src = albumData[idx]; \n    img.style.display = 'none';\n    img.onload = function() {\n        $(this).click( function() {\n            sandbox.ui.fullscreenExit();\n            $(\"#divViewFullOuter\").hide();\n            $(\"#divViewTop\").show();\n            $(\"#navmenu\").show();\n        });\n        if (sbv.scaleImage) {\n            setTimeout(function() {\n                scaleImage();\n                setTimeout(function() {\n                    $(img).show();\n                }, 250);\n            }, 250);\n        }\n        else {\n            $(img).show();\n        }\n\n    };\n\n    document.getElementById('divViewFull').appendChild(img);   \n\n    if (sbv.fullscreenImage) {\n        sandbox.ui.fullscreen(document.getElementById(\"divViewFull\"));\n    }\n\n\n}\n\nfunction deleteImage(idx) {\n    sbv.imageIndex = idx;\n\n    alertify.confirm(\"Are you sure you want to remove this image from the album? \" + idx, function (e) {\n        if (e) {\n            albumData[sbv.imageIndex] = null;\n            $(\"*[data-index=\" + sbv.imageIndex + \"]\").remove();\n\n            sbv.imageIndex = null;\n        } \n        else { sbv.imageIndex = null; }\n    });\n}\n\nfunction loadAlbum(evt) {\n    var ealbum = JSON.parse(evt.target.result);\n    albumData = [];\n    thumbCounter = 0;\n    sbv.memoryPressure = 0;\n\n    $(\"#divViewThumbs\").empty();\n    $(\"#divThumbs\").empty();\n\n    var contentDialog = document.querySelector(\"#dialogElement\").winControl; //document.querySelector(\".win-contentdialog\").winControl;\n    contentDialog.show().then(function (info) {\n        if (info.result == \"primary\") {\n            var pass = $(\"#txtDialogPassword\").val();\n            sbv.cachedPass = pass;\n\n            $(\"#divAlbumProgress\").show();\n\n            for(var idx=0; idx < ealbum.length; idx++) {\n                var params = { \n                    id: idx, \n                    val: ealbum[idx], \n                    algorithm: 'aes', \n                    action: 'decrypt', \n                    password: pass \n                };\n\n                var workerTask = new WorkerTask('libraries/crypto_worker.js', function() {\n                    ealbum[event.data.id] = null;\n                    albumData[event.data.id] = event.data.val;\n                    sbv.memoryPressure += event.data.val.length;\n\n                    var thumb = document.createElement(\"img\");\n                    thumb.src = event.data.val;\n                    thumb.setAttribute(\"data-index\", event.data.id);\n\n                    thumb.onload = (function(newIdx1) {\n                        return function() {\n                            this.width = 100;\n                            $(this).click( (function(newIdx2) {\n                                return function() {\n                                    viewFullImage(newIdx2);\n                                };\n                            })(newIdx1));\n\n                            document.getElementById(\"divViewThumbs\").appendChild(this);\n                        };\n                    })(event.data.id);\n\n                    var thumb2 = document.createElement(\"img\");\n                    thumb2.src = event.data.val;\n                    thumb2.setAttribute(\"data-index\", event.data.id);\n                    thumb2.onload = (function(newIdx1) {\n                        return function() {\n                            this.width = 100;\n                            $(this).click( (function(newIdx2) {\n                                return function() {\n                                    deleteImage(newIdx2);\n                                };\n                            })(newIdx1));\n\n                            document.getElementById(\"divThumbs\").appendChild(this);\n                        };\n                    })(event.data.id);\n\n                    thumbCounter++;\n                    if (thumbCounter == ealbum.length) {\n                        $(\"#divAlbumProgress\").hide();\n                        alertify.log(\"Done!\");\n\n                        ealbum = [];\n                    }\n                }, params);\n\n                sbv.pool.addWorkerTask(workerTask);\n            }\n        }\n    });\n}\n\nfunction newAlbum() {\n    sbv.lastAlbumName = \"album.eia\";\n    $(\"#divViewThumbs\").empty();\n    $(\"#divThumbs\").empty();\n    albumData = [];\n    ealbum = [];\n    sbv.memoryPressure = 0;\n}\n\nfunction saveAlbum() {\n    var ealbum = [];\n\n    sbv.ImageCounter = 0;\n\n    var contentDialog = document.querySelector(\"#dialogElement\").winControl; //document.querySelector(\".win-contentdialog\").winControl;\n    contentDialog.show().then(function (info) {\n        if (info.result == \"primary\") {\n            var pass = $(\"#txtDialogPassword\").val();\n            if (pass.length < 6) {\n                alertify.alert(\"Password must be at least six characters\");\n                return;\n            }\n\n            $(\"#divSaveProgress\").show();\n\n            sbv.cachedPass = pass;\n\n            for(var idx=0; idx < albumData.length; idx++) {\n                if (albumData[idx] == null) {\n                    if (++sbv.ImageCounter == albumData.length) {\n                        $(\"#divSaveProgress\").hide();\n                        sandbox.files.saveTextFile(sbv.lastAlbumName, JSON.stringify(ealbum));\n                        ealbum = [];\n                    }\n                }\n                else {\n                    var params = { \n                        id: idx, \n                        val: albumData[idx], \n                        algorithm: 'aes', \n                        action: 'encrypt', \n                        password: pass \n                    };\n\n                    var workerTask = new WorkerTask('libraries/crypto_worker.js', function() {\n                        ealbum.push(event.data.val);\n\n                        if (++sbv.ImageCounter == albumData.length) {\n                            $(\"#divSaveProgress\").hide();\n                            sandbox.files.saveTextFile(sbv.lastAlbumName, JSON.stringify(ealbum));\n                            ealbum = [];\n                        }\n                    }, params);\n\n                    sbv.pool.addWorkerTask(workerTask);\n                }\n            }\n        }\n    });\n}\n\n//\n// ## BEGIN TEMPLATE CODE ##\n//\n\n// listen to window resize events and handle here\nsandbox.events.windowResize = function() {\n    var resizeHeight = 350;\n\n    switch (sandbox.volatile.env) {\n        case \"IDE\" : resizeHeight = $(window).height() - 520; \n            $(\"#app\").height($(window).height()-300); \n            break;\n        case \"IDE WJS\" : resizeHeight = $(window).height() - 520; \n            $(\"#app\").height($(window).height()-300); \n            break;\n        case \"SBL\" : resizeHeight = $(window).height() - 230; \n            $(\"#app\").height($(window).height()-5); \n            break;\n        case \"SBL WJS\" : resizeHeight = $(window).height() - 180; $(\"button\").css(\"min-width\", \"0px\"); \n            $(\"#app\").height($(window).height()-5); \n            break;\n        case \"STANDALONE\" : resizeHeight = $(window).height() - 340; break;\n        default : break;\n    }\n};\n\n// Since this 'event' is triggered from (non-winjs) button we just use regular function\nfunction showDialog() {\n    dialog = document.getElementById(\"dialogStationEdit\").winControl;\n    dialog.show().then(function (info) {\n        if (info.result == \"primary\") {\n            alertify.log(\"Station Name : \" + $(\"#txtStationName\").val());\n            alertify.log(\"Url : \" + $(\"#txtStationUrl\").val());\n\n            var icon = $(\"input[name=stationtype]:checked\").val();\n            switch (icon) {\n                case \"volume\" : alertify.log(\"volume icon\"); break;\n                case \"download\" : alertify.log(\"download icon\"); break;\n                case \"comment\" : alertify.log(\"comment icon\"); break;\n            }\n        }\n    });\n}\n\nfunction thumbSizeChanged() {\n    sbv.thumbWidth = $(\"#rangeThumbSize\").val();\n}\n\nvar toggleScaleImage = function() {\n    var obj = document.getElementById(\"scaleToggle\").winControl;\n    sbv.scaleImage = obj.checked;\n};\n\nvar toggleFullscreenImage = function() {\n    var obj = document.getElementById(\"fullscreenToggle\").winControl;\n    sbv.fullscreenImage = obj.checked;\n};\n\n// To protect against untrusted code execution, all functions are required to be marked as supported for processing before they can be used inside a data-win-options attribute in HTML markup.\nWinJS.Utilities.markSupportedForProcessing(toggleScaleImage);\nWinJS.Utilities.markSupportedForProcessing(toggleFullscreenImage);\n\nWinJS.Namespace.define(\"TemplateApp\", {\n    fullscreenCommand : WinJS.UI.eventHandler(function (ev) {\n        var sv = document.querySelector(\".splitView\").winControl;\n        sv.paneOpened = false;\n        \n        sandbox.ui.fullscreenToggle();\n    }),\n    aboutCommand: WinJS.UI.eventHandler(function(ev) {\n        var sv = document.querySelector(\".splitView\").winControl;\n        sv.paneOpened = false;\n        \n        var contentDialog = document.getElementById(\"dialogAbout\").winControl;\n        contentDialog.show();\n    }),\n    homeCommand: WinJS.UI.eventHandler(function(ev) {\n        var sv = document.querySelector(\".splitView\").winControl;\n        sv.paneOpened = false;\n        $(\"#divViewThumbs\").children(\"img\").css(\"width\", sbv.thumbWidth);        \n        \n        $(\"#divEdit\").hide();\n        $(\"#divFile\").hide();\n        $(\"#divSettings\").hide();\n        $(\"#divHome\").show();\n    }),\n    editCommand: WinJS.UI.eventHandler(function(ev) {\n        var sv = document.querySelector(\".splitView\").winControl;\n        sv.paneOpened = false;\n        $(\"#divThumbs\").children(\"img\").css(\"width\", sbv.thumbWidth);        \n        \n        $(\"#divHome\").hide();\n        $(\"#divFile\").hide();\n        $(\"#divSettings\").hide();\n        $(\"#divEdit\").show();\n    }),\n    fileCommand: WinJS.UI.eventHandler(function(ev) {\n        var sv = document.querySelector(\".splitView\").winControl;\n        sv.paneOpened = false;\n        \n        $(\"#divHome\").hide();\n        $(\"#divEdit\").hide();\n        $(\"#divSettings\").hide();\n        $(\"#divFile\").show();\n    }),\n    settingsCommand: WinJS.UI.eventHandler(function(ev) {\n        var sv = document.querySelector(\".splitView\").winControl;\n        sv.paneOpened = false;\n        $(\"#lbl-memory-pressure\").text((sbv.memoryPressure / 1e6).toFixed(2) + \" MB\");\n        \n        $(\"#divHome\").hide();\n        $(\"#divEdit\").hide();\n        $(\"#divFile\").hide();\n        $(\"#divSettings\").show();\n    })\n});\n\nWinJS.UI.processAll().done(function () {\n    var splitView = document.querySelector(\".splitView\").winControl;\n    new WinJS.UI._WinKeyboard(splitView.paneElement); // Temporary workaround: Draw keyboard focus visuals on NavBarCommands\n    \n    // now that splitview has rendered, fit it to screen height\n    sandbox.events.windowResize();\n});\n"
}