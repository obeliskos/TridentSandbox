{
  "progName": "LokiContinuum",
  "htmlText": "<ul class=\"tnavlist\">\n<li class=\"tnavli\"><a class=\"tnava\" onclick=\"showDiv(1);\" href=\"javascript:void(0)\"><i class=\"fa fa-flask\"></i> Loki Continuum </a></li>\n<li class=\"tnavli\"><a class=\"tnava\" onclick=\"showDiv(2);\" href=\"javascript:void(0)\"><i class=\"fa fa-info-circle\"></i> About</a></li>\n</ul>\n<br/>\n\n<div id=\"divMain\">\n  <fieldset>\n    <legend>\n    Projection Window\n    </legend>\n    <table width='100%'>\n    <tr>\n        <td>Start :</td>\n        <td><input id='txt-start'/></td>\n        <td>End :</td>\n        <td><input id='txt-end'/></td>\n        <td><button class='minimal' onclick='runProjection()' style='width:180px'>Run Projection</button></td>\n        <td><button class='minimal' onclick='resetData()' style='width:200px'>Reset Sample Data</button></td>\n    </tr>\n    </table>\n  </fieldset>\n\n  <br/>\n\n  <div id='div-main'>\n  <fieldset style=\"background-color:#9a9\">\n      <legend>\n      Activity Graph\n      </legend>\n      <div id=\"activityChart\" style=\"height:300px; width:500px;\"></div>\n  </fieldset>\n\n  <fieldset>\n    <legend>\n    Funds\n    </legend>\n    <table>\n      <tr valign='top'>\n        <td>\n            <select id='select-funds' onchange=\"fundSelected()\" size=8 style='width:200px'/>\n            <br/>\n            <button class='minimal' style=\"width:200px\" onclick='viewVolBals()'>View Volatile Balances</button>\n            <br/>\n            <button class='minimal' style=\"width:200px\" onclick='viewVolTrans()'>View Volatile Transactions</button>\n        </td>\n        <td>\n            <input type=\"hidden\" id=\"hf-fund-id\"/>\n            <fieldset>\n            <legend>\n            Edit Fund Details\n            </legend>\n            <table>\n                <tr>\n                    <td>Name :</td>\n                    <td><input type='text' id='txt-fund-name'/></td>\n                </tr>\n                <tr>\n                    <td>FundClass :</td>\n                    <td>\n                        <select id='select-fund-class'/>\n                    </td>\n                </tr>\n                <tr>\n                    <td>Inception Date :</td>\n                    <td><input type='text' id='txt-fund-inceptiondate'/></td>\n                </tr>\n                <tr>\n                    <td>Inception Balance :</td>\n                    <td><input type='text' id='txt-fund-inceptionbalance'/></td>\n                </tr>\n                <tr>\n                \t<td>Hide from graph :</td>\n                    <td><input type='checkbox' id='chk-fund-hidden'/></td>\n                </tr>\n            </table>\n            </fieldset>\n            <br/>\n            <button class=\"minimal\" onclick=\"newFund()\">New</button>\n            <button class=\"minimal\" onclick=\"saveFund()\">Save</button>\n            <button class=\"minimal\" onclick=\"deleteFund()\">Delete</button>        \n        </td>\n      </tr>\n    </table>\n  </fieldset>\n\n  <fieldset>\n  <legend>\n  Actors\n  </legend>\n  <table>\n    <tr valign='top'>\n      <td><select id='select-actors' onchange=\"actorSelected()\" size=8 style='width:200px'/></td>\n      <td>\n          <input type=\"hidden\" id=\"hf-actor-id\"/>\n          <fieldset>\n          <legend>\n          Edit Actor Details\n          </legend>\n          <table>\n              <tr>\n                  <td>Name :</td>\n                  <td><input type='text' id='txt-actor-name'/></td>\n              </tr>\n              <tr>\n                  <td>Amount :</td>\n                  <td><input type='text' id='txt-actor-amount'/></td>\n              </tr>\n              <tr>\n                  <td>Fund (Primary) :</td>\n                  <td>\n                      <select id='select-fund-primary'/>\n                  </td>\n              </tr>\n              <tr>\n                  <td>Fund (Secondary) :</td>\n                  <td><select id='select-fund-secondary'/></td>\n              </tr>\n              <tr>\n                  <td>Periodicity :</td>\n                  <td><select id='select-actor-periodicity'/></td>\n              </tr>\n              <tr>\n                  <td>Periodicity Units :</td>\n                  <td><input type='text' id='txt-actor-periodicityunits'/></td>\n              </tr>\n              <tr>\n                  <td>TriggerDate Initial :</td>\n                  <td><input type='text' id='txt-actor-triginitial'/></td>\n              </tr>\n              <tr>\n                  <td>TriggerDate End :</td>\n                  <td><input type='text' id='txt-actor-trigend'/></td>\n              </tr>\n              <tr>\n                  <td>Is Interest Accrual :</td>\n                  <td><input type='checkbox' id='chk-actor-accrual' /></td>\n              </tr>\n              <tr>\n                  <td>Compound Interest Rate :</td>\n                  <td><input type='text' id='txt-actor-cir'/></td>\n              </tr>\n              <tr>\n                  <td>Is Loan Payment :</td>\n                  <td><input type='checkbox' id='chk-actor-isloanpmt'/></td>\n              </tr>\n              <tr>\n                  <td>Loan Interest Rate :</td>\n                  <td><input type='text' id='txt-actor-loanapr'/></td>\n              </tr>\n              <tr>\n                  <td>Loan Duration in Years :</td>\n                  <td><input type='text' id='txt-actor-loandur'/></td>\n              </tr>\n          </table>\n          </fieldset>\n          <br/>\n          <button class=\"minimal\" onclick=\"newActor()\">New</button>\n          <button class=\"minimal\" onclick=\"saveActor()\">Save</button>\n          <button class=\"minimal\" onclick=\"deleteActor()\">Delete</button>        \n      </td>\n    </tr>\n  </table>\n  </fieldset>\n\n  </div>\n</div>\n\n<div id='divAbout' style='display:none'>\n<h3>Loki Continuum</h3>\n\n<h4>\nA financial simulation engine modeling funds, actors, transactions.\n</h4>\n\n<p>\nThis is a simple, initial port of a <a href=\"https://continuum.codeplex.com/\" target=\"_blank\">c#.net program</a> to test capabilities of lokijs and javascript.  \nThis example uses autosave/autoload to automatically persist to and from indexedDB... this choice done mainly to test lokijs.  \nIdeally you would tweak and experiment and then manually save.  You can however reset back to original \nsample data.\n</p>\n\n<p>\n<b><i>Note : </i></b>when rendering far into the future, your checking account will grow abnormally high. \nThis is because we are not modeling 'waste'/junk spending.  Normally you would dump excess income into savings or \nmodel actual expenditures that use up your free income.  If you recognize and justify this 'waste', you \ncan set that funds 'hide from graphs' property to leave it off the chart and keep it from increasing the \nscale of the chart.  This will make it more likely to clearly see the balances of other funds.\n</p>\n\n<p>\nDue to indexedDB's asynchronous behavior i cannot reliably save during onbeforeunload page events \n(generated when a person leaves the web page) so it would be best to wait until autosave \ntimer has had a chance to save (configured here for about every 5 seconds) before \nshutting down the webpage or changing to another webpage in the address bar.\n</p>\n\n<p>\nThis example demonstrates using lokijs with object prototype (classes), autosave, autoload, \n$or queries, fine grained serialization by overriding Fund.toJSON().  It uses a simplistic \nuser interface to allow future forked samples based on knockout.js, WinJS, or other Model/View framworks.\n</p>\n\n<p>\nCurrently Historical Balances are not implemented, nor are volatile actors used to force \nchart/data points for first/last day of projection range as well as 'today' points.\n</p>\n</div>",
  "scriptText": "/*\n\tThis is a port of a c#.net program to test capabilities of loki and javascript.  \n    \n    It demonstrates using loki with autosave/autoload with a lokiIndexedAdapter.\n    lokiIndexedAdapter uses different datastore than tridentdb but it functions\n    essentially the same (i wrote both).  lokiIndexedAdapter can be used in\n    non-TridentSandbox applications and is included with lokijs distribution.\n    \n    I also employ typed collections, and the LokiContinuum engine is encapsulated.\n    Date Manipulation is best stored in unix ms format for serialization.\n    I also have AddDate utility function in case moment.js is not available.\n*/\n\nvar sbv = {\n\tjqplot : null,\n    idbAdapter : new lokiIndexedAdapter('LokiContinuum'),\n    dbg : ''\n}\n\nfunction EVT_CleanSandbox()\n{\n    continuum.db.close();\n    \n\tif (sbv.jqplot != null) { sbv.jqplot.destroy(); }\n}\n\nfunction showDiv(divIndex) {\n\t$(\"#divMain\").hide();\n\t$(\"#divAbout\").hide();\n\n\tswitch(divIndex) {\n        case 1: $(\"#divMain\").show(); break;\n        case 2: $(\"#divAbout\").show(); break;\n    }\n}\n\n// LokiContinuum - a financial simulation engine, modeling funds, actors, transactions.\n// We create here a LokiContinuum class which we will use as an interface to the \n// loki continuum 'engine'.\n\nvar LokiContinuum = (function() {\n\nvar singletonContinuum = null;\n\n// in unix ms time format, this is April 17, 3026 07:15:33 AM\nvar MAX_DATE = 33333333333333;\nvar MIN_DATE = 0;\n\nvar BalanceTypeEnum = Object.freeze({\"HistoricalBalance\":1, \"VolatileBalance\":2, \"VolatileTransaction\":3, \"InceptionBalance\":4 });\nvar FundClassEnum = Object.freeze({\"Spending\":1, \"Debt\":2, \"DebtEquity\":3, \"Savings\":4 });\nvar ActorPeriodicityEnum = Object.freeze({'Daily':1, 'Weekly':2, 'Monthly':3, 'Yearly':4, 'OnceOnly':5 });\nvar ActivityTypeEnum = Object.freeze({'Actor': 1, 'FundReconcile': 2});\n  \nfunction AddDate(unixDate, offset, offsetType) {\n  var oldDate = new Date();\n  oldDate.setTime(unixDate);\n  var year = parseInt(oldDate.getFullYear());\n  var month = parseInt(oldDate.getMonth());\n  var date = parseInt(oldDate.getDate());\n  var hour = parseInt(oldDate.getHours());\n  var newDate;\n\n  switch (offsetType) {\n    case \"years\":\n    case \"Y\":\n    case \"y\":\n      newDate = new Date(year + offset, month, date, hour);\n      break;\n    case \"months\":\n    case \"M\":\n    case \"m\":\n      newDate = new Date(year, month + offset, date, hour);\n      break;\n    case \"days\":\n    case \"D\":\n    case \"d\":\n      newDate = new Date(year, month, date + offset, hour);\n      break;\n    case \"weeks\":\n    case \"W\":\n    case \"w\":\n      newDate = new Date(year, month, date + offset*7, hour);\n      break;\n    case \"hours\":\n    case \"H\":\n    case \"h\":\n      newDate = new Date(year, month, date, hour + offset);\n      break;\n  }\n\n  return newDate.getTime();            \n} \n\n/**\n *\n * Projector - this class is the top level interface to Continuum,\n *     facilitating access to Actors and Funds and a loki database in which is stores them.\n *\n */\n\nfunction Projector(universeName, dbOptions) \n{\n\tsingletonContinuum = this;\n    \n\tthis.universeName = universeName;\n    \n    this.enums = {\n    \tBalanceType: BalanceTypeEnum,\n        FundClass: FundClassEnum,\n        ActorPeriodicity: ActorPeriodicityEnum,\n        ActivityType: ActivityTypeEnum\n    };\n\n\tthis.MAX_DATE = MAX_DATE;\n    this.MIN_DATE = MIN_DATE;\n    \n    this.AddDate = AddDate;\n\n    dbOptions.actors = { proto: Actor };\n    dbOptions.funds = { proto: Fund };\n\n\tthis.db = new loki(this.universeName, dbOptions); \n\tthis.vol = null;\n\tthis.activities = this.db.anonym([]);\n}\n\nProjector.prototype.initializeDatabase = function()\n{\n\tthis.db.removeCollection('actors');\n    this.db.removeCollection('funds');\n    this.db.removeCollection('settings');\n\tthis.db.addCollection('actors');\n    this.db.addCollection('funds');\n    var pm = this.db.addCollection('settings');\n    \n    var settings = {\n    \tkey: 'ProjectorSettings',\n        val: {\n        \tuniverseName: 'default',\n            inceptionDate: (new Date()).getTime(),\n            pastWindow: 4, //The number of months in the past to render by default\n            futureWindow: 6 // The number of months in the future to render by default\n        }\n    }\n    \n    pm.insert(settings);\n}\n\nProjector.prototype.getFundCollection = function()\n{\n\treturn this.db.getCollection(\"funds\");\n}\n\nProjector.prototype.getActorCollection = function()\n{\n\treturn this.db.getCollection(\"actors\");\n}\n\nProjector.prototype.addFund = function(options) \n{\n\tvar fund = new Fund(options);\n    \n\tthis.db.getCollection(\"funds\").insert(fund);\n    \n    return fund;\n}\n\nProjector.prototype.addActor = function(options)\n{\n\tvar actor = new Actor(options);\n\n\tthis.db.getCollection(\"actors\").insert(actor);\n    \n    return actor;\n}\n\nProjector.prototype.activitiesByFund = function(fundId)\n{\n\tvar filtered = [];\n    var idx;\n    \n    for(idx=0; idx<this.activities.data.length; idx++)\n    {\n    \tif (this.activities.data[idx].doesAffectFund(fundId)) filtered.push(this.activities.data[idx]);\n    }\n    \n    return filtered;\n}\n\nProjector.prototype.renderUniverse = function(start, end) {\n  var idx;\n  var actorColl = this.db.getCollection(\"actors\");\n  var actors = actorColl.find();\n  var aa = [];\n  \n  this.activities.clear();\n  \n  for(idx=0; idx<actors.length; idx++) {\n    if (!actors.isDisabled) {\n  \t\taa = actors[idx].projectActivities(start, end);\n  \t\tthis.activities.insert(aa);\n    }\n  }\n\n  //foreach (Fund f in Funds)\n  //{\n  //  Activities.AddRange(f.ProjectActivities(StartDate, EndDate));\n  //}\n\n  // Volatile Actors were used for forcing 0 amount transactions\n  // on first day, today, and last day to force plot points for those days\n  \n  //foreach (Actor actor in VolatileActors)\n  //{\n  //  Activities.AddRange(actor.ProjectActivities(StartDate, EndDate));\n  //}\n\n  // Sequence activities chronologically\n  var sortedActivities = this.activities.chain().simplesort('activityDate').data();\n  //Activities.Sort(new ActivityComparer());\n\n  // Execute activities to generate volatile transactions and balances\n  for(idx=0; idx<sortedActivities.length; idx++) {\n  \tsortedActivities[idx].execute();\n  }\n}\n\n/**\n * Balance\n */\n \n// consolidating Balance and Tranction classes\n// transactions inherited balance and added 'affectingActor' reference\nfunction Balance(amount, balanceDate, description, affectingActor) {\n\tthis.amount = amount;\n    this.balanceDate = balanceDate;\n    this.description = description;\n    this.affectingActor = affectingActor;\n}\n\nBalance.prototype.toString = function() {\n\treturn this.balanceDate + ';' + this.amount + ';' + this.description;\n}\n\n/**\n * Fund\n */\n\nfunction Fund(options) {\n\toptions = options || {};\n    \n\tthis.inceptionBalance = options.inceptionBalance || 0.0;\n    this.inceptionDate = options.inceptionDate;\n    this.name = options.name;\n    this.fundClass = options.fundClass;\n    this.isBenchmark = options.isBenchmark || false;\n\n    this.equityOffset = options.equityOffset || 0.0;\n    this.isHidden = options.isHidden || false;\n    this.historicalBalances = options.historicalBalances || [];\n\n\t// volatile, not saved\n    this.interimBalance = new Balance(this.inceptionBalance, this.inceptionDate, 'inception', null);\n    this.volatileBalances = [];\n    this.volatileTransactions = [];\n}\n\n// can't use serializereplacer as this is nested serialization and replacer\n// is controlled at top level of serialization (loki db),\n// which knows nothing of our Fund class structure).\nFund.prototype.toJSON = function() \n{\n\t// to avoid serialization of volatileBalances and volatileTransactions,\n    // we will clone our fund and leave those properties empty [] (their default)\n\tvar clone = new Fund({\n\t\tinceptionBalance: this.inceptionBalance,\n\t\tinceptionDate: this.inceptionDate,\n\t\tname: this.name,\n\t\tfundClass: this.fundClass,\n\t\tisBenchmark: this.isBenchmark,\n    \tequityOffset : this.equityOffset,\n    \tisHidden : this.isHidden,\n    \thistoricalBalances : this.historicalBalances\n    })\n    \n    // need loki id to be same as well as meta\n    clone.$loki = this.$loki;\n    clone.meta = this.meta;\n    \n\treturn clone;\n}\n\nFund.prototype.projectActivities = function(startDate, endDate) \n{\n\n}\n\nFund.prototype.postVolatile = function(amount, postDate, name, affectingActor)\n{\n\t// round amount to 2 decimals\n    // amount = decimal.Round(amount, 2);\n    var postAmount = amount;\n    if (this.fundClass == FundClassEnum.Debt || this.fundClass == FundClassEnum.DebtEquity) \n    {\n    \tpostAmount = postAmount * -1;\n    }\n    \n    var trans = new Balance(postAmount, postDate, name, affectingActor);\n    \n    this.volatileTransactions.push(trans);\n    \n    // Make a copy so underlying balance reference isn't affected\n    var bal = new Balance(this.interimBalance.amount + trans.amount, postDate, name, affectingActor);\n    this.interimBalance = bal;\n    \n    this.volatileBalances.push(bal);\n    \n    return bal;\n}\n\nFund.prototype.resetVolatile = function()\n{\n\tthis.volatileBalances = [];\n    this.volatileTransactions = [];\n    this.interimBalance = new Balance(this.inceptionBalance, this.inceptionDate, 'inception', null);\n}\n\n/**\n * Actor\n */\n\nfunction Actor(options) {\n\toptions = options || {};\n    \n\tthis.name = options.name;\n    this.fundPrimary = options.fundPrimary;\n    this.fundSecondary = options.fundSecondary; // optional feeder fund\n    this.periodicity = options.periodicity;\n    this.periodicityUnits = options.periodicityUnits;\n    this.triggerDateInitial = options.triggerDateInitial;\n    this.triggerAmount = options.triggerAmount;\n    this.triggerDateEnd = options.triggerDateEnd || MAX_DATE;\n    this.isLoanPayment = options.isLoanPayment || false;\n    this.interestRate = options.interestRate;\n    this.isCompoundInterestAccrual = options.isCompoundInterestAccrual || false;\n    this.compoundInterestRate = options.compoundInterestRate;\n    this.loanDurationYears = options.loanDurationYears;\n    this.isDisabled = options.isDisabled || false;\n    \n    // null out?  this was not being serialized\n    this.nextTriggerDate = null;\n}\n\nActor.prototype.synchronize = function(syncDate) {\n\tthis.nextTriggerDate = this.triggerDateInitial;\n    \n    if (this.triggerDateInitial >= syncDate) return;\n    \n    while (this.nextTriggerDate <= syncDate) {\n    \tswitch(this.periodicity) {\n        \tcase ActorPeriodicityEnum.Daily : \n                this.nextTriggerDate = \n                AddDate(\n                \tthis.nextTriggerDate, \n                    this.periodicityUnits, \n                    'days');\n            \tbreak;\n            case ActorPeriodicityEnum.Weekly : \n                this.nextTriggerDate = \n                AddDate(\n                \tthis.nextTriggerDate, \n                    this.periodicityUnits, \n                    'weeks');\n            \tbreak;\n            case ActorPeriodicityEnum.Monthly : \n                this.nextTriggerDate = \n                AddDate(\n                \tthis.nextTriggerDate, \n                    this.periodicityUnits, \n                    'months');\n            \tbreak;\n            case ActorPeriodicityEnum.Yearly : \n                this.nextTriggerDate = \n                AddDate(\n                \tthis.nextTriggerDate, \n                    this.periodicityUnits, \n                    'years');\n            \tbreak;\n            case ActorPeriodicityEnum.OnceOnly : \n                this.nextTriggerDate = MAX_DATE;\n            \tbreak;\n        }\n        \n        // If next trigger occurs after the Actor range ends, \n        // flag actor termination with NextTriggerDate as maxvalue\n        if (this.triggerDateEnd != MAX_DATE && this.triggerDateEnd < this.nextTriggerDate) {\n        \tthis.nextTriggerDate = MAX_DATE;\n        }\n    }\n}\n\nActor.prototype.projectActivities = function(startDate, endDate) {\n\tthis.synchronize(startDate);\n    \n    var activities = [];\n    \n    if (this.nextTriggerDate > endDate) return activities;\n    \n    while (this.nextTriggerDate <= endDate) {\n    \t// next trigger fires within projection range, so add\n    \tactivities.push(new Activity(this.nextTriggerDate, ActivityTypeEnum.Actor, null, this));\n        \n        // progress nextTriggerDate to next trigger date\n        switch(this.periodicity) \n        {\n        \tcase ActorPeriodicityEnum.Daily: \n                this.nextTriggerDate = \n                AddDate(\n                \tthis.nextTriggerDate, \n                    this.periodicityUnits, \n                    'days');\n            \tbreak;\n            case ActorPeriodicityEnum.Weekly : \n                this.nextTriggerDate = \n                AddDate(\n                \tthis.nextTriggerDate, \n                    this.periodicityUnits, \n                    'weeks');\n            \tbreak;\n            case ActorPeriodicityEnum.Monthly : \n                this.nextTriggerDate = \n                AddDate(\n                \tthis.nextTriggerDate, \n                    this.periodicityUnits, \n                    'months');\n            \tbreak;\n            case ActorPeriodicityEnum.Yearly : \n                this.nextTriggerDate = \n                AddDate(\n                \tthis.nextTriggerDate, \n                    this.periodicityUnits, \n                    'years');\n            \tbreak;\n            case ActorPeriodicityEnum.OnceOnly : \n                this.nextTriggerDate = MAX_DATE;\n            \tbreak;\n            default :\n            \talertify.log('Unknown actor periodicity');\n                break;\n        }\n        \n\t\t// If next trigger occurs after the Trigger Ends, flag actor termination with NextTriggerDate as maxvalue\n        if (this.triggerDateEnd != MAX_DATE && this.triggerDateEnd < this.nextTriggerDate) {\n        \tthis.nextTriggerDate = MAX_DATE;\n        }\n    }\n    \n    return activities;\n}\n\nActor.prototype.executeActivity = function(activity)\n{\n  // Lookup fund object, given its id reference property\n  var fpr = singletonContinuum.db.getCollection(\"funds\").get(this.fundPrimary);\n  var fsr = null;\n  \n  if (this.fundSecondary) fsr = singletonContinuum.db.getCollection(\"funds\").get(this.fundSecondary);\n\n  if (fpr.fundClass == FundClassEnum.Debt || fpr.FundClass == FundClassEnum.DebtEquity) \n  {\n  \t// loan seems paid off, lets just copy existing balances into activity for charting\n  \tif (fpr.interimBalance.amount <= 0.0) {\n    \tactivity.renderedBalancePrimary = fpr.interimBalance;\n        activity.renderedBalanceSecondary = fsr.interimBalance;\n    \treturn;\n    }\n  }\n  \n  // handle loan payment\n  if (this.isLoanPayment) \n  {\n\t// Calculate Monthly Payment - using double type for Math.Pow\n  \tvar p = fpr.inceptionBalance;\n    var i = this.interestRate / 1200;\n    var m = this.loanDurationYears * 12;\n    var monthlyPayment = p * (i / (1 - Math.pow( (1 + i), -m) ));\n\n    // If you know the Fund balance on the payment date you can calculate \n    // how much of that is interest... the rest goes to principle\n\n    // Interest Portion = most recent Balance * Annual Interest rate / 12 (assumes monthly payments)\n    // We are expecting InterimBalance to be kept up to date by our \n    //    chronological calls to PostVolatileTransaction\n    var actualInterestRate = this.interestRate / 100;\n    var interestPaid = fpr.interimBalance.amount * actualInterestRate / 12;\n    var principlePaid = monthlyPayment - interestPaid;\n\n    // Monthly Payment calculations dont include overhead of escrow, insurance, etc.\n    // So the monthly payment calculation was only to calculate the principle\n    // We will use Actor TriggerAmount as Monthly Payment\n\n    // Only Posting Portion of Monthly payment added to Principle (Equity)\n    activity.renderedBalancePrimary = fpr.postVolatile(principlePaid, activity.activityDate, this.name + \" (Principle)\", this.$loki);\n\n    // Usually you will need feeder account but benchmark loans might not want to have one\n    if (fsr != null)\n    {\n      // split the pull from feeder fund into principle and interest for later analysis\n      fsr.postVolatile(-(this.triggerAmount - principlePaid), activity.activityDate, this.name + \" (Overhead)\", this.$loki);\n      activity.renderedBalanceSecondary = fsr.postVolatile(-principlePaid, activity.activityDate, this.name + \" (Principle)\", this.$loki);\n    }\n\n    return;\n  }\n  \n  // handle interest accrual\n  if (this.isCompoundInterestAccrual)\n  {\n  \tif (this.periodicity != ActorPeriodicityEnum.Monthly) {\n\t\tAPI_LogMessage(\"An interest accrual actor \" + this.name + \" is not set to monthly periodicity!\");    \n    }\n\telse {\n    \tvar calculatedRate = this.periodicityUnits / 12.0 * this.compoundInterestRate / 100.0;\n        var interestAccrued = fpr.interimBalance.amount * calculatedRate;\n        \n        activity.renderedBalancePrimary = fpr.postVolatile(interestAccrued, activity.activityDate, this.name, this.$loki);\n    }\n\n  \treturn;\n  }\n  \n  // all other actors post only trigger amounts\n  activity.renderedBalancePrimary = fpr.postVolatile(this.triggerAmount, activity.activityDate, this.name, this.$loki);\n  \n  // if feeder fund specifies, remove trigger amount from that\n  if (this.fundSecondary != null) \n  {\n  \tfsr = singletonContinuum.db.getCollection(\"funds\").get(this.fundSecondary);\n  \tactivity.renderedBalanceSecondary = fsr.postVolatile(this.triggerAmount * -1, activity.activityDate, this.name, this.$loki);\n  }\n}\n\n/**\n * Activity\n */\nfunction Activity(activityDate, activityType, affectingFund, affectingActor, balancePrimary) {\n\tthis.activityDate = activityDate;\n    this.activityType = activityType;\n    this.affectingFund = affectingFund;\n    this.affectingActor = affectingActor;\n    this.renderedBalancePrimary = balancePrimary;\n    this.renderedBalanceSecondary = null;\n}\n\nActivity.prototype.execute = function()\n{\n\tswitch(this.activityType)\n    {\n    \tcase ActivityTypeEnum.Actor: \n        \tthis.affectingActor.executeActivity(this); \n            break;\n        case ActivitiyTypeEnum.FundReconcile: \n        \tthis.affectingFund.executeActivity(this); \n            break;\n        default :\n        \tthrow \"Unknown Activity Type\";\n            break;\n    }\n}\n\nActivity.prototype.doesAffectFund = function(fundId)\n{\n\tif (this.activityType == ActivityTypeEnum.FundReconcile)\n    {\n    \tif (this.affectingFund == fundId) return true;\n    }\n    \n    if (this.activityType == ActivityTypeEnum.Actor)\n    {\n    \tif (this.affectingActor.fundPrimary == fundId) return true;\n        if (this.affectingActor.fundSecondary == fundId) return true;\n    }\n    \n    return false;\n}\n\nreturn Projector;\n}());\n\n// misc helper routines\nfunction addTestData() {\n\t// set up funds\n\tvar fundSavings = continuum.addFund({\n    \tinceptionBalance: 1000, \n        inceptionDate: (new Date()).getTime(), \n        name: \"savings\", \n        fundClass: continuum.enums.FundClass.Savings, \n        isBenchmark : false\n    });\n    var fundChecking = continuum.addFund({\n    \tinceptionBalance: 500, \n        inceptionDate: (new Date()).getTime(), \n        name: \"checking\", \n        fundClass: continuum.enums.FundClass.Spending, \n        isBenchmark: false\n    });\n\tvar fundMortgage = continuum.addFund({\n    \tinceptionBalance: 100000, \n        inceptionDate: (new Date()).getTime(), \n        name: \"mortgage\", \n        fundClass: continuum.enums.FundClass.DebtEquity, \n        isBenchmark: false\n    });\n    var fundAutoLoan = continuum.addFund({\n    \tinceptionBalance: 20000, \n        inceptionDate: (new Date()).getTime(), \n        name: \"auto loan\", \n        fundClass: continuum.enums.FundClass.Debt, \n        isBenchmark: false\n    });\n\n\t// set up actors\n    var actorSavingsPlan = continuum.addActor({\n    \tname: 'saving plan', \n        fundPrimary: fundSavings.$loki, \n        periodicity: continuum.enums.ActorPeriodicity.Monthly, \n        periodicityUnits: 1, \n        triggerDateInitial: (new Date()).getTime(), \n        triggerAmount: 250\n    });\n\n    var actorSavingsAccrual = continuum.addActor({\n    \tname: 'savings accrue',\n        fundPrimary: fundSavings.$loki,\n        periodicity: continuum.enums.ActorPeriodicity.Monthly,\n        periodicityUnits: 1,\n        triggerDateInitial: (new Date()).getTime(),\n        compoundInterestRate: 3,\n        isCompoundInterestAccrual : true\n    });\n\n    var actorPaycheck = continuum.addActor({\n    \tname: 'paycheck', \n        fundPrimary: fundChecking.$loki, \n        periodicity: continuum.enums.ActorPeriodicity.Weekly, \n        periodicityUnits: 1, \n        triggerDateInitial: (new Date()).getTime(), \n        triggerAmount: 1000\n    });\n\n    var actorMortgagePayment = continuum.addActor({\n    \tname: 'mortgage payment', \n        fundPrimary: fundMortgage.$loki, \t// apply payment to\n        fundSecondary: fundChecking.$loki, // feeder fund\n        periodicity: continuum.enums.ActorPeriodicity.Monthly, \n        periodicityUnits: 1, \n        triggerDateInitial: (new Date()).getTime(), \n        triggerAmount: 800,\n        isLoanPayment: true,\n        loanDurationYears: 30,\n        interestRate: 3.0\n    });\n\n    var actorCarPayment = continuum.addActor({\n    \tname: 'auto loan', \n        fundPrimary: fundAutoLoan.$loki, \n        fundSecondary: fundChecking.$loki, // feeder fund is checking\n        periodicity: continuum.enums.ActorPeriodicity.Monthly, \n        periodicityUnits: 1, \n        triggerDateInitial: (new Date()).getTime(),\n        triggerDateEnd: continuum.AddDate((new Date()).getTime(), 5, \"years\"),\n        triggerAmount: 300,\n        isLoanPayment: true,\n        loanDurationYears: 5,\n        interestRate: 4.0\n    });\n    \n}\n\nfunction loadSelects()\n{\n    var fclass;\n\t$('#select-fund-class').html(\"<option></option>\");\n\n    for(fclass in continuum.enums.FundClass) {\n    \t$('#select-fund-class').append($('<option>', {\n        \tvalue: continuum.enums.FundClass[fclass],\n            text: fclass\n        }));\n    }\n    \n    var ape;\n    $('#select-actor-periodicity').html('<option></option>');\n    \n    for(ape in continuum.enums.ActorPeriodicity) {\n    \t$('#select-actor-periodicity').append($('<option>', {\n        \tvalue: continuum.enums.ActorPeriodicity[ape],\n            text: ape\n        }));\n    }\n}\n\nfunction renderLists() {\n\t$('#select-funds').empty();\n\t$('#select-fund-primary').html(\"<option></option>\");\n\t$('#select-fund-secondary').html(\"<option></option>\");\n    $('#select-actors').empty();\n    \n    var idx;\n    var funds = continuum.getFundCollection().find();\n    \n    for(idx=0; idx< funds.length; idx++) {\n    \t$('#select-funds').append($('<option>', {\n        \tvalue: funds[idx].$loki,\n            text: funds[idx].name\n        }));\n        \n    \t$('#select-fund-primary').append($('<option>', {\n        \tvalue: funds[idx].$loki,\n            text: funds[idx].name\n        }));\n        \n    \t$('#select-fund-secondary').append($('<option>', {\n        \tvalue: funds[idx].$loki,\n            text: funds[idx].name\n        }));\n    }\n    \n    var actors = continuum.getActorCollection().find();\n    \n    for(idx=0; idx< actors.length; idx++) {\n    \t$('#select-actors').append($('<option>', {\n        \tvalue: actors[idx].$loki,\n            text: actors[idx].name\n        }));\n    }\n    \n    // now that fund and actor lists have been reloaded,\n    // clear the detail screens\n    clearFundDetails();\n    clearActorDetails();\n}\n\nfunction chartActivity(startDate, endDate)\n{\n  var funds = continuum.getFundCollection();\n  var idx, actIdx;\n  var fundRef;\n  var activity = null;\n  var fundActivities;\n  var pointData = null;\n  var fundChartData = [];\n  var allChartData = [];\n  var allSeriesData = [];\n  var seriesStyles = [\n          {\n            // Use a thicker, 5 pixel line and 10 pixel\n            // filled square markers.\n            label:'',\n            lineWidth:5, \n            markerOptions: { style:\"filledSquare\", size:10 }\n          },\n          { \n            // Use (open) circlular markers.\n            label:'',\n            markerOptions: { style:\"circle\" }\n          },\n          {\n            // Change our line width and use a diamond shaped marker.\n            label:'',\n            lineWidth:2, \n            markerOptions: { style:'dimaond' }\n          }\n/*          ,\n          {\n            // Don't show a line, just show markers.\n            // Make the markers 7 pixels with an 'x' style\n            label:'',\n            showLine:false, \n            markerOptions: { size: 7, style:\"x\" }\n          }\n     */\n  ];\n  var currStyle;\n  \n  for (idx=0; idx < funds.data.length; idx++)\n  {\n  \tfundRef = funds.data[idx];\n    \n    if (fundRef.isHidden) continue;\n    \n    fundChartData = [];\n    \n\tfundActivities = continuum.activitiesByFund(fundRef.$loki);\n    \n    for(actIdx=0; actIdx < fundActivities.length; actIdx++) {\n    \tactivity = fundActivities[actIdx];\n        \n        if (activity.activityDate >= startDate) {\n        \tpointData = null;\n            if (activity.activityType == continuum.enums.ActivityType.Actor)\n            {\n            \tif (activity.affectingActor.fundPrimary == fundRef.$loki)\n                {\n                \tpointData = [\n                    \t(new Date()).setTime(activity.activityDate),\n                        activity.renderedBalancePrimary.amount\n                    ];\n                }\n                \n                if (activity.affectingActor.fundSecondary == fundRef.$loki)\n                {\n                \tpointData = [\n                    \t(new Date()).setTime(activity.activityDate),\n                        activity.renderedBalanceSecondary.amount\n                    ];\n                }\n            }\n            \n            if (activity.activityType == continuum.enums.ActivityType.FundReconcile &&\n            \tactivity.affectingFund == fundRef.$loki)\n            {\n            \tpointData = [\n                \t(new Date()).setTime(activity.activityDate),\n                    activity.renderedBalancePrimary\n                ];\n            }\n            \n            if (pointData != null) {\n            \tfundChartData.push(pointData);\n            }\n        }\n    }\n    \n    allChartData.push(fundChartData);\n    \n    //currStyle = JSON.parse(JSON.stringify(seriesStyles[idx%3]));\n    currStyle = JSON.parse(JSON.stringify(seriesStyles[1]));\n    currStyle.label = fundRef.name;\n    allSeriesData.push(currStyle);\n  }\n  \n  if (sbv.jqplot != null) { sbv.jqplot.destroy(); }\n\n  sbv.jqplot = $.jqplot ('activityChart', allChartData, {\n      // Give the plot a title.\n      title: 'Activity Graph',\n      axes:{\n          xaxis:{\n              renderer:$.jqplot.DateAxisRenderer,\n              tickOptions:{formatString:'%#m/%#d/%y'},\n          }\n      },\n      legend: {show:true, placement: 'outside'},\n\t  series:allSeriesData\n    });\n}\n\nfunction clearFundDetails()\n{\n    $(\"#hf-fund-id\").val(\"\");\n    $(\"#txt-fund-name\").val(\"\");\n    $(\"#select-fund-class\").val(\"\");\n    $(\"#txt-fund-inceptionbalance\").val(\"0.0\");\n    $(\"#txt-fund-inceptiondate\").val(\"\");\n\t$(\"#chk-fund-hidden\").prop(\"checked\", false);\n}\n\nfunction fundSelected()\n{\n\tvar selFund = $(\"#select-funds option:selected\").val();\n    var fundId = parseInt(selFund);\n    var fund = continuum.getFundCollection().get(fundId);\n    \n    $(\"#hf-fund-id\").val(fund.$loki);\n    $(\"#txt-fund-name\").val(fund.name);\n    $(\"#select-fund-class\").val(fund.fundClass);\n    $(\"#txt-fund-inceptionbalance\").val(fund.inceptionBalance);\n    $(\"#txt-fund-inceptiondate\").val(moment(fund.inceptionDate).format(\"MM/DD/YYYY\"));\n\t$(\"#chk-fund-hidden\").prop(\"checked\", fund.isHidden);\n}\n\nfunction clearActorDetails()\n{\n    $(\"#hf-actor-id\").val(\"\");\n    $(\"#txt-actor-name\").val(\"\");\n\t$(\"#txt-actor-amount\").val(\"\");\n    $(\"#select-fund-primary\").val(\"\");\n    $(\"#select-fund-secondary\").val(\"\");\n    $(\"#select-actor-periodicity\").val(\"\");\n    $(\"#txt-actor-periodicityunits\").val(\"1\");\n    $(\"#txt-actor-triginitial\").val(\"\");\n    $(\"#txt-actor-trigend\").val(\"\");\n\n\t$(\"#chk-actor-accrual\").prop(\"checked\", false);\n\t$(\"#txt-actor-cir\").val(\"\");\n    $(\"#chk-actor-isloanpmt\").prop(\"checked\", false);\n    $(\"#txt-actor-loanapr\").val(\"\");\n    $(\"#txt-actor-loandur\").val(\"\");\n}\n\nfunction actorSelected()\n{\n\tvar selActor = $(\"#select-actors option:selected\").val();\n    var actorId = parseInt(selActor);\n    var actor = continuum.getActorCollection().get(actorId);\n    \n    $(\"#hf-actor-id\").val(actor.$loki);\n    $(\"#txt-actor-name\").val(actor.name);\n\t$(\"#txt-actor-amount\").val(actor.triggerAmount);\n    $(\"#select-fund-primary\").val(actor.fundPrimary);\n    $(\"#select-fund-secondary\").val(actor.fundSecondary);\n    $(\"#select-actor-periodicity\").val(actor.periodicity);\n    $(\"#txt-actor-periodicityunits\").val(actor.periodicityUnits);\n    $(\"#txt-actor-triginitial\").val(moment(actor.triggerDateInitial).format(\"MM/DD/YYYY\"));\n    $(\"#txt-actor-trigend\").val(moment(actor.triggerDateEnd).format(\"MM/DD/YYYY\"));\n\n\t$(\"#chk-actor-accrual\").prop(\"checked\", actor.isCompoundInterestAccrual);\n\t$(\"#txt-actor-cir\").val(actor.compoundInterestRate);\n    $(\"#chk-actor-isloanpmt\").prop(\"checked\", actor.isLoanPayment);\n    $(\"#txt-actor-loanapr\").val(actor.interestRate);\n    $(\"#txt-actor-loandur\").val(actor.loanDurationYears);\n}\n\nfunction runProjection() \n{\n\tvar funds = continuum.getFundCollection();\n    \n    funds.find().forEach(function(fund)\n    {\n    \tfund.resetVolatile();\n    });\n    \n\tvar startText = $(\"#txt-start\").val();\n    var endText = $(\"#txt-end\").val();\n    \n\tvar start = (new Date(startText)).getTime(); \n\tvar end = (new Date(endText)).getTime();\n\n\tif (end <= start) \n    {\n    \tend = parseInt(moment(start).add(6, \"months\").format(\"x\"));\n        \n    \t$(\"#txt-end\").val(moment(end).format(\"MM/DD/YYYY\"));\n    }\n\n\trenderLists();\n\n\tcontinuum.renderUniverse(continuum.MIN_DATE, end);\n\tchartActivity(start, end);\n}\n\nfunction viewVolBals()\n{\n\tvar selFund = $(\"#select-funds option:selected\").val();\n     \n    if (selFund == null) {\n    \talertify.error(\"select a fund first\");\n        return;\n    }\n    \n\tvar fundId = parseInt(selFund);\n    var fund = continuum.getFundCollection().get(fundId);\n    \n    API_Inspect(fund.volatileBalances);\n}\n\nfunction viewVolTrans()\n{\n\tvar selFund = $(\"#select-funds option:selected\").val();\n    \n    if (selFund == null) {\n    \talertify.error(\"select a fund first\");\n        return;\n    }\n    \n    var fundId = parseInt(selFund);\n    var fund = continuum.getFundCollection().get(fundId);\n    \n    API_Inspect(fund.volatileTransactions);\n}\n\nfunction newFund()\n{\n\tclearFundDetails();\n}\n\nfunction saveFund()\n{\n\tvar selFund, fundId, fund, hfFundId;\n    \n\thfFundId = $(\"#hf-fund-id\").val();\n    if (hfFundId == \"\") {\n\t\tvar newFundOptions = {\n\t\t\tname: $(\"#txt-fund-name\").val(),\n\t\t\tfundClass : parseInt($(\"#select-fund-class\").val()),\n\t\t\tinceptionBalance: parseFloat($(\"#txt-fund-inceptionbalance\").val()),\n\t\t\tinceptionDate: parseInt(\n\t\t\t\tmoment( $(\"#txt-fund-inceptiondate\").val() ).format(\"x\")\n\t\t\t),\n            isHidden : $(\"#chk-fund-hidden\").is(\":checked\")\n\t\t}\n\n    \tfund = continuum.addFund(newFundOptions);\n        \n        runProjection();\n        \n        return;\n    }\n    \n\tselFund = $(\"#select-funds option:selected\").val();\n\tfundId = parseInt(selFund);\n\tfund = continuum.getFundCollection().get(fundId);\n\n\tfund.name = $(\"#txt-fund-name\").val();\n\tfund.fundClass = parseInt($(\"#select-fund-class\").val());\n\tfund.inceptionBalance = parseFloat($(\"#txt-fund-inceptionbalance\").val());\n\tfund.inceptionDate = parseInt(\n\t\tmoment( $(\"#txt-fund-inceptiondate\").val() ).format(\"x\")\n\t);\n    fund.isHidden = $(\"#chk-fund-hidden\").is(\":checked\");\n\n\tcontinuum.getFundCollection().update(fund);\n\n\trunProjection();\n}\n\nfunction deleteFund()\n{\n\tvar selFund = $(\"#select-funds option:selected\").val();\n    selFund = selFund || \"\";\n    \n    if (selFund == \"\") {\n    \talertify.log(\"select a fund\");\n    \treturn;\n    }\n    \n    var fundId = parseInt(selFund);\n    var fund = continuum.getFundCollection().get(fundId);\n    \n    var actors = continuum.getActorCollection().find({'$or': [\n    \t{ 'fundPrimary' : fund.$loki },\n        { 'fundSecondary' : fund.$loki }\n    ]});\n    \n    // don't delete fund unless there are no actors using it\n    if (actors.length > 0) {\n    \talertify.error(\"delete all actors associated with this fund first\");\n        return;\n    }\n    \n    continuum.getFundCollection().remove(fund);\n    \n    runProjection();\n}\n\nfunction newActor()\n{\n\tclearActorDetails();\n}\n\nfunction saveActor()\n{\n\tvar selActor, actorId, actor, hfActorId;\n\n\tvar trigAmount = $(\"#txt-actor-amount\").val();\n\ttrigAmount = (trigAmount==\"\") ? 0 : parseInt(trigAmount);\n\tvar fp = $(\"#select-fund-primary\").val();\n\tfp = (fp == \"\") ? null : parseInt(fp);\n\tvar fs = $(\"#select-fund-secondary\").val();\n\tfs = (fs == \"\") ? null : parseInt(fs);\n\tvar ap = $(\"#select-actor-periodicity\").val();\n\tap = (ap == \"\") ? null : parseInt(ap);\n\tvar apUnits = $(\"#txt-actor-periodicityunits\").val();\n\tapUnits = (apUnits == \"\") ? 0 : parseInt(apUnits);\n\tvar tdi = $(\"#txt-actor-triginitial\").val();\n\ttdi = (tdi == \"\") ? MIN_DATE : parseInt(moment(tdi).format(\"x\"));\n\tvar tde = $(\"#txt-actor-trigend\").val();\n\ttde = (tde == \"\") ? MIN_DATE : parseInt(moment(tde).format(\"x\"));\n\tvar cir = $(\"#txt-actor-cir\").val();\n\tcir = (cir == \"\") ? null : parseFloat(cir);\n\tvar lir = $(\"#txt-actor-loanapr\").val();\n\tlir = (lir == \"\") ? null : parseFloat(lir);\n\tvar ldur = $(\"#txt-actor-loandur\").val();\n\tldur = (ldur == \"\") ? 0 : parseInt(ldur);\n\n\thfActorId = $(\"#hf-actor-id\").val();\n    if (hfActorId == \"\") {\n\t\tvar newActorOptions = {\n\t\t\tname: $(\"#txt-actor-name\").val(),\n            triggerAmount: trigAmount,\n            fundPrimary: fp,\n            fundSecondary: fs,\n            periodicity: ap,\n            periodicityUnits: apUnits,\n            triggerDateInitial: tdi,\n            triggerDateEnd: tde,\n            isCompoundInterestAccrual: $(\"#chk-actor-accrual\").is(\":checked\"),\n            compoundInterestRate: cir,\n            isLoanPayment: $(\"#chk-actor-isloanpmt\").is(\":checked\"),\n            interestRate: lir,\n            loanDurationYears: ldur\n\t\t}\n\n    \tactor = continuum.addActor(newActorOptions);\n        \n        runProjection();\n        \n        return;\n    }\n    \n\tselActor = $(\"#select-actors option:selected\").val();\n\tactorId = parseInt(selActor);\n\tactor = continuum.getActorCollection().get(actorId);\n\n\tactor.name = $(\"#txt-actor-name\").val();\n    actor.triggerAmount = trigAmount;\n    actor.fundPrimary = fp;\n    actor.fundSecondary = fs;\n    actor.periodicity = ap;\n    actor.periodicityUnits = apUnits;\n    actor.triggerDateInitial = tdi;\n    actor.triggerDateEnd = tde;\n    actor.isCompoundInterestAccrual = $(\"#chk-actor-accrual\").is(\":checked\");\n    actor.compoundInterestRate = cir;\n    actor.isLoanPayment = $(\"#chk-actor-isloanpmt\").is(\":checked\");\n    actor.interestRate = lir;\n    actor.loanDurationYears = ldur;\n    \n\tcontinuum.getActorCollection().update(actor);\n\n\trunProjection();\n}\n\nfunction deleteActor()\n{\n\tvar selActor = $(\"#select-actors option:selected\").val();\n    selActor = selActor || \"\";\n    \n    if (selActor == \"\") {\n    \talertify.log(\"select an actor\");\n    \treturn;\n    }\n    \n    var actorId = parseInt(selActor);\n    var actor = continuum.getActorCollection().get(actorId);\n    \n    continuum.getActorCollection().remove(actor);\n    \n    runProjection();\n}\n\nfunction resetData() \n{\n\talertify.confirm(\"This will revert the data to original sample, are you sure?\", function (e) {\n    \t\tif (e) {\n              continuum.initializeDatabase();\n              addTestData();\n              runProjection();\n    \t\t} \n\t});\n}\n\n$(\"#txt-start\").datepicker({ changeMonth: true, changeYear: true });\n$(\"#txt-end\").datepicker({ changeMonth: true, changeYear: true });\n$(\"#txt-fund-inceptiondate\").datepicker({ changeMonth: true, changeYear: true });\n$(\"#txt-actor-triginitial\").datepicker({ changeMonth: true, changeYear: true });\n$(\"#txt-actor-trigend\").datepicker({ changeMonth: true, changeYear: true });\n\n$(\"#txt-start\").val(moment().add(-2, \"months\").format(\"MM/DD/YYYY\"));\n$(\"#txt-end\").val(moment().add(5, \"months\").format(\"MM/DD/YYYY\"));\n\nfunction dbLoaderCallback()\n{\n\tif (continuum.db.collections.length == 0) {\n    \tcontinuum.initializeDatabase();\n    \taddTestData();\n    }\n\n\trunProjection();\n}\n\ncontinuum = new LokiContinuum(\"ContinuumDB\", {\n        autoload: true,\n        autoloadCallback : dbLoaderCallback,\n        autosave: true, \n        autosaveInterval: 4000,\n        adapter: sbv.idbAdapter\n});\n\nloadSelects();\n\n\n\n\n"
}