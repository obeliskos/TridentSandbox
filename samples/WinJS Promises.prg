{
  "progName": "WinJS Promises",
  "htmlText": "<a class=\"TridentLinkSmall\" href=\"http://try.buildwinjs.com/#promises\" target=\"_blank\">See official sample in Microsoft's 'Try WinJS' sandbox</a>\n<br/>\n",
  "scriptText": "API_SetBackgroundColor(\"#444\");\n$(\"#UI_MainPlaceholder\").css(\"color\", \"#fff\");\n\nvar num1 = 1;\nvar num2 = 2;\n\noutput(\"Starting...<br/>\");\nasyncAdd(num1, num2).\n    then(function (v) {\n        output(\"Chaining: First then with value = \" + v + \" after adding \" + num1 + \" to \" + num2);\n        num1 = v;\n        num2 = 3;\n\n        // this return value is passed along to the next promise chain\n        return asyncAdd(v, num2);\n    }).\n    then(function (v) {\n        // this function receives the return value from the previous promise chain through the 'v' parameter\n        output(\"<br/> Chaining: Second then with value = \" + v + \" after adding \" + num1 + \" to \" + num2);\n        num1 = v;\n        num2 = 4;\n\n        // this return value is passed along to the next promise chain\n        return asyncAdd(v, num2);\n    }).\n    then(function (v) {\n        // this function receives the return value from the previous promise chain through the 'v' parameter\n        output(\"<br/> Chaining: Final then with value = \" + v + \" after adding \" + num1 + \" to \" + num2);\n    }).done();\n\n\n// Do an add asynchronously (via setTimeout)\nfunction asyncAdd(num1, num2) {\n    return new WinJS.Promise(function (complete) {\n        setTimeout(function () {\n            var sum = num1 + num2;\n\n            // this promise is completed when the complete() function is called which also\n            // returns the value (result) of the promise.\n            complete(sum);\n        }, 1000);\n    });\n}\n\nfunction output(s) {\n    document.getElementById(\"UI_MainPlaceholder\").innerHTML += s;\n}\n\n"
}