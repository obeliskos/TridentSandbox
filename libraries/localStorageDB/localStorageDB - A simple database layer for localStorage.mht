From: "Saved by Internet Explorer 11"
Subject: localStorageDB - A simple database layer for localStorage
Date: Wed, 19 Feb 2014 21:58:44 -0500
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0000_01CF2DBD.C2052660"
X-MimeOLE: Produced By Microsoft MimeOLE V6.3.9600.16384

This is a multi-part message in MIME format.

------=_NextPart_000_0000_01CF2DBD.C2052660
Content-Type: text/html;
	charset="Windows-1252"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://nadh.in/code/localstoragedb/

<!DOCTYPE HTML>
<!DOCTYPE html PUBLIC "" ""><HTML><HEAD><META content=3D"IE=3D11.0000"=20
http-equiv=3D"X-UA-Compatible">
	 <TITLE>localStorageDB - A simple database layer for =
localStorage</TITLE>	=20
<META http-equiv=3D"Content-Type" content=3D"text/html; =
charset=3Dwindows-1252">
<META name=3D"description" content=3D"A simple database library for =
localStorage with support for databases, tables, fields, and insert, =
select, query, update, and delete operations.">
	=20
<META name=3D"keywords" content=3D"localstorage library, localstorage =
wrapper, localstorage example, localstorage sql, localstorage linq, web =
sql, web sql alternative, localstorage database, localstorage tables, =
localstorage mysql, localstorage query, localstroage structure, =
localstorage data structure, html5 storage, html5 database, lightweight =
library, sessionstorage library, sessionstorage database, sessionstorage =
wrapper, sessionstorage sql">
	 <LINK href=3D"http://nadh.in/code/localstoragedb/style.css" =
rel=3D"stylesheet"=20
type=3D"text/css">=20
<META name=3D"GENERATOR" content=3D"MSHTML 11.00.9600.16518"></HEAD>=20
<BODY>
<DIV id=3D"main">
<P class=3D"git"><A class=3D"r" =
href=3D"https://github.com/knadh/localStorageDB/zipball/master">Download =

.zip</A>		 <A class=3D"r" =
href=3D"https://github.com/knadh/localStorageDB">GitHub=20
page</A>	 </P>
<H1>localStorageDB 2.2</H1>
<P>localStorageDB is a simple layer over localStorage (and =
sessionStorage) that=20
provides  a set of functions to store structured data like databases and =
tables.
 It provides basic insert/update/delete/query capabilities. =
localStorageDB has=20
no dependencies, and is not based on WebSQL. Underneath it all,  the =
structured=20
data is stored as serialized JSON in localStorage or sessionStorage.</P>
<UL>
  <LI>Kailash Nadh</LI>
  <LI>v 1.9 November 2012</LI>
  <LI>v 2.0 June 2013</LI>
  <LI>v 2.1 November 2013</LI>
  <LI>v 2.2 January 2014 Contribution: Andy Hawkins =
(http://a904guy.com)</LI>
  <LI>Documentation: <A=20
  =
href=3D"http://nadh.in/code/localstoragedb">http://nadh.in/code/localstor=
agedb</A></LI>
  <LI>Licensed: MIT license</LI></UL>
<H1>Usage / Examples</H1>
<H3>Creating a database, table, and populating the table</H3>
<PRE><CODE class=3D"language-javascript">// Initialise. If the database =
doesn't exist, it is created=0A=
var lib =3D new localStorageDB("library", localStorage);=0A=
=0A=
// Check if the database was just created. Useful for initial database =
setup=0A=
if( lib.isNew() ) {=0A=
=0A=
    // create the "books" table=0A=
    lib.createTable("books", ["code", "title", "author", "year", =
"copies"]);=0A=
=0A=
    // insert some data=0A=
    lib.insert("books", {code: "B001", title: "Phantoms in the brain", =
author: "Ramachandran", year: 1999, copies: 10});=0A=
    lib.insert("books", {code: "B002", title: "The tell-tale brain", =
author: "Ramachandran", year: 2011, copies: 10});=0A=
    lib.insert("books", {code: "B003", title: "Freakonomics", author: =
"Levitt and Dubner", year: 2005, copies: 10});=0A=
    lib.insert("books", {code: "B004", title: "Predictably irrational", =
author: "Ariely", year: 2008, copies: 10});=0A=
    lib.insert("books", {code: "B005", title: "Tesla: Man out of time", =
author: "Cheney", year: 2001, copies: 10});=0A=
    lib.insert("books", {code: "B006", title: "Salmon fishing in the =
Yemen", author: "Torday", year: 2007, copies: 10});=0A=
    lib.insert("books", {code: "B007", title: "The user illusion", =
author: "Norretranders", year: 1999, copies: 10});=0A=
    lib.insert("books", {code: "B008", title: "Hubble: Window of the =
universe", author: "Sparrow", year: 2010, copies: 10});=0A=
=0A=
    // commit the database to localStorage=0A=
    // all create/drop/insert/update/delete operations should be =
committed=0A=
    lib.commit();=0A=
}=0A=
</CODE></PRE>
<H3>Creating and populating a table in one go</H3>
<PRE><CODE>    // rows for pre-population=0A=
    var rows =3D [=0A=
        {code: "B001", title: "Phantoms in the brain", author: =
"Ramachandran", year: 1999, copies: 10},=0A=
        {code: "B002", title: "The tell-tale brain", author: =
"Ramachandran", year: 2011, copies: 10},=0A=
        {code: "B003", title: "Freakonomics", author: "Levitt and =
Dubner", year: 2005, copies: 10},=0A=
        {code: "B004", title: "Predictably irrational", author: =
"Ariely", year: 2008, copies: 10},=0A=
        {code: "B005", title: "Tesla: Man out of time", author: =
"Cheney", year: 2001, copies: 10},=0A=
        {code: "B006", title: "Salmon fishing in the Yemen", author: =
"Torday", year: 2007, copies: 10},=0A=
        {code: "B007", title: "The user illusion", author: =
"Norretranders", year: 1999, copies: 10},=0A=
        {code: "B008", title: "Hubble: Window of the universe", author: =
"Sparrow", year: 2010, copies: 10}=0A=
    ];=0A=
=0A=
    // create the table and insert records in one go=0A=
    lib.createTableWithData("books", rows);=0A=
=0A=
    lib.commit();=0A=
</CODE></PRE>
<H3>Altering</H3>
<PRE><CODE class=3D"language-javascript">// If database already exists, =
and want to alter existing tables=0A=
if(! (lib.columnExists("books", "publication")) ) {=0A=
    lib.alterTable("books", "publication", "McGraw-Hill Education");=0A=
    lib.commit(); // commit the deletions to localStorage=0A=
}=0A=
=0A=
// Multiple columns can also added at once=0A=
if(! (lib.columnExists("books", "publication") &amp;&amp; =
lib.columnExists("books", "ISBN")) ) {=0A=
    lib.alterTable("books", ["publication", "ISBN"], {publication: =
"McGraw-Hill Education", ISBN: "85-359-0277-5"});=0A=
    lib.commit(); // commit the deletions to localStorage=0A=
}=0A=
</CODE></PRE>
<H3>Querying</H3>
<PRE><CODE class=3D"language-javascript">// simple select queries=0A=
lib.query("books", {year: 2011});=0A=
lib.query("books", {year: 1999, author: "Norretranders"});=0A=
=0A=
// select all books=0A=
lib.query("books");=0A=
=0A=
// select all books published after 2003=0A=
lib.query("books", function(row) {  // the callback function is applied =
to every row in the table=0A=
    if(row.year &gt; 2003) {       // if it returns true, the row is =
selected=0A=
        return true;=0A=
    } else {=0A=
        return false;=0A=
    }=0A=
});=0A=
=0A=
// select all books by Torday and Sparrow=0A=
lib.query("books", function(row) {=0A=
    if(row.author =3D=3D "Torday" || row.author =3D=3D "Sparrow") {=0A=
        return true;=0A=
    } else {=0A=
        return false;=0A=
    }=0A=
});=0A=
</CODE></PRE>
<H3>Example results from a query</H3>
<PRE><CODE class=3D"language-javascript">// query results are returned =
as arrays of object literals=0A=
// an ID field with the internal auto-incremented id of the row is also =
included=0A=
// thus, ID is a reserved field name=0A=
=0A=
lib.query("books", {author: "ramachandran"});=0A=
=0A=
/* results=0A=
[=0A=
 {=0A=
   ID: 1,=0A=
   code: "B001",=0A=
   title: "Phantoms in the brain",=0A=
   author: "Ramachandran",=0A=
   year: 1999,=0A=
   copies: 10=0A=
 },=0A=
 {=0A=
   ID: 2,=0A=
   code: "B002",=0A=
   title: "The tell-tale brain",=0A=
   author: "Ramachandran",=0A=
   year: 2011,=0A=
   copies: 10=0A=
 }=0A=
]=0A=
*/=0A=
</CODE></PRE>
<H3>Updating</H3>
<PRE><CODE class=3D"language-javascript">// change the title of books =
published in 1999 to "Unknown"=0A=
lib.update("books", {year: 1999}, function(row) {=0A=
    row.title =3D "Unknown";=0A=
=0A=
    // the update callback function returns to the modified record=0A=
    return row;=0A=
});=0A=
=0A=
// add +5 copies to all books published after 2003=0A=
lib.update("books",=0A=
    function(row) { // select condition callback=0A=
        if(row.year &gt; 2003) {=0A=
            return true;=0A=
        } else {=0A=
            return false;=0A=
        }=0A=
    },=0A=
    function(row) { // update function=0A=
        row.year+=3D5;=0A=
        return row;=0A=
    }=0A=
);=0A=
</CODE></PRE>
<H3>Insert or Update conditionally</H3>
<PRE><CODE class=3D"language-javascript">// if there's a book with code =
B003, update it, or insert it as a new row=0A=
lib.insertOrUpdate("books", {code: 'B003'}, {   code: "B003",=0A=
                        title: "Freakonomics",=0A=
                        author: "Levitt and Dubner",=0A=
                        year: 2005,=0A=
                        copies: 15});=0A=
</CODE></PRE>
<H3>Deleting</H3>
<PRE><CODE class=3D"language-javascript">// delete all books published =
in 1999=0A=
lib.deleteRows("books", {year: 1999});=0A=
=0A=
// delete all books published before 2005=0A=
lib.deleteRows("books", function(row) {=0A=
    if(row.year &lt; 2005) {=0A=
        return true;=0A=
    } else {=0A=
        return false;=0A=
    }=0A=
});=0A=
=0A=
lib.commit(); // commit the deletions to localStorage=0A=
</CODE></PRE>
<H1>Methods</H1>
<TABLE>
  <THEAD>
  <TR>
    <TH>Method</TH>
    <TH>Arguments</TH>
    <TH>Description</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD>localStorageDB()</TD>
    <TD>database_name, storage_engine</TD>
    <TD>Constructor<BR>                - storage_engine can either be=20
      localStorage (default) or sessionStorage             </TD></TR>
  <TR>
    <TD>isNew()</TD>
    <TD></TD>
    <TD>Returns true if a database was created at the time of =
initialisation=20
      with the constructor</TD></TR>
  <TR>
    <TD>drop()</TD>
    <TD></TD>
    <TD>Deletes a database, and purges it from localStorage</TD></TR>
  <TR>
    <TD>tableCount()</TD>
    <TD></TD>
    <TD>Returns the number of tables in a database</TD></TR>
  <TR>
    <TD>commit()</TD>
    <TD></TD>
    <TD>Commits the database to localStorage. Returns true if =
successful, and=20
      false otherwise (highly unlikely)</TD></TR>
  <TR>
    <TD>serialize()</TD>
    <TD></TD>
    <TD>Returns the entire database as serialized JSON</TD></TR>
  <TR>
    <TD>tableExists()</TD>
    <TD>table_name</TD>
    <TD>Checks whether a table exists in the database</TD></TR>
  <TR>
    <TD>tableFields()</TD>
    <TD>table_name</TD>
    <TD>Returns the list of fields of a table</TD></TR>
  <TR>
    <TD>createTable()</TD>
    <TD>table_name, fields</TD>
    <TD>Creates a table<BR>                - fields is an array of =
string=20
      fieldnames. 'ID' is a reserved fieldname.             </TD></TR>
  <TR>
    <TD>createTableWithData()</TD>
    <TD>table_name, rows</TD>
    <TD>Creates a table and populates it<BR>                - rows is an =
array=20
      of object literals where each object represents a record<BR>       =
       =20
       [{field1: val, field2: val}, {field1: val, field2: val}]          =
  =20
  </TD></TR>
  <TR>
    <TD>alterTable()</TD>
    <TD>table_name, new_fields, default_values</TD>
    <TD>Alter a table<BR>                - new_fields can be a array of=20
      columns OR a string of single column.<BR>                - =
default_values=20
      (optional) can be a object of column's default values OR a default =
value=20
      string for single column for existing rows.             </TD></TR>
  <TR>
    <TD>dropTable()</TD>
    <TD>table_name</TD>
    <TD>Deletes a table from the database</TD></TR>
  <TR>
    <TD>truncate()</TD>
    <TD>table_name</TD>
    <TD>Empties all records in a table and resets the internal auto =
increment=20
      ID to 0</TD></TR>
  <TR>
    <TD>columnExists()</TD>
    <TD>table_name, field_name</TD>
    <TD>Checks whether a column exists in database table.</TD></TR>
  <TR>
    <TD>rowCount()</TD>
    <TD>table_name</TD>
    <TD>Returns the number of rows in a table</TD></TR>
  <TR>
    <TD>insert()</TD>
    <TD>table_name, data</TD>
    <TD>Inserts a row into a table and returns its numerical ID<BR>      =
     =20
          - data is an object literal with field-values<BR>              =
  Every=20
      row is assigned an auto-incremented numerical ID automatically     =
       =20
    </TD></TR>
  <TR>
    <TD>query()</TD>
    <TD>table_name, query, limit, start</TD>
    <TD>                Returns an array of rows (object literals) from =
a=20
      table matching the query.<BR>                - query is either an =
object=20
      literal or null. If query is not supplied, all rows are =
returned<BR>      =20
               - limit is the maximum number of rows to be returned<BR>  =
       =20
            - start is the  number of rows to be skipped from the =
beginning=20
      (offset)<BR>                Every returned row will have it's =
internal=20
      auto-incremented id assigned to the variable ID</TD></TR>
  <TR>
    <TD>update()</TD>
    <TD>table_name, query, update_function</TD>
    <TD>Updates existing records in a table matching query, and returns =
the=20
      number of rows affected<BR>                - query is an object =
literal or=20
      a function. If query is not supplied, all rows are updated<BR>     =
       =20
         - update_function is a function that returns an object literal =
with the=20
      updated values             </TD></TR>
  <TR>
    <TD>insertOrUpdate()</TD>
    <TD>table_name, query, data</TD>
    <TD>Inserts a row into a table if the given query matches no =
results, or=20
      updates the rows matching the query.<BR>                    - =
query is=20
      either an object literal, function, or null.<BR>                   =
 - data=20
      is an object literal with field-values                     =
<BR><BR>       =20
                  Returns the numerical ID if a new row was inserted, or =
an=20
      array of IDs if rows were updated                 </TD></TR>
  <TR>
    <TD>deleteRows()</TD>
    <TD>table_name, query</TD>
    <TD>Deletes rows from a table matching query, and returns the number =
of=20
      rows deleted<BR>                - query is either an object =
literal or a=20
      function. If query is not supplied, all rows are deleted           =
 =20
  </TD></TR></TBODY></TABLE></DIV><!-- main //-->=20
<DIV id=3D"footer"><A href=3D"http://nadh.in/">Kailash =
Nadh</A></DIV></BODY></HTML>

------=_NextPart_000_0000_01CF2DBD.C2052660
Content-Type: text/css;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://nadh.in/code/localstoragedb/style.css

body {
	background: rgb(247, 247, 247); margin: 0px; color: rgb(51, 51, 51); =
line-height: 22px; font-family: "Helvetica Neue", Helvetica, Arial; =
font-size: 14px;
}
#main {
	background: rgb(255, 255, 255); margin: 30px auto 0px; padding: 20px =
30px; border: 1px solid rgb(204, 204, 204); border-image: none; width: =
700px; box-shadow: inset 0px 0px 10px #eee, 0px 0px 3px #ddd;
}
.section {
	margin-top: 40px;
}
h1 {
	margin-top: 35px;
}
h2 {
	margin-top: 35px;
}
h3 {
	margin-top: 35px;
}
h1 {
	padding-top: 15px; border-top-color: rgb(204, 204, 204); =
border-top-width: 1px; border-top-style: solid;
}
h6 {
	margin: 0px 0px 10px; color: rgb(153, 153, 153); font-size: 14px;
}
code {
	background: rgb(246, 246, 246); padding: 5px; overflow: auto; =
-ms-overflow-y: hidden;
}
pre {
	background: rgb(246, 246, 246); padding: 5px; overflow: auto; =
-ms-overflow-y: hidden;
}
a {
	color: rgb(129, 21, 211); text-decoration: none;
}
a.r {
	background: rgb(129, 21, 211); padding: 4px 8px; border-radius: 5px; =
color: rgb(255, 255, 255);
}
a:hover {
	background: rgb(0, 0, 0); color: rgb(255, 255, 255);
}
table {
	border-color: rgb(221, 221, 221); margin-top: 30px; border-spacing: 0;
}
th {
	background: rgb(238, 238, 238);
}
th {
	border-color: rgb(221, 221, 221); padding: 10px;
}
td {
	border-color: rgb(221, 221, 221); padding: 10px;
}
#footer {
	margin: 15px 0px; text-align: center;
}

------=_NextPart_000_0000_01CF2DBD.C2052660--
